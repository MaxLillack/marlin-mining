// EXCERPT FROM MERGE  Marlin/Marlin_main.cpp

<<<<<<< HEAD
static void engage_z_probe() {
  // Engage Z Servo endstop if enabled
  #ifdef SERVO_ENDSTOPS
    if (servo_endstops[Z_AXIS] > -1) {
      #if SERVO_LEVELING
        servos[servo_endstops[Z_AXIS]].attach(0);
      #endif
      servos[servo_endstops[Z_AXIS]].write(servo_endstop_angles[Z_AXIS * 2]);
      #if SERVO_LEVELING
        delay(PROBE_SERVO_DEACTIVATION_DELAY);
        servos[servo_endstops[Z_AXIS]].detach();
      #endif
    }
  #elif defined(Z_PROBE_ALLEN_KEY)
    feedrate = homing_feedrate[X_AXIS];
    
    // Move to the start position to initiate deployment
    destination[X_AXIS] = Z_PROBE_ALLEN_KEY_DEPLOY_X;
    destination[Y_AXIS] = Z_PROBE_ALLEN_KEY_DEPLOY_Y;
    destination[Z_AXIS] = Z_PROBE_ALLEN_KEY_DEPLOY_Z;
    prepare_move_raw();

    // Home X to touch the belt
    feedrate = homing_feedrate[X_AXIS]/10;
    destination[X_AXIS] = 0;
    prepare_move_raw();
    
    // Home Y for safety
    feedrate = homing_feedrate[X_AXIS]/2;
    destination[Y_AXIS] = 0;
    prepare_move_raw();
    
    st_synchronize();
    
    // If Z_PROBE_AND_ENDSTOP is changed to completely break it's bonds from Z_MIN_ENDSTOP and become
    // it's own unique entity, then the following logic will need to be modified
    // so it only uses the Z_PROBE
    #if defined(Z_PROBE_AND_ENDSTOP)
    bool z_probe_endstop = (READ(Z_PROBE_PIN) != Z_PROBE_ENDSTOP_INVERTING);
    if (z_probe_endstop)
    #else
    bool z_min_endstop = (READ(Z_MIN_PIN) != Z_MIN_ENDSTOP_INVERTING);
    if (z_min_endstop)
    #endif
    {
        if (!Stopped)
        {
            SERIAL_ERROR_START;
            SERIAL_ERRORLNPGM("Z-Probe failed to engage!");
            LCD_ALERTMESSAGEPGM("Err: ZPROBE");
=======
  static void engage_z_probe() {

    #ifdef SERVO_ENDSTOPS

      // Engage Z Servo endstop if enabled
      if (servo_endstops[Z_AXIS] >= 0) {
        #if SERVO_LEVELING
          servos[servo_endstops[Z_AXIS]].attach(0);
        #endif
        servos[servo_endstops[Z_AXIS]].write(servo_endstop_angles[Z_AXIS * 2]);
        #if SERVO_LEVELING
          delay(PROBE_SERVO_DEACTIVATION_DELAY);
          servos[servo_endstops[Z_AXIS]].detach();
        #endif
      }

    #elif defined(Z_PROBE_ALLEN_KEY)

      feedrate = homing_feedrate[X_AXIS];

      // Move to the start position to initiate deployment
      destination[X_AXIS] = Z_PROBE_ALLEN_KEY_DEPLOY_X;
      destination[Y_AXIS] = Z_PROBE_ALLEN_KEY_DEPLOY_Y;
      destination[Z_AXIS] = Z_PROBE_ALLEN_KEY_DEPLOY_Z;
      prepare_move_raw();

      // Home X to touch the belt
      feedrate = homing_feedrate[X_AXIS]/10;
      destination[X_AXIS] = 0;
      prepare_move_raw();

      // Home Y for safety
      feedrate = homing_feedrate[X_AXIS]/2;
      destination[Y_AXIS] = 0;
      prepare_move_raw();

      st_synchronize();

      bool z_min_endstop = (READ(Z_MIN_PIN) != Z_MIN_ENDSTOP_INVERTING);
      if (z_min_endstop) {
        if (!Stopped) {
          SERIAL_ERROR_START;
          SERIAL_ERRORLNPGM("Z-Probe failed to engage!");
          LCD_ALERTMESSAGEPGM("Err: ZPROBE");
>>>>>>> MarlinFirmware/Development

