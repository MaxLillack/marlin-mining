commit e4039a9b5bc8e10bb004fb7a4c7c4b725fc0edd1 (from f54315c72829375dbddce1f3e2604a26281d98f4)
Merge: cd4c3e9 f54315c
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sat Mar 26 00:41:31 2016 -0700

    Merge pull request #3250 from esenapaj/patch-1
    
    Fix typo

diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index 18ace7e..4769c39 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -2224,13 +2224,15 @@ void unknown_command_error() {
 
 #if ENABLED(HOST_KEEPALIVE_FEATURE)
 
+  /**
+   * Output a "busy" message at regular intervals
+   * while the machine is not accepting commands.
+   */
   void host_keepalive() {
     millis_t ms = millis();
     if (busy_state != NOT_BUSY) {
       if (ms < next_busy_signal_ms) return;
       switch (busy_state) {
-        case NOT_BUSY:
-          break;
         case IN_HANDLER:
         case IN_PROCESS:
           SERIAL_ECHO_START;
@@ -2246,7 +2248,7 @@ void unknown_command_error() {
           break;
       }
     }
-    next_busy_signal_ms = ms + 2000UL;
+    next_busy_signal_ms = ms + 10000UL; // "busy: ..." message every 10s
   }
 
 #endif //HOST_KEEPALIVE_FEATURE
@@ -5978,28 +5980,34 @@ void process_next_command() {
   char* starpos = strchr(current_command, '*');  // * should always be the last parameter
   if (starpos) while (*starpos == ' ' || *starpos == '*') *starpos-- = '\0'; // nullify '*' and ' '
 
+  char *cmd_ptr = current_command;
+
   // Get the command code, which must be G, M, or T
-  char command_code = *current_command;
+  char command_code = *cmd_ptr++;
 
-  // Skip the letter-code and spaces to get the numeric part
-  current_command_args = current_command + 1;
-  while (*current_command_args == ' ') ++current_command_args;
+  // Skip spaces to get the numeric part
+  while (*cmd_ptr == ' ') cmd_ptr++;
 
   // The code must have a numeric value
-  bool code_is_good = (*current_command_args >= '0' && *current_command_args <= '9');
+  bool code_is_good = false;
+
+  int codenum = 0; // define ahead of goto
 
-  int codenum; // define ahead of goto
+  // Get and skip the code number
+  while (*cmd_ptr >= '0' && *cmd_ptr <= '9') {
+    code_is_good = true;
+    codenum = codenum * 10 + *cmd_ptr - '0';
+    cmd_ptr++;
+  }
 
   // Bail early if there's no code
   if (!code_is_good) goto ExitUnknownCommand;
 
-  // Args pointer optimizes code_seen, especially those taking XYZEF
-  // This wastes a little cpu on commands that expect no arguments.
-  while (*current_command_args == ' ' || (*current_command_args >= '0' && *current_command_args <= '9')) ++current_command_args;
+  // Skip all spaces to get to the first argument
+  while (*cmd_ptr == ' ') cmd_ptr++;
 
-  // Interpret the code int
-  seen_pointer = current_command;
-  codenum = code_value_short();
+  // The command's arguments start here, for sure!
+  current_command_args = cmd_ptr;
 
   KEEPALIVE_STATE(IN_HANDLER);
 

