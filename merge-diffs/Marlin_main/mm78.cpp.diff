commit 4d4c00d69cf012731bf15791046c07d907d89cb7 (from 12d72363cb58d3afed33bb33d690c6aa6c4bc015)
Merge: 628dcbc 12d7236
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Fri Aug 19 15:45:49 2016 -0500

    Merge pull request #4651 from thinkyhead/rc_homing_vs_leveling_z
    
    Improvements to homing / leveling

diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index 3fa9725..e026042 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -320,7 +320,7 @@ static float feedrate_mm_s = MMM_TO_MMS(1500.0), saved_feedrate_mm_s;
 int feedrate_percentage = 100, saved_feedrate_percentage;
 
 bool axis_relative_modes[] = AXIS_RELATIVE_MODES;
-int extruder_multiplier[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(100);
+int flow_percentage[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(100);
 bool volumetric_enabled = false;
 float filament_size[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(DEFAULT_NOMINAL_FILAMENT_DIA);
 float volumetric_multiplier[EXTRUDERS] = ARRAY_BY_EXTRUDERS1(1.0);
@@ -5622,7 +5622,7 @@ inline void gcode_M220() {
 inline void gcode_M221() {
   if (get_target_extruder_from_command(221)) return;
   if (code_seen('S'))
-    extruder_multiplier[target_extruder] = code_value_int();
+    flow_percentage[target_extruder] = code_value_int();
 }
 
 /**
@@ -6087,7 +6087,7 @@ inline void gcode_M400() { stepper.synchronize(); }
     //SERIAL_PROTOCOLPGM("Filament dia (measured mm):");
     //SERIAL_PROTOCOL(filament_width_meas);
     //SERIAL_PROTOCOLPGM("Extrusion ratio(%):");
-    //SERIAL_PROTOCOL(extruder_multiplier[active_extruder]);
+    //SERIAL_PROTOCOL(flow_percentage[active_extruder]);
   }
 
   /**
@@ -8459,15 +8459,18 @@ void prepare_move_to_destination() {
   static millis_t next_status_led_update_ms = 0;
 
   void handle_status_leds(void) {
-    float max_temp = 0.0;
     if (ELAPSED(millis(), next_status_led_update_ms)) {
       next_status_led_update_ms += 500; // Update every 0.5s
+      float max_temp =
+        #if HAS_TEMP_BED
+          MAX3(max_temp, thermalManager.degTargetBed(), thermalManager.degBed())
+        #else
+          0.0
+        #endif
+      ;
       HOTEND_LOOP() {
-        max_temp = max(max(max_temp, thermalManager.degHotend(e)), thermalManager.degTargetHotend(e));
+        max_temp = MAX3(max_temp, thermalManager.degHotend(e), thermalManager.degTargetHotend(e));
       }
-      #if HAS_TEMP_BED
-        max_temp = max(max(max_temp, thermalManager.degTargetBed()), thermalManager.degBed());
-      #endif
       bool new_led = (max_temp > 55.0) ? true : (max_temp < 54.0) ? false : red_led;
       if (new_led != red_led) {
         red_led = new_led;

