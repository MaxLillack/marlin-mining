commit 3e7fcb813e54a5d223ec34cbd17f2e8d72367daa (from d47a3e5950ec8dc129c8939ae8a9acdf32580134)
Merge: d47a3e5 2a77c84
Author: ErikZalm <erik@vdzalm.eu>
Date:   Sat Feb 11 07:36:24 2012 -0800

    Merge pull request #61 from daid/Marlin_v1
    
    Updated SERIAL define to MYSERIAL, because Arduino 1.0 defines SERIAL as 0.

diff --git a/Marlin/Marlin.h b/Marlin/Marlin.h
index 821324c..ffa3839 100644
--- a/Marlin/Marlin.h
+++ b/Marlin/Marlin.h
@@ -47,9 +47,9 @@
 #include "WString.h"
 
 #if MOTHERBOARD == 8  // Teensylu
-  #define SERIAL Serial
+  #define MYSERIAL Serial
 #else
-  #define SERIAL MSerial
+  #define MYSERIAL MSerial
 #endif
 
 //this is a unfinsihed attemp to removes a lot of warning messages, see:
@@ -63,10 +63,10 @@
 //#define MYPGM(s)  (__extension__({static prog_char __c[]  = (s); &__c[0];})) //this does not work but hides the warnings
 
 
-#define SERIAL_PROTOCOL(x) SERIAL.print(x);
+#define SERIAL_PROTOCOL(x) MYSERIAL.print(x);
 #define SERIAL_PROTOCOLPGM(x) serialprintPGM(MYPGM(x));
-#define SERIAL_PROTOCOLLN(x) {SERIAL.print(x);SERIAL.write('\n');}
-#define SERIAL_PROTOCOLLNPGM(x) {serialprintPGM(MYPGM(x));SERIAL.write('\n');}
+#define SERIAL_PROTOCOLLN(x) {MYSERIAL.print(x);MYSERIAL.write('\n');}
+#define SERIAL_PROTOCOLLNPGM(x) {serialprintPGM(MYPGM(x));MYSERIAL.write('\n');}
 
 
 const char errormagic[] PROGMEM ="Error:";
@@ -93,7 +93,7 @@ FORCE_INLINE void serialprintPGM(const char *str)
   char ch=pgm_read_byte(str);
   while(ch)
   {
-    SERIAL.write(ch);
+    MYSERIAL.write(ch);
     ch=pgm_read_byte(++str);
   }
 }
diff --git a/Marlin/Marlin.pde b/Marlin/Marlin.pde
index b2a9065..b16174c 100644
--- a/Marlin/Marlin.pde
+++ b/Marlin/Marlin.pde
@@ -247,7 +247,7 @@ void suicide()
 void setup()
 { 
   setup_powerhold();
-  SERIAL.begin(BAUDRATE);
+  MYSERIAL.begin(BAUDRATE);
   SERIAL_PROTOCOLLNPGM("start");
   SERIAL_ECHO_START;
   SERIAL_ECHOPGM("Marlin: ");
@@ -328,8 +328,8 @@ void loop()
 
 void get_command() 
 { 
-  while( SERIAL.available() > 0  && buflen < BUFSIZE) {
-    serial_char = SERIAL.read();
+  while( MYSERIAL.available() > 0  && buflen < BUFSIZE) {
+    serial_char = MYSERIAL.read();
     if(serial_char == '\n' || serial_char == '\r' || serial_char == ':' || serial_count >= (MAX_CMD_SIZE - 1) ) 
     {
       if(!serial_count) return; //if empty line
@@ -1219,7 +1219,7 @@ void process_commands()
 void FlushSerialRequestResend()
 {
   //char cmdbuffer[bufindr][100]="Resend:";
-  SERIAL.flush();
+  MYSERIAL.flush();
   SERIAL_PROTOCOLPGM("Resend:");
   SERIAL_PROTOCOLLN(gcode_LastN + 1);
   ClearToSend();
diff --git a/Marlin/SdBaseFile.cpp b/Marlin/SdBaseFile.cpp
index 450c9f3..b84efc8 100644
--- a/Marlin/SdBaseFile.cpp
+++ b/Marlin/SdBaseFile.cpp
@@ -343,38 +343,38 @@ int8_t SdBaseFile::lsPrintNext( uint8_t flags, uint8_t indent) {
       && DIR_IS_FILE_OR_SUBDIR(&dir)) break;
   }
   // indent for dir level
-  for (uint8_t i = 0; i < indent; i++) SERIAL.write(' ');
+  for (uint8_t i = 0; i < indent; i++) MYSERIAL.write(' ');
 
   // print name
   for (uint8_t i = 0; i < 11; i++) {
     if (dir.name[i] == ' ')continue;
     if (i == 8) {
-      SERIAL.write('.');
+      MYSERIAL.write('.');
       w++;
     }
-    SERIAL.write(dir.name[i]);
+    MYSERIAL.write(dir.name[i]);
     w++;
   }
   if (DIR_IS_SUBDIR(&dir)) {
-    SERIAL.write('/');
+    MYSERIAL.write('/');
     w++;
   }
   if (flags & (LS_DATE | LS_SIZE)) {
-    while (w++ < 14) SERIAL.write(' ');
+    while (w++ < 14) MYSERIAL.write(' ');
   }
   // print modify date/time if requested
   if (flags & LS_DATE) {
-    SERIAL.write(' ');
+    MYSERIAL.write(' ');
     printFatDate( dir.lastWriteDate);
-    SERIAL.write(' ');
+    MYSERIAL.write(' ');
     printFatTime( dir.lastWriteTime);
   }
   // print size if requested
   if (!DIR_IS_SUBDIR(&dir) && (flags & LS_SIZE)) {
-    SERIAL.write(' ');
-    SERIAL.print(dir.fileSize);
+    MYSERIAL.write(' ');
+    MYSERIAL.print(dir.fileSize);
   }
-  SERIAL.println();
+  MYSERIAL.println();
   return DIR_IS_FILE(&dir) ? 1 : 2;
 }
 //------------------------------------------------------------------------------
@@ -945,26 +945,26 @@ void SdBaseFile::printDirName(const dir_t& dir,
   for (uint8_t i = 0; i < 11; i++) {
     if (dir.name[i] == ' ')continue;
     if (i == 8) {
-      SERIAL.write('.');
+      MYSERIAL.write('.');
       w++;
     }
-    SERIAL.write(dir.name[i]);
+    MYSERIAL.write(dir.name[i]);
     w++;
   }
   if (DIR_IS_SUBDIR(&dir) && printSlash) {
-    SERIAL.write('/');
+    MYSERIAL.write('/');
     w++;
   }
   while (w < width) {
-    SERIAL.write(' ');
+    MYSERIAL.write(' ');
     w++;
   }
 }
 //------------------------------------------------------------------------------
 // print uint8_t with width 2
 static void print2u( uint8_t v) {
-  if (v < 10) SERIAL.write('0');
-  SERIAL.print(v, DEC);
+  if (v < 10) MYSERIAL.write('0');
+  MYSERIAL.print(v, DEC);
 }
 //------------------------------------------------------------------------------
 /** %Print a directory date field to Serial.
@@ -983,10 +983,10 @@ static void print2u( uint8_t v) {
  * \param[in] fatDate The date field from a directory entry.
  */
 void SdBaseFile::printFatDate(uint16_t fatDate) {
-  SERIAL.print(FAT_YEAR(fatDate));
-  SERIAL.write('-');
+  MYSERIAL.print(FAT_YEAR(fatDate));
+  MYSERIAL.write('-');
   print2u( FAT_MONTH(fatDate));
-  SERIAL.write('-');
+  MYSERIAL.write('-');
   print2u( FAT_DAY(fatDate));
 }
 
@@ -1000,9 +1000,9 @@ void SdBaseFile::printFatDate(uint16_t fatDate) {
  */
 void SdBaseFile::printFatTime( uint16_t fatTime) {
   print2u( FAT_HOUR(fatTime));
-  SERIAL.write(':');
+  MYSERIAL.write(':');
   print2u( FAT_MINUTE(fatTime));
-  SERIAL.write(':');
+  MYSERIAL.write(':');
   print2u( FAT_SECOND(fatTime));
 }
 //------------------------------------------------------------------------------
@@ -1014,7 +1014,7 @@ void SdBaseFile::printFatTime( uint16_t fatTime) {
 bool SdBaseFile::printName() {
   char name[13];
   if (!getFilename(name)) return false;
-  SERIAL.print(name);
+  MYSERIAL.print(name);
   return true;
 }
 //------------------------------------------------------------------------------
diff --git a/Marlin/SdFatUtil.cpp b/Marlin/SdFatUtil.cpp
index 965f6ec..1187ec5 100644
--- a/Marlin/SdFatUtil.cpp
+++ b/Marlin/SdFatUtil.cpp
@@ -48,7 +48,7 @@ int SdFatUtil::FreeRam() {
  * \param[in] str Pointer to string stored in flash memory.
  */
 void SdFatUtil::print_P( PGM_P str) {
-  for (uint8_t c; (c = pgm_read_byte(str)); str++) SERIAL.write(c);
+  for (uint8_t c; (c = pgm_read_byte(str)); str++) MYSERIAL.write(c);
 }
 //------------------------------------------------------------------------------
 /** %Print a string in flash memory followed by a CR/LF.
@@ -58,7 +58,7 @@ void SdFatUtil::print_P( PGM_P str) {
  */
 void SdFatUtil::println_P( PGM_P str) {
   print_P( str);
-  SERIAL.println();
+  MYSERIAL.println();
 }
 //------------------------------------------------------------------------------
 /** %Print a string in flash memory to Serial.
diff --git a/Marlin/stepper.cpp b/Marlin/stepper.cpp
index 994683f..6bd84b1 100644
--- a/Marlin/stepper.cpp
+++ b/Marlin/stepper.cpp
@@ -254,7 +254,7 @@ FORCE_INLINE unsigned short calc_timer(unsigned short step_rate) {
     timer = (unsigned short)pgm_read_word_near(table_address);
     timer -= (((unsigned short)pgm_read_word_near(table_address+2) * (unsigned char)(step_rate & 0x0007))>>3);
   }
-  if(timer < 100) { timer = 100; SERIAL.print("Steprate to high : "); SERIAL.println(step_rate); }//(20kHz this should never happen)
+  if(timer < 100) { timer = 100; MYSERIAL.print("Steprate to high : "); MYSERIAL.println(step_rate); }//(20kHz this should never happen)
   return timer;
 }
 

