commit 4097207c7527f2b5933cb1f2adf21aaabeb2e208 (from 45d64040fe859b4f92388a0c99514fd290a65120)
Merge: 45d6404 9b3d438
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 10 21:39:05 2015 -0700

    Merge pull request #2041 from thinkyhead/watch_temp
    
    More thermal protection

diff --git a/Marlin/Configuration_adv.h b/Marlin/Configuration_adv.h
index b79035a..b406155 100644
--- a/Marlin/Configuration_adv.h
+++ b/Marlin/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index d3b1a31..ed57d2b 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -3166,7 +3166,10 @@ inline void gcode_M104() {
       if (dual_x_carriage_mode == DXC_DUPLICATION_MODE && target_extruder == 0)
         setTargetHotend1(temp == 0.0 ? 0.0 : temp + duplicate_extruder_temp_offset);
     #endif
-    setWatch();
+
+    #ifdef WATCH_TEMP_PERIOD
+      start_watching_heater(target_extruder);
+    #endif
   }
 }
 
@@ -3278,7 +3281,9 @@ inline void gcode_M109() {
     if (code_seen('B')) autotemp_max = code_value();
   #endif
 
-  setWatch();
+  #ifdef WATCH_TEMP_PERIOD
+    start_watching_heater(target_extruder);
+  #endif
 
   millis_t temp_ms = millis();
 
diff --git a/Marlin/configurator/config/Configuration_adv.h b/Marlin/configurator/config/Configuration_adv.h
index b79035a..b406155 100644
--- a/Marlin/configurator/config/Configuration_adv.h
+++ b/Marlin/configurator/config/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/Felix/Configuration_adv.h b/Marlin/example_configurations/Felix/Configuration_adv.h
index 672b3ff..9384ed5 100644
--- a/Marlin/example_configurations/Felix/Configuration_adv.h
+++ b/Marlin/example_configurations/Felix/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/Hephestos/Configuration_adv.h b/Marlin/example_configurations/Hephestos/Configuration_adv.h
index 5713373..58159fe 100644
--- a/Marlin/example_configurations/Hephestos/Configuration_adv.h
+++ b/Marlin/example_configurations/Hephestos/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/K8200/Configuration_adv.h b/Marlin/example_configurations/K8200/Configuration_adv.h
index 672b3ff..9384ed5 100644
--- a/Marlin/example_configurations/K8200/Configuration_adv.h
+++ b/Marlin/example_configurations/K8200/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/SCARA/Configuration_adv.h b/Marlin/example_configurations/SCARA/Configuration_adv.h
index a706696..146e7fa 100644
--- a/Marlin/example_configurations/SCARA/Configuration_adv.h
+++ b/Marlin/example_configurations/SCARA/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 3000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/WITBOX/Configuration_adv.h b/Marlin/example_configurations/WITBOX/Configuration_adv.h
index 25abd17..a4d8f65 100644
--- a/Marlin/example_configurations/WITBOX/Configuration_adv.h
+++ b/Marlin/example_configurations/WITBOX/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h b/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h
index d035073..0807c99 100644
--- a/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-#define WATCH_TEMP_PERIOD 40000 //40 seconds
-#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/delta/generic/Configuration_adv.h b/Marlin/example_configurations/delta/generic/Configuration_adv.h
index cdfa7c8..9f1fda4 100644
--- a/Marlin/example_configurations/delta/generic/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/generic/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h b/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h
index 943022c..b36e8a0 100644
--- a/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/makibox/Configuration_adv.h b/Marlin/example_configurations/makibox/Configuration_adv.h
index 8d451fd..411985f 100644
--- a/Marlin/example_configurations/makibox/Configuration_adv.h
+++ b/Marlin/example_configurations/makibox/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h b/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h
index 3187150..572fdb6 100644
--- a/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h
+++ b/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h
@@ -14,13 +14,16 @@
 #endif
 #define BED_CHECK_INTERVAL 5000 //ms between checks in bang-bang control
 
-//// Heating sanity check:
-// This waits for the watch period in milliseconds whenever an M104 or M109 increases the target temperature
-// If the temperature has not increased at the end of that period, the target temperature is set to zero.
-// It can be reset with another M104/M109. This check is also only triggered if the target temperature and the current temperature
-//  differ by at least 2x WATCH_TEMP_INCREASE
-//#define WATCH_TEMP_PERIOD 40000 //40 seconds
-//#define WATCH_TEMP_INCREASE 10  //Heat up at least 10 degree in 20 seconds
+/**
+ * Heating Sanity Check
+ *
+ * Whenever an M104 or M109 increases the target temperature this will wait for WATCH_TEMP_PERIOD milliseconds,
+ * and if the temperature hasn't increased by WATCH_TEMP_INCREASE degrees, the machine is halted, requiring a
+ * hard reset. This test restarts with any M104/M109, but only if the current temperature is below the target
+ * by at least 2 * WATCH_TEMP_INCREASE degrees celsius.
+ */
+#define WATCH_TEMP_PERIOD 16000 // 16 seconds
+#define WATCH_TEMP_INCREASE 4  // Heat up at least 4 degrees in 16 seconds
 
 #ifdef PIDTEMP
   // this adds an experimental additional term to the heating power, proportional to the extrusion speed.
diff --git a/Marlin/temperature.cpp b/Marlin/temperature.cpp
index 7bf0b6e..e98ab00 100644
--- a/Marlin/temperature.cpp
+++ b/Marlin/temperature.cpp
@@ -171,9 +171,9 @@ static float analog2tempBed(int raw);
 static void updateTemperaturesFromRawValues();
 
 #ifdef WATCH_TEMP_PERIOD
-  int watch_start_temp[EXTRUDERS] = { 0 };
-  millis_t watchmillis[EXTRUDERS] = { 0 };
-#endif //WATCH_TEMP_PERIOD
+  int watch_target_temp[EXTRUDERS] = { 0 };
+  millis_t watch_heater_next_ms[EXTRUDERS] = { 0 };
+#endif
 
 #ifndef SOFT_PWM_SCALE
   #define SOFT_PWM_SCALE 0
@@ -447,14 +447,14 @@ void checkExtruderAutoFans()
 //
 // Temperature Error Handlers
 //
-inline void _temp_error(int e, const char *msg1, const char *msg2) {
+inline void _temp_error(int e, const char *serial_msg, const char *lcd_msg) {
   if (IsRunning()) {
     SERIAL_ERROR_START;
     if (e >= 0) SERIAL_ERRORLN((int)e);
-    serialprintPGM(msg1);
+    serialprintPGM(serial_msg);
     MYSERIAL.write('\n');
     #ifdef ULTRA_LCD
-      lcd_setalertstatuspgm(msg2);
+      lcd_setalertstatuspgm(lcd_msg);
     #endif
   }
   #ifndef BOGUS_TEMPERATURE_FAILSAFE_OVERRIDE
@@ -602,7 +602,7 @@ void manage_heater() {
     float ct = current_temperature[0];
     if (ct > min(HEATER_0_MAXTEMP, 1023)) max_temp_error(0);
     if (ct < max(HEATER_0_MINTEMP, 0.01)) min_temp_error(0);
-  #endif //HEATER_0_USES_MAX6675
+  #endif
 
   #if defined(WATCH_TEMP_PERIOD) || !defined(PIDTEMPBED) || HAS_AUTO_FAN
     millis_t ms = millis();
@@ -620,26 +620,29 @@ void manage_heater() {
     // Check if temperature is within the correct range
     soft_pwm[e] = current_temperature[e] > minttemp[e] && current_temperature[e] < maxttemp[e] ? (int)pid_output >> 1 : 0;
 
+    // Check if the temperature is failing to increase
     #ifdef WATCH_TEMP_PERIOD
-      if (watchmillis[e] && ms > watchmillis[e] + WATCH_TEMP_PERIOD) {
-        if (degHotend(e) < watch_start_temp[e] + WATCH_TEMP_INCREASE) {
-          setTargetHotend(0, e);
-          LCD_MESSAGEPGM(MSG_HEATING_FAILED_LCD); // translatable
-          SERIAL_ECHO_START;
-          SERIAL_ECHOLNPGM(MSG_HEATING_FAILED);
+      // Is it time to check this extruder's heater?
+      if (watch_heater_next_ms[e] && ms > watch_heater_next_ms[e]) {
+        // Has it failed to increase enough?
+        if (degHotend(e) < watch_target_temp[e]) {
+          // Stop!
+          disable_all_heaters();
+          _temp_error(e, MSG_HEATING_FAILED, MSG_HEATING_FAILED_LCD);
         }
         else {
-          watchmillis[e] = 0;
+          // Only check once per M104/M109
+          watch_heater_next_ms[e] = 0;
         }
       }
-    #endif //WATCH_TEMP_PERIOD
+    #endif // WATCH_TEMP_PERIOD
 
     #ifdef TEMP_SENSOR_1_AS_REDUNDANT
       if (fabs(current_temperature[0] - redundant_temperature) > MAX_REDUNDANT_TEMP_SENSOR_DIFF) {
         disable_all_heaters();
         _temp_error(0, PSTR(MSG_EXTRUDER_SWITCHED_OFF), PSTR(MSG_ERR_REDUNDANT_TEMP));
       }
-    #endif // TEMP_SENSOR_1_AS_REDUNDANT
+    #endif
 
   } // Extruders Loop
 
@@ -996,17 +999,22 @@ void tp_init() {
   #endif //BED_MAXTEMP
 }
 
-void setWatch() {
-  #ifdef WATCH_TEMP_PERIOD
-    millis_t ms = millis();
-    for (int e = 0; e < EXTRUDERS; e++) {
-      if (degHotend(e) < degTargetHotend(e) - (WATCH_TEMP_INCREASE * 2)) {
-        watch_start_temp[e] = degHotend(e);
-        watchmillis[e] = ms;
-      } 
+#ifdef WATCH_TEMP_PERIOD
+  /**
+   * Start Heating Sanity Check for hotends that are below
+   * their target temperature by a configurable margin.
+   * This is called when the temperature is set. (M104, M109)
+   */
+  void start_watching_heater(int e) {
+    millis_t ms = millis() + WATCH_TEMP_PERIOD;
+    if (degHotend(e) < degTargetHotend(e) - (WATCH_TEMP_INCREASE * 2)) {
+      watch_target_temp[e] = degHotend(e) + WATCH_TEMP_INCREASE;
+      watch_heater_next_ms[e] = ms;
     }
-  #endif 
-}
+    else
+      watch_heater_next_ms[e] = 0;
+  }
+#endif
 
 #if HAS_HEATER_THERMAL_PROTECTION || HAS_BED_THERMAL_PROTECTION
 
diff --git a/Marlin/temperature.h b/Marlin/temperature.h
index f9effaa..6a08d09 100644
--- a/Marlin/temperature.h
+++ b/Marlin/temperature.h
@@ -130,7 +130,6 @@ HOTEND_ROUTINES(0);
 
 int getHeaterPower(int heater);
 void disable_all_heaters();
-void setWatch();
 void updatePID();
 
 void PID_autotune(float temp, int extruder, int ncycles);
@@ -138,6 +137,10 @@ void PID_autotune(float temp, int extruder, int ncycles);
 void setExtruderAutoFanState(int pin, bool state);
 void checkExtruderAutoFans();
 
+#ifdef WATCH_TEMP_PERIOD
+  void start_watching_heater(int e=0);
+#endif
+
 FORCE_INLINE void autotempShutdown() {
   #ifdef AUTOTEMP
     if (autotemp_enabled) {
diff --git a/Marlin/ultralcd.cpp b/Marlin/ultralcd.cpp
index 15c20ff..a1a24db 100644
--- a/Marlin/ultralcd.cpp
+++ b/Marlin/ultralcd.cpp
@@ -521,7 +521,9 @@ void _lcd_preheat(int endnum, const float temph, const float tempb, const int fa
   setTargetBed(tempb);
   fanSpeed = fan;
   lcd_return_to_status();
-  setWatch(); // heater sanity check timer
+  #ifdef WATCH_TEMP_PERIOD
+    if (endnum >= 0) start_watching_heater(endnum);
+  #endif
 }
 void lcd_preheat_pla0() { _lcd_preheat(0, plaPreheatHotendTemp, plaPreheatHPBTemp, plaPreheatFanSpeed); }
 void lcd_preheat_abs0() { _lcd_preheat(0, absPreheatHotendTemp, absPreheatHPBTemp, absPreheatFanSpeed); }

commit 4097207c7527f2b5933cb1f2adf21aaabeb2e208 (from 9b3d4380d31e0824d85a36e71665ba2f90e34363)
Merge: 45d6404 9b3d438
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Sun May 10 21:39:05 2015 -0700

    Merge pull request #2041 from thinkyhead/watch_temp
    
    More thermal protection

diff --git a/Documentation/BedLeveling.md b/Documentation/BedLeveling.md
deleted file mode 100644
index 35a38bb..0000000
--- a/Documentation/BedLeveling.md
+++ /dev/null
@@ -1,105 +0,0 @@
-===============================================
-Instructions for configuring Bed Auto Leveling
-===============================================
-There are two options for this feature. You may choose to use a servo mounted on the X carriage or you may use a sled that mounts on the X axis and can be docked when not in use.
-See the section for each option below for specifics about installation and configuration. Also included are instructions that apply to both options.
-
-Instructions for Both Options
------------------------------
-
-Uncomment the "ENABLE_AUTO_BED_LEVELING" define (commented by default)
-
-The following options define the probing positions. These are good starting values.
-I recommend to keep a better clearance from borders in the first run and then make the probes as close as possible to borders:
-
-* \#define LEFT_PROBE_BED_POSITION 30
-* \#define RIGHT_PROBE_BED_POSITION 140
-* \#define BACK_PROBE_BED_POSITION 140
-* \#define FRONT_PROBE_BED_POSITION 30
-
-A few more options:
-
-* \#define XY_TRAVEL_SPEED 6000
-
-X and Y axis travel speed between probes, in mm/min.
-Bear in mind that really fast moves may render step skipping. 6000 mm/min (100mm/s) is a good value.
-
-* \#define Z_RAISE_BEFORE_PROBING 10
-* \#define Z_RAISE_BETWEEN_PROBINGS 10
-
-The Z axis is lifted when traveling to the first probe point by Z_RAISE_BEFORE_PROBING value
-and then lifted when traveling from first to second and second to third point by Z_RAISE_BETWEEN_PROBINGS.
-All values are in mm as usual.
-
-Servo Option Notes
-------------------
-You will probably need a swivel Z-MIN endstop in the extruder. A rc servo do a great job.
-Check the system working here: http://www.youtube.com/watch?v=3IKMeOYz-1Q (Enable English subtitles)
-Teasing ;-) video: http://www.youtube.com/watch?v=x8eqSQNAyro
-
-In order to get the servo working, you need to enable:
-
-* \#define NUM_SERVOS 1 // Servo index starts with 0 for M280 command
-
-* \#define SERVO_ENDSTOPS {-1, -1, 0} // Servo index for X, Y, Z. Disable with -1
-
-* \#define SERVO_ENDSTOP_ANGLES {0,0, 0,0, 165,60} // X,Y,Z Axis Extend and Retract angles
-
-The first define tells firmware how many servos you have.
-The second tells what axis this servo will be attached to. In the example above, we have a servo in Z axis.
-The third one tells the angle in 2 situations: Probing (165º) and resting (60º). Check this with command M280 P0 S{angle} (example: M280 P0 S60 moves the servo to 60º)
-
-Next you need to define the Z endstop (probe) offset from hotend.
-My preferred method:
-
-* a) Make a small mark in the bed with a marker/felt-tip pen.
-* b) Place the hotend tip as *exactly* as possible on the mark, touching the bed. Raise the hotend 0.1mm (a regular paper thickness) and zero all axis (G92 X0 Y0 Z0);
-* d) Raise the hotend 10mm (or more) for probe clearance, lower the Z probe (Z-Endstop) with M401 and place it just on that mark by moving X, Y and Z;
-* e) Lower the Z in 0.1mm steps, with the probe always touching the mark (it may be necessary to adjust X and Y as well) until you hear the "click" meaning the mechanical endstop was trigged. You can confirm with M119;
-* f) Now you have the probe in the same place as your hotend tip was before. Perform a M114 and write down the values, for example: X:24.3 Y:-31.4 Z:5.1;
-* g) You can raise the z probe with M402 command;
-* h) Fill the defines bellow multiplying the values by "-1" (just change the signal)
-
-* X and Y-Offset must be Integers!
-* \#define X_PROBE_OFFSET_FROM_EXTRUDER -24
-* \#define Y_PROBE_OFFSET_FROM_EXTRUDER 31
-* \#define Z_PROBE_OFFSET_FROM_EXTRUDER -5.1
-
-Sled Option Notes
------------------
-The sled option uses an electromagnet to attach and detach to/from the X carriage. See http://www.thingiverse.com/thing:396692 for more details on how to print and install this feature. It uses the same connections as the servo option.
-
-To use the sled option, you must define two additional things in Configuration.h:
-
-* \#define Z_PROBE_SLED
-* \#define SLED_DOCKING_OFFSET 5
-
-Uncomment the Z_PROBE_SLED to define to enable the sled (commented out by default).
-
-Uncomment the SLED_DOCKING_OFFSET to set the extra distance the X axis must travel to dock the sled. This value can be found by moving the X axis to its maximum position then measure the distance to the right X end and subtract the width of the sled (23mm if you printed the sled from Thingiverse).
-
-Next you need to define the Z endstop (probe) offset from hotend.
-My preferred method:
-
-* a) Home the X and Y axes.
-* b) Move the X axis to about the center of the print bed. Make a mark on the print bed.
-* c) Move the Y axis to the maximum position. Make another mark.
-* d) Home the X axis and use a straight edge to make a line between the two points.
-* e) Repeat (b)-(d) reversing the X and Y. When you are done you will have two lines on the print bed. We will use these to measure the offset for the Z probe endstop.
-* f) Move the nozzle so that it is positioned on the center point of the two lines. You can use fine movement of 0.1mm to get it as close as possible. Note the position of X and Y.
-* g) Zero the Z axis with the G92 Z0 command.
-* h) Raise the Z axis about 20mmm.
-* i) Use the G32 command to retrieve the sled.
-* j) Now more the X and Y axis to the position recorded in (f).
-* k) Lower the Z axis in 0.1mm steps until you hear the "click" meaning the mechanical endstop was trigged. You can confirm with the M119 command. Note the position of the Z axis.
-* l) Make a mark on the print bed where the endstop lever has touched the print bed. Raise the Z-axis about 30mm to give yourself some room.
-* m) Now measure the distance from the center point to the endstop impact site along the X and Y axis using the lines drawn previously.
-* n) Fill in the values below. If the endstop mark is in front of the line running left-to-right, use positive values. If it is behind, use negative values. For the Z axis use the value from (k) and subtract 0.1mm.
-
-For example, suppose you measured the endstop position and it was 20mm to the right of the line running front-to-back, 10mm toward the front of the line running left-to-right, and the value from (k) was 2.85. The values for the defines would be:
-
-* \#define X_PROBE_OFFSET_FROM_EXTRUDER 20
-* \#define Y_PROBE_OFFSET_FROM_EXTRUDER 10
-* \#define Z_PROBE_OFFSET_FROM_EXTRUDER 2.75
-
-That's it.. enjoy never having to calibrate your Z endstop neither leveling your bed by hand anymore ;-)
diff --git a/Documentation/Compilation.md b/Documentation/Compilation.md
deleted file mode 100644
index 93c23a6..0000000
--- a/Documentation/Compilation.md
+++ /dev/null
@@ -1,16 +0,0 @@
-# Configuring and compilation
-
-  1. Install the latest non-beta arduino software IDE/toolset: http://www.arduino.cc/en/Main/Software
-  2. Download the Marlin firmware
-    - [Latest developement version](https://github.com/MarlinFirmware/Marlin/tree/Development)
-    - [Stable version]()
-  3. In both cases use the "Download Zip" button on the right.
-  4. Some boards require special files and/or libraries from the ArduinoAddons directory. Take a look at the dedicated [README](/ArduinoAddons/README.md) for details.
-  5. Start the arduino IDE.
-  6. Select Tools -> Board -> Arduino Mega 2560 or your microcontroller
-  7. Select the correct serial port in Tools ->Serial Port
-  8. Open Marlin.pde or .ino
-  9. Click the Verify/Compile button
-  10. Click the Upload button. If all goes well the firmware is uploading
-
-That's ok.  Enjoy Silky Smooth Printing.
diff --git a/Documentation/Contributing.md b/Documentation/Contributing.md
deleted file mode 100644
index 2caa964..0000000
--- a/Documentation/Contributing.md
+++ /dev/null
@@ -1,10 +0,0 @@
-Developer Notes
-===================
-
-- There are now 2 branches: The __development__ branch is where new features and code changes will be sorted out. This branch may have untested code in it, so please let us know if you find any bugs. When the __development__ branch has reached a state where it is stable, it will be moved to the __stable__ branch.
-
-- We are doing a kind of cleanup in the list of Issues and Pull Requests, the aim is to get to a state where we can certify the code as stable. To get the code tested as widely as possible we require several volunteers with a wide variety of hardware configurations willing to test the firmware and help us to certify it as stable. If you want to help out testing go to this issue and let us know: https://github.com/MarlinFirmware/Marlin/issues/1209
-
-- Before you submit any pull request, we ask that you _PLEASE_ test your code before submission, even if the change seems innocuous. When creating the pull request, please include the hardware you used for testing and a short synopsis of your testing procedure. Untested pull requests are less likely to be merged, as even slight changes create the risk of breaking the main branch.
-
-- If you have a fix don't open an issue telling about it, but test the code and submit a pull request. Use the __development__ branch when you submit.
\ No newline at end of file
diff --git a/Documentation/Features.md b/Documentation/Features.md
deleted file mode 100644
index b306741..0000000
--- a/Documentation/Features.md
+++ /dev/null
@@ -1,112 +0,0 @@
-# Features
-
-*   Interrupt based movement with real linear acceleration
-*   High steprate
-*   Look ahead (Keep the speed high when possible. High cornering speed)
-*   Interrupt based temperature protection
-*   Preliminary support for [Matthew Roberts Advance Algorithm](http://reprap.org/pipermail/reprap-dev/2011-May/003323.html)
-*   Full endstop support
-*   SD Card support
-*   SD Card folders (works in pronterface)
-*   SD Card autostart support
-*   LCD support (ideally 20x4)
-*   LCD menu system for autonomous SD card printing, controlled by an click-encoder.
-*   EEPROM storage of e.g. max-velocity, max-acceleration, and similar variables
-*   many small but handy things originating from bkubicek's fork.
-*   Arc support
-*   Temperature oversampling
-*   Dynamic Temperature setpointing aka "AutoTemp"
-*   Support for [QTMarlin](https://github.com/bkubicek/QTMarlin), a very beta GUI for PID-tuning and velocity-acceleration testing. 
-*   Endstop trigger reporting to the host software.
-*   Updated sdcardlib
-*   Heater power reporting. Useful for PID monitoring.
-*   PID tuning
-*   [CoreXY kinematics](www.corexy.com/theory.html)
-*   Delta kinematics
-*   SCARA kinematics
-*   Dual X-carriage support for multiple extruder systems
-*   Configurable serial port to support connection of wireless adaptors.
-*   Automatic operation of extruder/cold-end cooling fans based on nozzle temperature
-*   RC Servo Support, specify angle or duration for continuous rotation servos.
-*   Bed Auto Leveling.
-*   Support for a filament diameter sensor, which adjusts extrusion volume
-
-The default baudrate is 250000. This baudrate has less jitter and hence errors than the usual 115200 baud, but is less supported by drivers and host-environments.
-
-## Differences and additions to the already good Sprinter firmware
-
-### Look-ahead
-
-Marlin has look-ahead. While sprinter has to break and re-accelerate at each corner,
-lookahead will only decelerate and accelerate to a velocity,
-so that the change in vectorial velocity magnitude is less than the xy_jerk_velocity.
-This is only possible, if some future moves are already processed, hence the name.
-It leads to less over-deposition at corners, especially at flat angles.
-
-### Arc support
-
-Slic3r can find curves that, although broken into segments, were ment to describe an arc.
-Marlin is able to print those arcs. The advantage is the firmware can choose the resolution,
-and can perform the arc with nearly constant velocity, resulting in a nice finish.
-Also, less serial communication is needed.
-
-### Temperature Oversampling
-
-To reduce noise and make the PID-differential term more useful, 16 ADC conversion results are averaged.
-
-### AutoTemp
-
-If your gcode contains a wide spread of extruder velocities, or you realtime change the building speed, the temperature should be changed accordingly.
-Usually, higher speed requires higher temperature.
-This can now be performed by the AutoTemp function
-By calling M109 S<mintemp> B<maxtemp> F<factor> you enter the autotemp mode.
-
-You can leave it by calling M109 without any F.
-If active, the maximal extruder stepper rate of all buffered moves will be calculated, and named "maxerate" [steps/sec].
-The wanted temperature then will be set to t=tempmin+factor*maxerate, while being limited between tempmin and tempmax.
-If the target temperature is set manually or by gcode to a value less then tempmin, it will be kept without change.
-Ideally, your gcode can be completely free of temperature controls, apart from a M109 S T F in the start.gcode, and a M109 S0 in the end.gcode.
-
-### EEPROM
-
-If you know your PID values, the acceleration and max-velocities of your unique machine, you can set them, and finally store them in the EEPROM.
-After each reboot, it will magically load them from EEPROM, independent what your Configuration.h says.
-
-### LCD Menu
-
-If your hardware supports it, you can build yourself a LCD-CardReader+Click+encoder combination. It will enable you to realtime tune temperatures,
-accelerations, velocities, flow rates, select and print files from the SD card, preheat, disable the steppers, and do other fancy stuff.
-One working hardware is documented here: http://www.thingiverse.com/thing:12663
-Also, with just a 20x4 or 16x2 display, useful data is shown.
-
-### SD card directories
-
-If you have an SD card reader attached to your controller, also folders work now. Listing the files in pronterface will show "/path/subpath/file.g".
-You can write to file in a subfolder by specifying a similar text using small letters in the path.
-Also, backup copies of various operating systems are hidden, as well as files not ending with ".g".
-
-### Autostart
-
-If you place a file auto[0-9].g into the root of the sd card, it will be automatically executed if you boot the printer. The same file will be executed by selecting "Autostart" from the menu.
-First *0 will be performed, than *1 and so on. That way, you can heat up or even print automatically without user interaction.
-
-### Endstop trigger reporting
-
-If an endstop is hit while moving towards the endstop, the location at which the firmware thinks that the endstop was triggered is outputed on the serial port.
-This is useful, because the user gets a warning message.
-However, also tools like QTMarlin can use this for finding acceptable combinations of velocity+acceleration.
-
-### Coding paradigm
-
-Not relevant from a user side, but Marlin was split into thematic junks, and has tried to partially enforced private variables.
-This is intended to make it clearer, what interacts which what, and leads to a higher level of modularization.
-We think that this is a useful prestep for porting this firmware to e.g. an ARM platform in the future.
-A lot of RAM (with enabled LCD ~2200 bytes) was saved by storing char []="some message" in Program memory.
-In the serial communication, a #define based level of abstraction was enforced, so that it is clear that
-some transfer is information (usually beginning with "echo:"), an error "error:", or just normal protocol,
-necessary for backwards compatibility.
-
-### Interrupt based temperature measurements
-
-An interrupt is used to manage ADC conversions, and enforce checking for critical temperatures.
-This leads to less blocking in the heater management routine.
diff --git a/Documentation/FilamentSensor.md b/Documentation/FilamentSensor.md
deleted file mode 100644
index 46e4251..0000000
--- a/Documentation/FilamentSensor.md
+++ /dev/null
@@ -1,9 +0,0 @@
-Filament Sensor
----------------
-Supports the use of a real time filament diameter sensor that measures the diameter of the filament going into the extruder and then adjusts the extrusion rate to compensate for filament that does not match what is defined in the g-code.  The diameter can also be displayed on the LCD screen. This potentially eliminates the need to measure filament diameter when changing spools of filament. Gcode becomes independent of the filament diameter. Can also compensate for changing diameter.
-
-For examples of these sensors, see: http://www.thingiverse.com/thing:454584, https://www.youmagine.com/designs/filament-diameter-sensor, http://diy3dprinting.blogspot.com/2014/01/diy-filament-diameter-sensor.html. Any sensor which produces a voltage equivalent to the diameter in mm (i.e. 1v = 1mm) can be used. This provides a very simple interface and may encourage more innovation in this area.
-
-4 new Mcodes are defined to set relevant parameters: M404, M405, M406, M407 - see above.
-
- Implements a delay buffer to handle the transit delay between where the filament is measured and when it gets to the extruder.
\ No newline at end of file
diff --git a/Documentation/GCodes.md b/Documentation/GCodes.md
deleted file mode 100644
index d9e51d6..0000000
--- a/Documentation/GCodes.md
+++ /dev/null
@@ -1,210 +0,0 @@
-## Implemented G Codes
-
-- [Movement F and M Codes](#movement-g-and-m-codes)
-- [SD Card M Codes](#sd-card-m-codes)
-- [Hardware Control](#hardware-control)
-- [Temperature M Codes](#temperature-m-codes)
-- [Message M Codes](#message-m-codes)
-- [Endstops M Codes](#endstops-m-codes)
-- [Special Features M Codes](#special-features-m-codes)
-- [Units and Measures G and M Codes](#units-and-measures-g-and-m-codes)
-- [Firmware Retraction G and M Codes](#firmware-retraction-g-and-m-codes)
-- [Z Probe G and M Codes](#z-probe-g-and-m-codes)
-- [Filament Diameter M Codes](#filament-diameter-m-codes)
-- [EEPROM Settings M Codes](#eeprom-settings-m-codes)
-- [Delta M Codes](#delta-m-codes)
-- [Stepper Driver M Codes](#stepper-driver-m-codes)
-- [SCARA M Codes](#scara-m-codes)
-- [GCode Comments](#comments)
-
-### Movement G and M Codes
-```
-G0   -> G1
-G1   - Coordinated Movement X Y Z E
-G2   - CW ARC
-G3   - CCW ARC
-G4   - Dwell S[seconds] or P[milliseconds]
-G92  - Set the "current position" to coordinates: X<xpos> Y<ypos> Z<zpos> E<epos>
-M0   - Wait for user, with optional prompt message (requires LCD controller)
-       M0 Click When Ready ; show "Click When Ready" until the button is pressed.
-M1   - Same as M0
-M400 - Finish all moves
-M999 - Restart after being stopped by error
-```
-### SD Card M Codes
-```
-M20  - List SD card
-M21  - Init SD card
-M22  - Release SD card
-M23  - Select SD file (M23 filename.g)
-M24  - Start/resume SD print
-M25  - Pause SD print
-M26  - Set SD position in bytes (M26 S12345)
-M27  - Report SD print status
-M28  - Start SD write (M28 filename.g)
-M29  - Stop SD write
-M30  - Delete file from SD (M30 filename.g)
-M31  - Output time since last M109 or SD card start to serial
-M32  - Select file and start SD print (Can be used _while_ printing from SD card files):
-       syntax "M32 /path/filename#", or "M32 S<startpos bytes> !filename#"
-       Call gcode file : "M32 P !filename#" and return to caller file after finishing (similar to #include).
-       The '#' is necessary when calling from within sd files, as it stops buffer prereading
-M540 - Enable/Disable "Stop SD Print on Endstop Hit" (req. ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED)
-       M540 S<0|1>
-M928 - Start SD logging (M928 filename.g) - ended by M29
-```
-### Hardware Control
-```
-M42  - Change pin status via gcode: P<pin> S<value>. If P is omitted the onboard LED pin will be used.
-       M42 P9 S1 ; set PIN 9 to 1. 
-M80  - Turn on Power Supply
-M81  - Turn off Power Supply
-M84  - Disable steppers until next move,
-       or use S<seconds> to specify an inactivity timeout, after which the steppers will be disabled.  S0 to disable the timeout.
-M85  - Set inactivity shutdown timer with parameter S<seconds>. Disable with "M85" or "M85 S0".
-M112 - Emergency stop. Requires hardware reset!!
-M226 - Wait for a pin to be in some state: P<pin number> S<pin state>
-```
-### Temperature M Codes
-```
-M104 - Set extruder target temp
-M105 - Read current temp
-M106 - Fan on
-M107 - Fan off
-M109 - Sxxx Wait for extruder current temp to reach target temp. Waits only when heating
-       Rxxx Wait for extruder current temp to reach target temp. Waits when heating and cooling
-       IF AUTOTEMP is enabled, S<mintemp> B<maxtemp> F<factor>. Exit autotemp by any M109 without F
-M140 - Set bed target temp
-M190 - Sxxx Wait for bed current temp to reach target temp. Waits only when heating
-       Rxxx Wait for bed current temp to reach target temp. Waits when heating and cooling
-M301 - Set PID parameters P I and D
-M302 - Allow cold extrudes, or set the minimum extrude S<temperature>.
-M303 - PID relay autotune S<temperature> sets the target temperature. (default target temperature = 150C)
-M304 - Set bed PID parameters P I and D
-```
-### Message M Codes
-```
-M114 - Output current position to serial port
-M115 - Capabilities string
-M117 - Display message text on the LCD
-M119 - Output Endstop status to serial port
-```
-### Endstops M Codes
-```
-M120 - Enable endstop detection
-M121 - Disable endstop detection
-```
-### Special Features M Codes
-```
-M126 - Solenoid Air Valve Open (BariCUDA support by jmil)
-M127 - Solenoid Air Valve Closed (BariCUDA vent to atmospheric pressure by jmil)
-M128 - EtoP Open (BariCUDA EtoP = electricity to air pressure transducer by jmil)
-M129 - EtoP Closed (BariCUDA EtoP = electricity to air pressure transducer by jmil)
-M150 - Set BlinkM Color: R<red> U<green> B<blue> via I2C. Range: 0-255
-M240 - Trigger a camera to take a photograph. (Add to your per-layer GCode.)
-M250 - Set LCD contrast: C<0-63>
-M280 - Set servo position absolute. P<servo index> S<angle or microseconds>
-M300 - Play beep sound S<frequency Hz> P<duration ms>
-M380 - Activate solenoid on active extruder
-M381 - Disable all solenoids
-M600 - Pause for filament change X<xpos> Y<ypos> Z<lift> E<initial retract> L<later retract for removal>
-```
-### Units and Measures G and M Codes
-```
-G90  - Use Absolute Coordinates
-G91  - Use Relative Coordinates
-M82  - Set E codes absolute (default)
-M83  - Set E codes relative while in Absolute Coordinates (G90) mode
-M92  - Set axis_steps_per_unit - same syntax as G92
-M200 - Set filament diameter and set E axis units to mm^3 (use S0 to set back to mm).: D<mm>
-M201 - Set max acceleration in units/s^2 for print moves (M201 X1000 Y1000)
-M202 - Set max acceleration in units/s^2 for travel moves (M202 X1000 Y1000) Unused in Marlin!!
-M203 - Set maximum feedrate that your machine can sustain (M203 X200 Y200 Z300 E10000) in mm/sec
-M204 - Set default acceleration: P for Printing moves, R for Retract only (no X, Y, Z) moves and T for Travel (non printing) moves (ex. M204 P800 T3000 R9000) in mm/sec^2
-M205 - Advanced settings: minimum travel speed S=while printing T=travel only, B=minimum segment time X=maximum xy jerk, Z=maximum Z jerk, E=maximum E jerk
-M206 - Set additional homing offset
-M218 - Set hotend offset (in mm): T<extruder_number> X<offset_on_X> Y<offset_on_Y>
-M220 - Set speed factor override percentage: S<factor in percent>
-M221 - Set extrude factor override percentage: S<factor in percent>
-```
-### Firmware Retraction G and M Codes
-```
-G10  - Retract filament according to settings of M207
-G11  - Retract recover filament according to settings of M208
-M207 - Set retract length S[positive mm] F[feedrate mm/min] Z[additional zlift/hop], stays in mm regardless of M200 setting
-M208 - Set recover=unretract length S[positive mm surplus to the M207 S*] F[feedrate mm/s]
-M209 - S<1=true/0=false> enable automatic retract detect if the slicer did not support G10/11: every normal extrude-only move will be classified as retract depending on the direction
-```
-### Z Probe G and M Codes
-```
-G28  - Home all Axis
-G29  - Detailed Z-Probe, probes the bed at 3 or more points. The printer must be homed with G28 before G29.
-G30  - Single Z Probe, probes bed at current XY location.
-G31  - Dock Z Probe sled (if enabled)
-G32  - Undock Z Probe sled (if enabled)
-M48  - Measure Z_Probe repeatability: P<points> X<xpos> Y<ypos> V<verbosity> E=engage L<legs of travel>
-       As with G29, the E flag causes the probe to stow after each probe.
-M401 - Lower Z-probe (if present)
-M402 - Raise Z-probe (if present)
-```
-### Filament Diameter M Codes
-```
-M404 - Set (or display) Nominal Filament Diameter in mm: [N<diameter>] (e.g., 3mm or 1.75mm)
-M405 - Turn on Filament Sensor extrusion control: [D<distance>] to set distance (in cm) from sensor to extruder
-M406 - Turn off Filament Sensor extrusion control
-M407 - Display measured Filament Diameter
-```
-### EEPROM Settings M Codes
-```
-M500 - Store parameters in EEPROM
-M501 - Read parameters from EEPROM (if you need reset them after you changed them temporarily).
-M502 - Revert to the default "factory settings". You still need to store them in EEPROM afterwards if you want to.
-M503 - Print the current settings (from memory not from EEPROM). Use S0 to leave off headings.
-```
-### Delta M Codes
-```
-M665 - Set Delta configurations: L<diagonal rod> R<delta radius> S<segments/s>
-M666 - Set Delta endstop adjustment: X<x-adjustment> Y<y-adjustment> Z<z-adjustment>
-M605 - Set dual x-carriage movement mode: S<mode> [ X<duplication x-offset> R<duplication temp offset> ]
-```
-### Stepper Driver M Codes
-```
-M17  - Enable/Power all stepper motors
-M18  - Disable all stepper motors. (same as M84)
-M907 - Set digital trimpot motor current using axis codes.
-M908 - Control digital trimpot directly.
-M350 - Set microstepping mode.
-M351 - Toggle MS1 MS2 pins directly.
-```
-### SCARA M-Codes
-__May change to suit future G-code standards__
-```
-M360 - SCARA calibration: Move to cal-position ThetaA (0 deg calibration)
-M361 - SCARA calibration: Move to cal-position ThetaB (90 deg calibration - steps per degree)
-M362 - SCARA calibration: Move to cal-position PsiA (0 deg calibration)
-M363 - SCARA calibration: Move to cal-position PsiB (90 deg calibration - steps per degree)
-M364 - SCARA calibration: Move to cal-position PSIC (90 deg to Theta calibration position)
-M365 - SCARA calibration: Scaling factor, X, Y, Z axis
-```
-
-## Comments
-
-Comments start at a `;` (semicolon) and end with the end of the line:
-
-    N3 T0*57 ; This is a comment
-    N4 G92 E0*67
-    ; So is this
-    N5 G28*22
-
-(example taken from the [RepRap wiki](http://reprap.org/wiki/Gcode#Comments))
-
-If you need to use a literal `;` somewhere (for example within `M117`), you can escape semicolons with a `\`
-(backslash):
-
-     M117 Hello \;)
-
-`\` can also be used to escape `\` itself, if you need a literal `\` in front of a `;`:
-
-    M117 backslash: \\;and a comment
-
-Please note that hosts should strip any comments before sending GCODE to the printer in order to save bandwidth.
diff --git a/Documentation/Hardware.md b/Documentation/Hardware.md
deleted file mode 100644
index 806887e..0000000
--- a/Documentation/Hardware.md
+++ /dev/null
@@ -1,210 +0,0 @@
-## Marlin Supported Hardware
-
-- [Gen 7 Custom](#10-board_gen7_custom)
-- [Gen 7 <=1.2](#11-board_gen7_12)
-- [Gen 7 v1.3](#12-board_gen7_13)
-- [Gen 7 v1.4](#13-board_gen7_14)
-- [Cheaptronic v1.0](#2-board_cheaptronic)
-- [Sethi 3D_1](#20-board_sethi)
-- [RAMPS <=1.2](#3-board_ramps_old)
-- [RAMPS 1.3 Extruder-Fan-Bed](#33-board_ramps_13_efb)
-- [RAMPS 1.3 Extruder-Extruder-Bed](#34-board_ramps_13_eeb)
-- [RAMPS 1.3 Extruder-Fan-Fan](#35-board_ramps_13_eff)
-- [RAMPS 1.3 Extruder-Extruder-Fan](#36-board_ramps_13_eef)
-- [Felix 2](#37-board_felix2)
-- [Duemilanove 328P](#4-board_duemilanove_328p)
-- [Gen 6](#5-board_gen6)
-- [Gen 6 Deluxe](#51-board_gen6_deluxe)
-- [Sanguinololu <=1.1](#6-board_sanguinololu_11)
-- [Sanguinololu 1.2](#62-board_sanguinololu_12)
-- [Melzi](#63-board_melzi)
-- [STB v1.1](#64-board_stb_11)
-- [Azteeg X1](#65-board_azteeg_x1)
-- [Melzi 1284](#66-board_melzi_1284)
-- [Azteeg X3](#67-board_azteeg_x3)
-- [Azteeg X3 Pro](#68-board_azteeg_x3_pro)
-- [Ultimaker](#7-board_ultimaker)
-- [Legacy Ultimaker](#71-board_ultimaker_old)
-- [Ultimainboard 2.x](#72-board_ultimain_2)
-- [3DRAG](#77-board_3drag)
-- [Vellemann K8200](#78-board_k8200)
-- [Teensylu](#8-board_teensylu)
-- [Rumba](#80-board_rumba)
-- [Printrboard](#81-board_printrboard)
-- [Brainwave](#82-board_brainwave)
-- [SAV Mk-I](#83-board_sav_mki)
-- [Teensy++2.0](#84-board_teensy2)
-- [Brainwave Pro](#85-board_brainwave_pro)
-- [Gen3+](#9-board_gen3_plus)
-- [Gen3 Monolithic](#22-board_gen3_monolithic)
-- [Megatronics](#70-board_megatronics)
-- [Megatronics 2.0](#701-board_megatronics_2)
-- [Minitronics 1.0](#702-board_megatronics_1)
-- [Megatronics 3.0](#703-board_megatronics_3)
-- [OMCA Alpha](#90-board_omca_a)
-- [OMCA Final](#91-board_omca)
-- [RAMBo](#301-board_rambo)
-- [Elefu Ra](#21-board_elefu_3)
-- [5DPrint D8](#88-board_5dprint)
-- [Leapfrog](#999-board_leapfrog)
-- [MKS BASE 1.0](#40-board_mks_base)
-- [bq Witbox](#41-board_witbox)
-- [bq Prusa i3 Hephestos](#42-board_hephestos)
-- [2PrintBeta BAM&DICE](#401-board_bam_dice)
-- [2PrintBeta BAM&DICE DUE](#402-board_bam_dice_due)
-
-#### 10 BOARD_GEN7_CUSTOM
-Gen7 custom (Alfons3 Version) "https://github.com/Alfons3/Generation_7_Electronics"
-
-#### 11 BOARD_GEN7_12
-Gen7 v1.1, v1.2
-
-#### 12 BOARD_GEN7_13
-Gen7 v1.3
-
-#### 13 BOARD_GEN7_14
-Gen7 v1.4
-
-#### 2 BOARD_CHEAPTRONIC
-Cheaptronic v1.0
-
-#### 20 BOARD_SETHI
-Sethi 3D_1
-
-#### 3 BOARD_RAMPS_OLD
-MEGA/RAMPS up to 1.2
-
-#### 33 BOARD_RAMPS_13_EFB
-RAMPS 1.3 / 1.4 (Power outputs: Extruder, Fan, Bed)
-
-#### 34 BOARD_RAMPS_13_EEB
-RAMPS 1.3 / 1.4 (Power outputs: Extruder0, Extruder1, Bed)
-
-#### 35 BOARD_RAMPS_13_EFF
-RAMPS 1.3 / 1.4 (Power outputs: Extruder, Fan, Fan)
-
-#### 36 BOARD_RAMPS_13_EEF
-RAMPS 1.3 / 1.4 (Power outputs: Extruder0, Extruder1, Fan)
-
-#### 37 BOARD_FELIX2
-Felix 2.0+ Electronics Board (RAMPS like)
-
-#### 4 BOARD_DUEMILANOVE_328P
-Duemilanove w/ ATMega328P pin assignments
-
-#### 5 BOARD_GEN6
-Gen6
-
-#### 51 BOARD_GEN6_DELUXE
-Gen6 deluxe
-
-#### 6 BOARD_SANGUINOLOLU_11
-Sanguinololu < 1.2
-
-#### 62 BOARD_SANGUINOLOLU_12
-Sanguinololu 1.2 and above
-
-#### 63 BOARD_MELZI
-Melzi
-
-#### 64 BOARD_STB_11
-STB V1.1
-
-#### 65 BOARD_AZTEEG_X1
-Azteeg X1
-
-#### 66 BOARD_MELZI_1284
-Melzi with ATmega1284 (MaKr3d version)
-
-#### 67 BOARD_AZTEEG_X3
-Azteeg X3
-
-#### 68 BOARD_AZTEEG_X3_PRO
-Azteeg X3 Pro
-
-#### 7 BOARD_ULTIMAKER
-Ultimaker
-
-#### 71 BOARD_ULTIMAKER_OLD
-Ultimaker (Older electronics. Pre 1.5.4. This is rare)
-
-#### 72 BOARD_ULTIMAIN_2
-Ultimainboard 2.x (Uses TEMP_SENSOR 20)
-
-#### 77 BOARD_3DRAG
-3Drag Controller
-
-#### 78 BOARD_K8200
-Vellemann K8200 Controller (derived from 3Drag Controller)
-
-#### 8 BOARD_TEENSYLU
-Teensylu
-
-#### 80 BOARD_RUMBA
-Rumba
-
-#### 81 BOARD_PRINTRBOARD
-Printrboard (AT90USB1286)
-
-#### 82 BOARD_BRAINWAVE
-Brainwave (AT90USB646)
-
-#### 83 BOARD_SAV_MKI
-SAV Mk-I (AT90USB1286)
-
-#### 84 BOARD_TEENSY2
-Teensy++2.0 (AT90USB1286) - CLI compile: DEFINES=AT90USBxx_TEENSYPP_ASSIGNMENTS HARDWARE_MOTHERBOARD=84  make
-
-#### 85 BOARD_BRAINWAVE_PRO
-Brainwave Pro (AT90USB1286)
-
-#### 9 BOARD_GEN3_PLUS
-Gen3+
-
-#### 22 BOARD_GEN3_MONOLITHIC
-Gen3 Monolithic Electronics
-
-#### 70 BOARD_MEGATRONICS
-Megatronics
-
-#### 701 BOARD_MEGATRONICS_2
-Megatronics v2.0
-
-#### 702 BOARD_MEGATRONICS_1
-Minitronics v1.0
-
-#### 703 BOARD_MEGATRONICS_3
-Megatronics v3.0
-
-#### 90 BOARD_OMCA_A
-Alpha OMCA board
-
-#### 91 BOARD_OMCA
-Final OMCA board
-
-#### 301 BOARD_RAMBO
-Rambo
-
-#### 21 BOARD_ELEFU_3
-Elefu Ra Board (v3)
-
-#### 88 BOARD_5DPRINT
-5DPrint D8 Driver Board
-
-#### 999 BOARD_LEAPFROG
-Leapfrog
-
-#### 40 BOARD_MKS_BASE
-The [MKS BASE 1.0](http://reprap.org/wiki/MKS_BASE_1.0) is a custom board with pin assignments nearly identical to RAMPS 1.4.
-
-#### 41 BOARD_WITBOX
-The [bq WITBOX](https://github.com/bq/witbox) is not a controller board, but an open source box cartesian RAMPS-based printer. The controller is a standard Mega2560 with RAMPS 1.4 configured for a single extruder.
-
-#### 42 BOARD_HEPHESTOS
-The [bq Prusa i3 Hephestos](https://github.com/bq/prusa-i3-hephestos) is not a controller board, but an open source variant of the popular Prusa i3 Mendel RepRap. The controller is a standard Mega2560 with RAMPS 1.4 configured for a single extruder.
-
-#### 401 BOARD_BAM_DICE
-[2PrintBeta BAM&DICE](http://www.2printbeta.de/) with STK drivers. The Beta Arduino Mega (BAM) shield is a crowd-funded open source RAMPS shield with 5 slots for plugin modules instead of the standard stepper driver sockets. The DICE-STK module a stepper driver module utilizing the STK682-010-E with up to 128X micro-stepping. (A4988 also available.)
-
-#### 402 BOARD_BAM_DICE_DUE
-[2PrintBeta BAM&DICE Due](http://www.2printbeta.de/) with STK drivers. This variant of the BAM&DICE is made for the Due instead of the Mega.
diff --git a/Documentation/LCD Menu Tree.pdf b/Documentation/LCD Menu Tree.pdf
deleted file mode 100644
index 72b5911..0000000
Binary files a/Documentation/LCD Menu Tree.pdf and /dev/null differ
diff --git a/Documentation/LCDLanguageFont.md b/Documentation/LCDLanguageFont.md
deleted file mode 100644
index ff9c122..0000000
--- a/Documentation/LCDLanguageFont.md
+++ /dev/null
@@ -1,146 +0,0 @@
-# LCD Language Font System
-
-We deal with a variety of different displays.
-And we try to display a lot of different languages in different scripts on them.
-This system is ought to solve some of the related problems.
-
-## The Displays
-We have two different technologies for the displays:
-
-* Character based displays:
-  Have a fixed set of symbols (charset - font) in their ROM.
-  All of them have a similar but not identical symbol set at the positions 0 to 127 similar to US-ASCII.
-  On the other hand symbols at places higher than 127 have mayor differences.
-  Until now we know of (and support):
-  * 1.) HD44780 and similar with Kana charset A00 https://www.sparkfun.com/datasheets/LCD/HD44780.pdf Page 17
-      These are very common, but sadly not very useful when writing in European languages.
-  * 2.) HD44780 and similar with Western charset A02 https://www.sparkfun.com/datasheets/LCD/HD44780.pdf Page 18
-      These are rare, but fairly useful for European languages. Also a limited number of Cyrillic symbols is available.
-  * 3.) HD44780 and similar with Cyrillic charset http://store.comet.bg/download-file.php?id=466 Page 14
-      Some of our Russian friends use them.
-
-  At all of them you can define 8 different symbols by yourself. In Marlin they are used for the Feedrate-, Thermometer-, ... symbols
-
-* Full graphic displays:
-  Where we have the full freedom to display whatever we want, when we can make a program for it.
-  Currently we deal with 128x64 Pixel Displays and divide this area in about 5 Lines with about 22 columns.
-  Therefore we need fonts with a bounding box of about 6x10.
-  Until now we used a
-  * 1.) Marlin-font similar to ISO10646-1 but with special Symbols at the end, what made 'ü' and 'ä' inaccessible, in the size 6x10.
-  * 2.) Because these letters where to big for some locations on the info-screen we use a full ISO10646-1 font in the size of 6x9.(3200 byte)
-  * 3.) When we define USE_BIG_EDIT_FONT we use an additional ISO10646-1 font with 9x18, eating up another 3120 bytes of progmem - but readable without glasses.
-
-## The Languages
-  For the moment Marlin wants to support a lot of languages:
-  * en    English
-  * pl    Polish
-  * fr    French
-  * de    German
-  * es    Spanish
-  * ru    Russian
-  * it    Italian
-  * pt    Portuguese
-  * pt-br Portuguese (Brazil)
-  * fi    Finnish
-  * an    Aragonese
-  * nl    Dutch
-  * ca    Catalan
-  * eu    Basque-Euskera
-  * cn    Chinese
-  * jp    Japanese (Katakana)
-
-
-## The Problem
-  All of this languages, except the English, normally use extended symbol sets, not contained in US-ASCII.
-  Even the English translation uses some Symbols not in US-ASCII. ( '\002' for Thermometer, STR_h3 for '³')
-  And worse, in the code itself symbols are used, not taking in account, on what display they are written. [(This is true only for Displays with Japanese charset](https://github.com/MarlinFirmware/Marlin/blob/Development/Marlin/ultralcd_implementation_hitachi_HD44780.h#L218) on Western displays you'll see a '~' and on Cyrillic an 'arrow coming from top - pointing to left', what is quite the opposite of what the programmer wanted.)
-  The Germans want to use "ÄäÖöÜüß" the Finnish at least "äö". Other European languages want to see their accents on their letters.
-  For other scripts like Cyrillic, Japanese, Greek, Hebrew, ... you have to find totally different symbol sets.
-
-  Until now the problems where ignored widely.
-  The German translation used utf8 'ä' and 'ö' and did not care about showing garbage on ALL displays.
-  The Russian translators new that their system only works on the Cyrillic character displays and relied on special LCD routines (LiquidCrystalRus.cpp) to handle UTF8 but missed to implement a proper strlen().
-  The Japanese translator dealed with to scripts. He introduced a very special font for the full graphic displays and made use of the Japanese version of the character displays. Therefore he ended up with two pretty unreadable language.h files full of '\xxx' definitions.
-  Other languages ether tried to avoid wording with their special symbols or ignored the problem at all and used the basic symbols without the accents, dots, ... whatever.
-
-## The (partial) Solution
-  On a 'perfect' system like Windows or Linux we'd dig out unifont.ttf and some code from the libraries and they'd do what we want. But we are on a embedded system with very limited resources. So we had to find ways to limit the used space (Alone unifont.ttf is about 12MB) and have to make some compromise.
-
-### Aims:
-  * 1.) Make the input for translators as convenient as possible. (Unicode UTF8)
-  * 2.) Make the displays show the scripts as good as they can. (fonts, mapping tables)
-  * 3.) Don't destroy the existing language files.
-  * 3.) Don't loose to much speed
-  * 4.) Don't loose to much memory.
-
-### Actions:
-  * a.) Declare the display hardware we use. (Configuration.h)
-  * b.) Declare the language ore script we use. (Configuration.h)
-  * c.) Declare the kind of input we use. Ether direct pointers to the font (\xxx) or UTF8 and the font to use on graphic displays. (language_xx.h)
-  * d.) Declare the needed translations. (language_xx.h)
-  * e.) Make strlen() work with UTF8. (ultralcd.cpp)
-  * f.) Seperate the Marlin Symbols to their own font. (dogm_font_data_Marlin_symbols.h)
-  * g.) Make the fontswitch function remember the last used font. (dogm_lcd_implementation.h)
-  * h.) Make output functions that count the number of written chars and switch the font to Marlin symbols and back when needed. (dogm_lcd_implementation.h) (ultralcd_implementation_hitachi_HD44780.h)
-  * i.) Make three fonts to simulate the HD44780 charsets on dogm-displays. With this fonts the translator can check how his translation will look on the character based displays.
-  * j.) Make ISO fonts for Cyrillic and Katakana because they do not need a mapping table and are faster to deal with and have a better charset (less compromises) than the HD44780 fonts.
-  * k.) Make mapping functions and tables to convert from UTF8 to the fonts and integrate in the new output functions. (utf_mapper.h)
-  * l.) Delete the not needed any more 'LiquidCrystalRus.xxx' files and their calls in 'ultralcd_implementation_hitachi_HD44780.h'.
-  * m.) Split 'dogm_font_data_Marlin.h' into separate fonts and delete. (+dogm_font_data_6x9_marlin.h , +dogm_font_data_Marlin_symbols.h, -dogm_font_data_Marlin.h)
-  * n.) Do a bit of preprocessor magic to match displays - fonts and mappers in 'utf_mapper.h'.
-
-## Translators handbook
-  * a.) Check is there already is a language_xx.h file for your language (-> b.) or not (-> e.)
-  * b.) Ether their is declared MAPPER_NON (-> c.) or an other mapper (-> d.)
-  * c.) Symbols outside the normal ASCII-range (32-128) are written as "\xxx" and point directly into the font of the hardware you declared in 'Configuration.h'
-      This is one of the three fonts of the character based Hitachi displays (DISPLAY_CHARSET_HD44780_JAPAN, DISPLAY_CHARSET_HD44780_WEST, DISPLAY_CHARSET_HD44780_CYRILIC).
-      Even on the full graphic displays one of these will be used when SIMULATE_ROMFONT is defined.
-      If you don't make use of the extended character set your file will look like 'language_en.h' and your language file will work on all the displays. 
-      If you make intensive use, your file will look like 'language_kana.h' and your language file will only work on one of displays. (in this case DISPLAY_CHARSET_HD44780_JAPAN)
-      Be careful with the characters 0x5c = '\', and 0x7b - 0x7f. "{|}"These are not the same on all variants.
-      MAPPER_NON is the fastest an least memory consuming variant.
-      If you want to make use of more than a view symbols outside standard ASCII or want to improve the portability to more different types of displays use UTF8 input. That means define an other mapper.
-  * d.) With a mapper different to MAPPER_NON UTF8 input is used. Instead of "\xe1" (on a display with Japanese font) or STR_ae simply use "ä". When the string is read byte by byte , the "ä" will expand to "\0xc3\0xa4" or "Я" will expand to "0xd0\0xaf" or "ホ" will expand to "\0xe3\0x83\0x9b"
-      To limit the used memory we can't use all the possibilities UTF8 gives at the same time. We define a subset matching to the language or script we use.
-      * MAPPER_C2C3 correspondents good with west European languages the possible symbols are listed at (http://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block))
-      * MAPPER_D0D1 correspondents well with the Cyrillic languages. See (http://en.wikipedia.org/wiki/Cyrillic_(Unicode_block))
-      * MAPPER_E382E383 works with the Japanese Katakana script. See (http://en.wikipedia.org/wiki/Katakana_(Unicode_block))
-
-      The mapper functions will only catch the 'lead in' described in the mappers name. If the input they get does not match they'll put out a '?' or garbage.
-      The last byte in the sequence ether points directly into a matching ISO10646 font or via a mapper_table into one of the HD44780 fonts.
-      The mapper_tables do their best to find a similar symbol in the HD44780_fonts. For example replacing small letters with the matching capital letters. But they may fail to find something matching and will output a '?'. There are combinations of language and display what simply have no corresponding symbols - like Cyrillic on a Japanese display or visa versa - than the compiler will throw an error.
-      In short: Chose a Mapper working with the symbols you want to use. Use only symbols matching the mapper. On FULL graphic displays all will be fine, but check for daring replacements or question-marks in the output of character based displays by defining SIMULATE_ROMFONT and trying the different variants.
-      If you get a lot of question-marks on the Hitachi based displays with your new translation, maybe creating an additional language file with the format 'language_xx_utf8.h' is the way to go.
-      * MAPPER_NON is the fastest and least memory consuming variant.
-      * Mappers together with a ISO10646_font are the second best choice regarding speed and memory consumption. Only a few more decisions are mad per character.
-      * Mappers together with the HD44780_fonts use about additional 128 bytes for the mapping_table.
-  * e.) Creating a new language file is not a big thing. Just make a new file with the format 'language_xx.h' or maybe 'language.xx.utf8.h', define a mapper and a font in there and translate some of the strings defined in language_en.h. You can drop the surrounding  #ifndef #endif. You don't have to translate all the stings - the missing one will be added by language_en.h - in English - of cause.
-  * f.) If you cant find a matching mapper things will be a bit more complex. With the Hitachi based displays you will not have big chance to make something useful unless you have one with a matching charset. For a full graphic display - lets explain with - let's say Greece.
-      Find a matching charset. (http://en.wikipedia.org/wiki/Greek_and_Coptic)
-      Provide a font containing the symbols in the right size. Normal ASCII in the lower 127 places, the upper with your selection.
-      Write a mapper catching, in this case, 0xcd to 0xcf and add it to 'utf_mapper.h'.
-      In case of a ISO10646 font we have a MAPPER_ONE_TO_ONE and don't have to make a table.
-  * g.) If you discover enough useful symbols in one of the HD44780 fonts you can provide a mapping table. For example HD44780_WEST contains 'alpha', 'beta', 'pi', 'Sigma', 'omega' 'My' - what is not enough to make USEFUL table - I think.
-  * h.) If you want to integrate an entirely new variant of a Hitachi based display.
-      Add it in 'Configuration.h'. Define mapper tables in 'utf_mapper.h'. Maybe you need a new mapper function. 
-
-  The length of the strings is limited. '17 chars' was crude rule of thumb. Obviously 17 is to long for the 16x2 displays. A more exact rule would be max_strlen = Displaywidth - 2 - strlen(value to display behind). This is a bit complicated. So try and count is my rule of thumb. 
-
-  On the 16x2 displays the strings are cut at the end to fit on the display. So it's a good idea to make them differ early. ('Somverylongoptionname x' -> 'x Somverylongoptionname')
-
-  You'll find all translatable strings in 'language_en.h'. Please don't translate any strings from 'language.h', this may break the serial protocol.
-
-  For information about fonts see: Marlin\fonts\README.fonts
-
-
-## User Instructions
-   Define your hardware and the wanted language in 'Configuration.h'.
-   To find out what charset your hardware is, define language 'test' and compile. In the menu you will see two lines from the upper half of the charset.
-   * DISPLAY_CHARSET_HD44780_JAPAN   locks like "バパヒビピフブプヘベペホボポマミ"
-   * DISPLAY_CHARSET_HD44780_WESTERN locks like "ÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞß"
-   * DISPLAY_CHARSET_HD44780_CYRILIC locks like "РСТУФХЦЧШЩЪЫЬЭЮЯ"
-
-   If you get an error about missing mappers during compilation - lie about your displays hardware font to see at lest some garbage, or select an other language.
-   
-   English works on all hardware.
-
diff --git a/Documentation/Menu Plans.xlsx b/Documentation/Menu Plans.xlsx
deleted file mode 100644
index 8c7e2c1..0000000
Binary files a/Documentation/Menu Plans.xlsx and /dev/null differ
diff --git a/Documentation/MeshBedLeveling.md b/Documentation/MeshBedLeveling.md
deleted file mode 100644
index 09c1ec9..0000000
--- a/Documentation/MeshBedLeveling.md
+++ /dev/null
@@ -1,82 +0,0 @@
-==============================================
-Instructions for configuring Mesh Bed Leveling
-==============================================
-
-Background
-----------
-
-This mesh based method of leveling/compensating can compensate for an non-flat bed. There are various opinions about doing this. It was primarily written to compensate a RigidBot BIG bed (40x30cm) that was somewhat bent.
-
-Currently there is no automatic way to probe the bed like the Auto Bed Leveling feature. So, you can not enable `ENABLE_AUTO_BED_LEVELING` at the same time. This might soon be implemented though, stay tuned.
-
-Theory
-------
-
-The bed is manually probed in a grid maner. During a print the Z axis compensation will be interpolated within each square using a bi-linear method. Because the grid squares can be tilting in different directions a printing move can be split on the borders of the grid squares. During fast travel moves one can sometimes notice a de-acceleration on these borders. 
-
-Mesh point probing can either be carried out from the display, or by issuing `G29` commands.
-
-The Z-endstop should be set slightly above the bed. An opto endstop is preferable but a switch with a metal arm that allow some travel though should also work.
-
-Configuration
--------------
-
-In `Configuration.h` there are two options that can be enabled.
-
-`MESH_BED_LEVELING` will enable mesh bed leveling.<br/>
-`MANUAL_BED_LEVELING` will add the menu option for bed leveling.
-
-There are also some values that can be set.
-
-The following will set the step distance used when manually turning the display encoder. Default is 0.025
-
-`MBL_Z_STEP` 
-
-Following four define the area to cover. Default 10mm from max bed size
-
-`MESH_MIN_X`<br/>
-`MESH_MAX_X`<br/>
-`MESH_MIN_Y`<br/>
-`MESH_MAX_Y`
-
-Following two define the number of points to probe, total number will be these two multiplied. Default is 3x3 points. Don't probe more than 7x7 points (software limited)
-
-`MESH_NUM_X_POINTS`<br/> 
-`MESH_NUM_Y_POINTS`<br/>
-
-The following will set the Z-endstop height during probing. When initiating a bed leveling probing, a homing will take place and the Z-endstop will be set to this height so lowering through the endstop can take place and the bed should be within this distance. Default is 4mm
-
-`MESH_HOME_SEARCH_Z`
-
-The probed points will also be saved in the EEPROM if it has been enables. Otherwise a new probe sequence needs to be made next time the printer has been turned on.
-
-Probing the bed with the display
---------------------------------
-
-If `MANUAL_BED_LEVELING` has been enabled then will a `Level bed` menu option be available in the `Prepare` menu.
-
-When selecting this option the printer will first do a homing, and then travel to the first probe point. There it will wait. By turning the encoder on the display the hotend can now be lowered until it touches the bed. Using a paper to feel the distance when it gets close. Pressing the encoder/button will store this point and then travel to the next point. Repeating this until all points have been probed.
-
-If the EEPROM has been enable it can be good to issue a `M500` to get these points saved.
-
-Issuing a `G29` will return the state of the mesh leveling and report the probed points.
-
-Probing the bed with G-codes
-----------------------------
-
-Probing the bed by G-codes follows the sequence much like doing it with the display.
-
-`G29` or `G29 S0` will return the state of the bed leveling and report the probed points. Where X=1 Y=1 is the top-left value and X=MESH_NUM_X_POINTS Y=MESH_NUM_Y_POINTS is bottom-right value. X per column and Y per row.
-
-`G29 S1` will initiate the bed leveling, homing and traveling to the first point to probe.
-
-Then use your preferred Printer controller program, i.e. Printrun, to lower the hotend until it touches the bed. Using a paper to feel the distance when it gets close.
-
-`G29 S2` will store the point and travel to the next point until last point has been probed.
-
-`G29 S3 Xn Yn Zn.nn` will modify a single probed point. This can be used to tweak a badly probed point. Specify probe point where `Xn` and `Yn`, where `n` in `Xn` is between 1 and `MESH_NUM_X_POINTS`. Likewise for `Yn`. `Zn.nn` is the new Z value in that probed point. 
-
-Note
-----
-
-Depending how firm feel you aim for on the paper you can use the `Z offset` option in Slic3r to compensate a slight height diff. (I like the paper loose so I needed to put `-0.05` in Slic3r)
\ No newline at end of file
diff --git a/Documentation/RampsServoPower.md b/Documentation/RampsServoPower.md
deleted file mode 100644
index 2f715cf..0000000
--- a/Documentation/RampsServoPower.md
+++ /dev/null
@@ -1,9 +0,0 @@
-
-
-__Note for RAMPS users:__
-----------------------
-
--By default, RAMPS have no power on servo bus (if you happen to have a multimeter, check the voltage on servo power pins).
--In order to get the servo working, you need to supply 5V to 5V pin.. You can do it using your power supply (if it has a 5V output) or jumping the "Vcc" from Arduino to the 5V RAMPS rail.
--These 2 pins are located just between the Reset Button and the yellow fuses... There are marks in the board showing 5V and VCC.. just connect them..
--If jumping the arduino Vcc do RAMPS 5V rail, take care to not use a power hungry servo, otherwise you will cause a blackout in the arduino board ;-)
diff --git a/Documentation/changelog.md b/Documentation/changelog.md
deleted file mode 100644
index 393b404..0000000
--- a/Documentation/changelog.md
+++ /dev/null
@@ -1,30 +0,0 @@
-### Version 1.0.3
-* Reduced code size, maybe a lot depending on your configuration.
-* Improved support for Delta, SCARA, and COREXY kinematics.
-* Move parts of Configuration files to `Conditionals.h` and `SanityCheck.h`.
-* Clean up of temperature code.
-* Enhanced `G29` with improved grid bed leveling based on Roxy code. See documentation.
-* Various bugs fixed from 1.0.2.
-* EEPROM layout updated to `V17`.
-* Added `M204` travel acceleration options.
-* `M204` "`P`" parameter replaces "`S`." "`S`" retained for backward compatibility.
-* Support for more RAMPS-based boards.
-* Configurator utility under development.
-* `M404` "`N`" parameter replaced with "`W`." ("`N`" is for line numbers only).
-* Much cleanup of the code.
-* Improved support for Cyrillic and accented languages.
-* LCD controller knob acceleration.
-* Improved compatibility with various sensors, MAX6675 thermocouple.
-* Filament runout sensor support.
-* Filament width measurement support.
-* Support for TMC and L6470 stepper drivers.
-* Better support of G-Code `;` comments, `\`, `N` line numbers, and `*` checksums.
-* Moved GCode handling code into individual functions per-code.
-
-### Version 1.0.2
-* Progress bar for character-based LCD displays.
-
-### Version 1.0.1
-
-### Version 1.0.0
-* Initial release
diff --git a/Marlin/Marlin.h b/Marlin/Marlin.h
index 97978c4..4703dbf 100644
--- a/Marlin/Marlin.h
+++ b/Marlin/Marlin.h
@@ -195,6 +195,8 @@ void manage_inactivity(bool ignore_stepper_queue=false);
  */
 enum AxisEnum {X_AXIS=0, Y_AXIS=1, A_AXIS=0, B_AXIS=1, Z_AXIS=2, E_AXIS=3, X_HEAD=4, Y_HEAD=5};
 
+enum EndstopEnum {X_MIN=0, Y_MIN=1, Z_MIN=2, Z_PROBE=3, X_MAX=4, Y_MAX=5, Z_MAX=6};
+
 void enable_all_steppers();
 void disable_all_steppers();
 
diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index 7b0a7b3..ed57d2b 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -4079,14 +4079,14 @@ inline void gcode_M226() {
 #if NUM_SERVOS > 0
 
   /**
-   * M280: Set servo position absolute. P: servo index, S: angle or microseconds
+   * M280: Get or set servo position. P<index> S<angle>
    */
   inline void gcode_M280() {
-    int servo_index = code_seen('P') ? code_value() : -1;
+    int servo_index = code_seen('P') ? code_value_short() : -1;
     int servo_position = 0;
     if (code_seen('S')) {
-      servo_position = code_value();
-      if ((servo_index >= 0) && (servo_index < NUM_SERVOS)) {
+      servo_position = code_value_short();
+      if (servo_index >= 0 && servo_index < NUM_SERVOS) {
         Servo *srv = &servo[servo_index];
         #if SERVO_LEVELING
           srv->attach(0);
@@ -5655,10 +5655,6 @@ void clamp_to_software_endstops(float target[3]) {
 
 #ifdef MESH_BED_LEVELING
 
-  #if !defined(MIN)
-    #define MIN(_v1, _v2) (((_v1) < (_v2)) ? (_v1) : (_v2))
-  #endif  // ! MIN
-
 // This function is used to split lines on mesh borders so each segment is only part of one mesh area
 void mesh_plan_buffer_line(float x, float y, float z, const float e, float feed_rate, const uint8_t &extruder, uint8_t x_splits=0xff, uint8_t y_splits=0xff)
 {
@@ -5671,10 +5667,10 @@ void mesh_plan_buffer_line(float x, float y, float z, const float e, float feed_
   int piy = mbl.select_y_index(current_position[Y_AXIS]);
   int ix = mbl.select_x_index(x);
   int iy = mbl.select_y_index(y);
-  pix = MIN(pix, MESH_NUM_X_POINTS-2);
-  piy = MIN(piy, MESH_NUM_Y_POINTS-2);
-  ix = MIN(ix, MESH_NUM_X_POINTS-2);
-  iy = MIN(iy, MESH_NUM_Y_POINTS-2);
+  pix = min(pix, MESH_NUM_X_POINTS - 2);
+  piy = min(piy, MESH_NUM_Y_POINTS - 2);
+  ix = min(ix, MESH_NUM_X_POINTS - 2);
+  iy = min(iy, MESH_NUM_Y_POINTS - 2);
   if (pix == ix && piy == iy) {
     // Start and end on same mesh square
     plan_buffer_line(x, y, z, e, feed_rate, extruder);
diff --git a/Marlin/language_fr.h b/Marlin/language_fr.h
index be526a7..9d001a5 100644
--- a/Marlin/language_fr.h
+++ b/Marlin/language_fr.h
@@ -39,16 +39,17 @@
 #define MSG_EXTRUDE                         "Extrusion"
 #define MSG_RETRACT                         "Retraction"
 #define MSG_MOVE_AXIS                       "Deplacer un axe"
-#define MSG_MOVE_X                          "Move X"
-#define MSG_MOVE_Y                          "Move Y"
-#define MSG_MOVE_Z                          "Move Z"
+#define MSG_MOVE_X                          "Depl. X"
+#define MSG_MOVE_Y                          "Depl. Y"
+#define MSG_MOVE_Z                          "Depl. Z"
 #define MSG_MOVE_E                          "Extruder"
-#define MSG_MOVE_01MM                       "Move 0.1mm"
-#define MSG_MOVE_1MM                        "Move 1mm"
-#define MSG_MOVE_10MM                       "Move 10mm"
+#define MSG_MOVE_01MM                       "Depl. 0.1mm"
+#define MSG_MOVE_1MM                        "Depl. 1mm"
+#define MSG_MOVE_10MM                       "Depl. 10mm"
 #define MSG_SPEED                           " Vitesse"
 #define MSG_NOZZLE                          "Buse"
 #define MSG_BED                             "Plateau"
+#define MSG_LEVEL_BED                       "Regl. Niv. Plateau"
 #define MSG_FAN_SPEED                       "Vite. ventilateur"
 #define MSG_FLOW                            "Flux"
 #define MSG_CONTROL                         "Controler"
@@ -102,7 +103,7 @@
 #define MSG_DWELL                           "Repos..."
 #define MSG_USERWAIT                        "Atten. de l'util."
 #define MSG_RESUMING                        "Repri. de l'impr."
-#define MSG_PRINT_ABORTED                   "Print aborted"
+#define MSG_PRINT_ABORTED                   "Impr. Annulee"
 #define MSG_NO_MOVE                         "Aucun mouvement."
 #define MSG_KILLED                          "MORT."
 #define MSG_STOPPED                         "STOPPE."
diff --git a/Marlin/pins.h b/Marlin/pins.h
index e45ba09..0270253 100644
--- a/Marlin/pins.h
+++ b/Marlin/pins.h
@@ -190,6 +190,7 @@
 #endif
 
 #if defined(DISABLE_Z_PROBE_ENDSTOP) || !defined(Z_PROBE_ENDSTOP) // Allow code to compile regardless of Z_PROBE_ENDSTOP setting.
+  #undef Z_PROBE_PIN
   #define Z_PROBE_PIN        -1
 #endif
 
diff --git a/Marlin/pins_OMCA.h b/Marlin/pins_OMCA.h
index 26a7973..91efbd2 100644
--- a/Marlin/pins_OMCA.h
+++ b/Marlin/pins_OMCA.h
@@ -48,9 +48,9 @@
 #define Z_ENABLE_PIN       10
 #define Z_STOP_PIN         2
 
-#define E0_STEP_PIN         24
-#define E0_DIR_PIN          21
-#define E0_ENABLE_PIN       10
+#define E0_STEP_PIN        24
+#define E0_DIR_PIN         21
+#define E0_ENABLE_PIN      10
 
 // future proofing
 #define __FS  20
@@ -58,15 +58,15 @@
 #define __GS  18
 #define __GD  13
 
-#define UNUSED_PWM           14 // PWM on LEFT connector
+#define UNUSED_PWM         14 // PWM on LEFT connector
 
-#define E1_STEP_PIN         -1 // 21
-#define E1_DIR_PIN          -1 // 20
-#define E1_ENABLE_PIN       -1 // 19
+#define E1_STEP_PIN        -1 // 21
+#define E1_DIR_PIN         -1 // 20
+#define E1_ENABLE_PIN      -1 // 19
 
-#define E2_STEP_PIN         -1 // 21
-#define E2_DIR_PIN          -1 // 20
-#define E2_ENABLE_PIN       -1 // 18
+#define E2_STEP_PIN        -1 // 21
+#define E2_DIR_PIN         -1 // 20
+#define E2_ENABLE_PIN      -1 // 18
 
 #define SDPOWER            -1
 #define SDSS               11
@@ -87,5 +87,6 @@
 #define HEATER_BED_PIN      4
 #define TEMP_BED_PIN        2 // 1,2 or I2C
 
-#define I2C_SCL       16
-#define I2C_SDA       17
+#define I2C_SCL            16
+#define I2C_SDA            17
+
diff --git a/Marlin/stepper.cpp b/Marlin/stepper.cpp
index 0c07065..4bc2de8 100644
--- a/Marlin/stepper.cpp
+++ b/Marlin/stepper.cpp
@@ -73,10 +73,7 @@ static unsigned short step_loops_nominal;
 
 volatile long endstops_trigsteps[3] = { 0 };
 volatile long endstops_stepsTotal, endstops_stepsDone;
-static volatile bool endstop_x_hit = false;
-static volatile bool endstop_y_hit = false;
-static volatile bool endstop_z_hit = false;
-static volatile bool endstop_z_probe_hit = false; // Leaving this in even if Z_PROBE_ENDSTOP isn't defined, keeps code below cleaner. #ifdef it and usage below to save space.
+static volatile char endstop_hit_bits = 0; // use X_MIN, Y_MIN, Z_MIN and Z_PROBE as BIT value
 
 #ifdef ABORT_ON_ENDSTOP_HIT_FEATURE_ENABLED
   bool abort_on_endstop_hit = false;
@@ -264,27 +261,27 @@ volatile signed char count_direction[NUM_AXIS] = { 1, 1, 1, 1 };
 #define DISABLE_STEPPER_DRIVER_INTERRUPT() TIMSK1 &= ~BIT(OCIE1A)
 
 void endstops_hit_on_purpose() {
-  endstop_x_hit = endstop_y_hit = endstop_z_hit = endstop_z_probe_hit = false; // #ifdef endstop_z_probe_hit = to save space if needed.
+  endstop_hit_bits = 0;
 }
 
 void checkHitEndstops() {
-  if (endstop_x_hit || endstop_y_hit || endstop_z_hit || endstop_z_probe_hit) { // #ifdef || endstop_z_probe_hit to save space if needed.
+  if (endstop_hit_bits) { // #ifdef || endstop_z_probe_hit to save space if needed.
     SERIAL_ECHO_START;
     SERIAL_ECHOPGM(MSG_ENDSTOPS_HIT);
-    if (endstop_x_hit) {
+    if (endstop_hit_bits & BIT(X_MIN)) {
       SERIAL_ECHOPAIR(" X:", (float)endstops_trigsteps[X_AXIS] / axis_steps_per_unit[X_AXIS]);
       LCD_MESSAGEPGM(MSG_ENDSTOPS_HIT "X");
     }
-    if (endstop_y_hit) {
+    if (endstop_hit_bits & BIT(Y_MIN)) {
       SERIAL_ECHOPAIR(" Y:", (float)endstops_trigsteps[Y_AXIS] / axis_steps_per_unit[Y_AXIS]);
       LCD_MESSAGEPGM(MSG_ENDSTOPS_HIT "Y");
     }
-    if (endstop_z_hit) {
+    if (endstop_hit_bits & BIT(Z_MIN)) {
       SERIAL_ECHOPAIR(" Z:", (float)endstops_trigsteps[Z_AXIS] / axis_steps_per_unit[Z_AXIS]);
       LCD_MESSAGEPGM(MSG_ENDSTOPS_HIT "Z");
     }
     #ifdef Z_PROBE_ENDSTOP
-    if (endstop_z_probe_hit) {
+    if (endstop_hit_bits & BIT(Z_PROBE)) {
       SERIAL_ECHOPAIR(" Z_PROBE:", (float)endstops_trigsteps[Z_AXIS] / axis_steps_per_unit[Z_AXIS]);
       LCD_MESSAGEPGM(MSG_ENDSTOPS_HIT "ZP");
     }
@@ -468,13 +465,14 @@ ISR(TIMER1_COMPA_vect) {
     #define _ENDSTOP_INVERTING(AXIS, MINMAX) AXIS ##_## MINMAX ##_ENDSTOP_INVERTING
     #define _OLD_ENDSTOP(axis, minmax) old_## axis ##_## minmax ##_endstop
     #define _AXIS(AXIS) AXIS ##_AXIS
-    #define _ENDSTOP_HIT(axis) endstop_## axis ##_hit
+    #define _HIT_BIT(AXIS) AXIS ##_MIN
+    #define _ENDSTOP_HIT(AXIS) endstop_hit_bits |= BIT(_HIT_BIT(AXIS))
 
     #define UPDATE_ENDSTOP(axis,AXIS,minmax,MINMAX) \
       bool _ENDSTOP(axis, minmax) = (READ(_ENDSTOP_PIN(AXIS, MINMAX)) != _ENDSTOP_INVERTING(AXIS, MINMAX)); \
       if (_ENDSTOP(axis, minmax) && _OLD_ENDSTOP(axis, minmax) && (current_block->steps[_AXIS(AXIS)] > 0)) { \
         endstops_trigsteps[_AXIS(AXIS)] = count_position[_AXIS(AXIS)]; \
-        _ENDSTOP_HIT(axis) = true; \
+          _ENDSTOP_HIT(AXIS); \
         step_events_completed = current_block->step_event_count; \
       } \
       _OLD_ENDSTOP(axis, minmax) = _ENDSTOP(axis, minmax);
diff --git a/README.md b/README.md
index 9b40193..9791ceb 100644
--- a/README.md
+++ b/README.md
@@ -1,25 +1,7 @@
 # Marlin 3D Printer Firmware
 <img align="right" src="Documentation/Logo/Marlin%20Logo%20GitHub.png" />
 
-  * [Configuration & Compilation](/Documentation/Compilation.md)
-  * Supported
-    * [Features](/Documentation/Features.md)
-    * [Hardware](/Documentation/Hardware.md)
-    * [GCodes](/Documentation/GCodes.md)
-  * Notes
-    * [Auto Bed Leveling](/Documentation/BedLeveling.md)
-    * [Filament Sensor](/Documentation/FilamentSensor.md)
-    * [Ramps Servo Power](/Documentation/RampsServoPower.md)
-    * [LCD Language - Font - System](Documentation/LCDLanguageFont.md)
-    * [Mesh Bed Leveling](/Documentation/MeshBedLeveling.md)
-
-##### [RepRap.org Wiki Page](http://reprap.org/wiki/Marlin)
-
-## Quick Information
-
-This is a firmware for reprap single-processor electronics setups.
-It also works on the Ultimaker PCB. It supports printing from SD card+Folders and look-ahead trajectory planning.
-This firmware is a mashup between [Sprinter](https://github.com/kliment/Sprinter), [grbl](https://github.com/simen/grbl), and many original parts.
+ Documentation has moved to http://www.marlinfirmware.org
 
 ## Current Status: Bug Fixing
 
@@ -28,9 +10,11 @@ The Marlin development is currently revived. There's a long list of reported iss
 [![Coverity Scan Build Status](https://scan.coverity.com/projects/2224/badge.svg)](https://scan.coverity.com/projects/2224)
 [![Travis Build Status](https://travis-ci.org/MarlinFirmware/Marlin.svg)](https://travis-ci.org/MarlinFirmware/Marlin)
 
+##### [RepRap.org Wiki Page](http://reprap.org/wiki/Marlin)
+
 ## Contact
 
-__Google Hangout:__ <a href="https://plus.google.com/hangouts/_/gxn3wrea5gdhoo223yimsiforia" target="_blank">Hangout</a>
+__Google Hangout:__ <a href="https://plus.google.com/hangouts/_/gxn3wrea5gdhoo223yimsiforia" target="_blank">. Hangout</a> We have a hangout every 2 weeks. Search the issue list for "Hangout" and you will see what time and date the next event is going on.
 
 ## Credits
 
@@ -39,10 +23,6 @@ The current Marlin dev team consists of:
  - Scott Lahteine [@thinkyhead]
  - 
 
-## Donation
-
-If you find our work usefull please consider donating. Donations will be used to pay for our website http://www.marlinfirmware.org/ and to pay some food or rent money for the very active Collaborators
-
 More features have been added by:
   - Lampmaker,
   - Bradley Feldman,

