commit bdc26211193f1a087a9bdd84b075eb3dab5a4233 (from 6965bd4e1597ed666b00e81906c3a1587ad6a211)
Merge: 6965bd4 d80aecd
Author: ErikZalm <erik@vdzalm.eu>
Date:   Mon Jul 29 10:38:17 2013 -0700

    Merge pull request #561 from Brendan-csel/Marlin_v1
    
    Fix for Viki LCD issues printing from SD card

diff --git a/Marlin/ultralcd.cpp b/Marlin/ultralcd.cpp
index 163c414..bb98421 100644
--- a/Marlin/ultralcd.cpp
+++ b/Marlin/ultralcd.cpp
@@ -96,6 +96,7 @@ static void menu_action_setting_edit_callback_long5(const char* pstr, unsigned l
     if (encoderPosition > 0x8000) encoderPosition = 0; \
     if (encoderPosition / ENCODER_STEPS_PER_MENU_ITEM < currentMenuViewOffset) currentMenuViewOffset = encoderPosition / ENCODER_STEPS_PER_MENU_ITEM;\
     uint8_t _lineNr = currentMenuViewOffset, _menuItemNr; \
+    bool wasClicked = LCD_CLICKED;\
     for(uint8_t _drawLineNr = 0; _drawLineNr < LCD_HEIGHT; _drawLineNr++, _lineNr++) { \
         _menuItemNr = 0;
 #define MENU_ITEM(type, label, args...) do { \
@@ -108,7 +109,7 @@ static void menu_action_setting_edit_callback_long5(const char* pstr, unsigned l
                 lcd_implementation_drawmenu_ ## type (_drawLineNr, _label_pstr , ## args ); \
             }\
         }\
-        if (LCD_CLICKED && (encoderPosition / ENCODER_STEPS_PER_MENU_ITEM) == _menuItemNr) {\
+        if (wasClicked && (encoderPosition / ENCODER_STEPS_PER_MENU_ITEM) == _menuItemNr) {\
             lcd_quick_feedback(); \
             menu_action_ ## type ( args ); \
             return;\
@@ -694,6 +695,8 @@ static void lcd_sd_updir()
 
 void lcd_sdcard_menu()
 {
+    if (lcdDrawUpdate == 0 && LCD_CLICKED == 0) 
+        return;	// nothing to do (so don't thrash the SD card)
     uint16_t fileCnt = card.getnrfilenames();
     START_MENU();
     MENU_ITEM(back, MSG_MAIN, lcd_main_menu);

commit bdc26211193f1a087a9bdd84b075eb3dab5a4233 (from d80aecda0a8dea4e15c15bb221fe9508cc355a63)
Merge: 6965bd4 d80aecd
Author: ErikZalm <erik@vdzalm.eu>
Date:   Mon Jul 29 10:38:17 2013 -0700

    Merge pull request #561 from Brendan-csel/Marlin_v1
    
    Fix for Viki LCD issues printing from SD card

diff --git a/Marlin/Makefile b/Marlin/Makefile
index a56bc1e..5cc25ea 100644
--- a/Marlin/Makefile
+++ b/Marlin/Makefile
@@ -54,6 +54,9 @@ UPLOAD_PORT        ?= /dev/arduino
 #Directory used to build files in, contains all the build files, from object files to the final hex file.
 BUILD_DIR          ?= applet
 
+# This defines whether Liquid_TWI2 support will be built
+LIQUID_TWI2 ?= 0
+
 ############################################################################
 # Below here nothing should be changed...
 
@@ -199,9 +202,19 @@ VPATH += $(HARDWARE_SRC)
 ifeq ($(HARDWARE_VARIANT), arduino)
 VPATH += $(ARDUINO_INSTALL_DIR)/libraries/LiquidCrystal
 VPATH += $(ARDUINO_INSTALL_DIR)/libraries/SPI
+ifeq ($(LIQUID_TWI2), 1)
+VPATH += $(ARDUINO_INSTALL_DIR)/libraries/Wire
+VPATH += $(ARDUINO_INSTALL_DIR)/libraries/Wire/utility
+VPATH += $(ARDUINO_INSTALL_DIR)/libraries/LiquidTWI2
+endif
 else
 VPATH += $(HARDWARE_DIR)/libraries/LiquidCrystal
 VPATH += $(HARDWARE_DIR)/libraries/SPI
+ifeq ($(LIQUID_TWI2), 1)
+VPATH += $(HARDWARE_DIR)/libraries/Wire
+VPATH += $(HARDWARE_DIR)/libraries/Wire/utility
+VPATH += $(HARDWARE_DIR)/libraries/LiquidTWI2
+endif
 endif
 ifeq ($(HARDWARE_VARIANT), arduino)
 HARDWARE_SUB_VARIANT ?= mega
@@ -218,8 +231,13 @@ CXXSRC = WMath.cpp WString.cpp Print.cpp Marlin_main.cpp	\
 	MarlinSerial.cpp Sd2Card.cpp SdBaseFile.cpp SdFatUtil.cpp	\
 	SdFile.cpp SdVolume.cpp motion_control.cpp planner.cpp		\
 	stepper.cpp temperature.cpp cardreader.cpp ConfigurationStore.cpp \
-	watchdog.cpp
-CXXSRC += LiquidCrystal.cpp ultralcd.cpp SPI.cpp Servo.cpp Tone.cpp
+	watchdog.cpp SPI.cpp Servo.cpp Tone.cpp ultralcd.cpp
+ifeq ($(LIQUID_TWI2), 0)
+CXXSRC += LiquidCrystal.cpp
+else
+SRC += twi.c
+CXXSRC += Wire.cpp LiquidTWI2.cpp
+endif
 
 #Check for Arduino 1.0.0 or higher and use the correct sourcefiles for that version
 ifeq ($(shell [ $(ARDUINO_VERSION) -ge 100 ] && echo true), true)
diff --git a/Marlin/Marlin.h b/Marlin/Marlin.h
index 1ae9494..b92d810 100644
--- a/Marlin/Marlin.h
+++ b/Marlin/Marlin.h
@@ -163,6 +163,7 @@ void ClearToSend();
 void get_coordinates();
 #ifdef DELTA
 void calculate_delta(float cartesian[3]);
+extern float delta[3];
 #endif
 void prepare_move();
 void kill();
diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index 886edca..0079917 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -198,14 +198,15 @@ int EtoPPressure=0;
 	bool powersupply = true;
 #endif
 
+#ifdef DELTA
+float delta[3] = {0.0, 0.0, 0.0};
+#endif
+
 //===========================================================================
 //=============================private variables=============================
 //===========================================================================
 const char axis_codes[NUM_AXIS] = {'X', 'Y', 'Z', 'E'};
 static float destination[NUM_AXIS] = {  0.0, 0.0, 0.0, 0.0};
-#ifdef DELTA
-static float delta[3] = {0.0, 0.0, 0.0};
-#endif
 static float offset[3] = {0.0, 0.0, 0.0};
 static bool home_all_axis = true;
 static float feedrate = 1500.0, next_feedrate, saved_feedrate;
diff --git a/Marlin/language.h b/Marlin/language.h
index 17222c7..39e459f 100644
--- a/Marlin/language.h
+++ b/Marlin/language.h
@@ -373,96 +373,91 @@
 
 #if LANGUAGE_CHOICE == 3
 
-	#define WELCOME_MSG MACHINE_NAME " Pret."
+	#define WELCOME_MSG MACHINE_NAME " prete."
 	#define MSG_SD_INSERTED "Carte inseree"
 	#define MSG_SD_REMOVED "Carte retiree"
-	#define MSG_MAIN " Principal \003"
-	#define MSG_AUTOSTART " Demarrage auto."
-	#define MSG_DISABLE_STEPPERS " Desactiver moteurs"
-	#define MSG_AUTO_HOME " Home auto."
-	#define MSG_SET_ORIGIN " Regler origine"
+	#define MSG_MAIN "Menu principal"
+	#define MSG_AUTOSTART "Demarrage auto"
+	#define MSG_DISABLE_STEPPERS "Arreter moteurs"
+	#define MSG_AUTO_HOME "Home auto."
+	#define MSG_SET_ORIGIN "Regler origine"
 	#define MSG_PREHEAT_PLA " Prechauffage PLA"
 	#define MSG_PREHEAT_PLA_SETTINGS " Regl. prechauffe PLA"
-	#define MSG_PREHEAT_ABS " Prechauffage ABS"
-	#define MSG_PREHEAT_ABS_SETTINGS " Regl. prechauffe ABS"
-	#define MSG_COOLDOWN " Refroidissement"
-	#define MSG_SWITCH_PS_ON "Allumer alimentation"
-	#define MSG_SWITCH_PS_OFF "Eteindre alimentation"
-	#define MSG_EXTRUDE " Extrusion"
-	#define MSG_RETRACT " Retractation"
-	#define MSG_PREHEAT_PLA " Prechauffage PLA"
-	#define MSG_PREHEAT_ABS " Prechauffage ABS"
-	#define MSG_MOVE_AXIS " Deplacer axe \x7E"
-	#define MSG_SPEED " Vitesse:"
-	#define MSG_NOZZLE " \002Buse:"
-	#define MSG_NOZZLE1 " \002Buse2:"
-	#define MSG_NOZZLE2 " \002Buse3:"
-	#define MSG_BED " \002Lit:"
-	#define MSG_FAN_SPEED " Vitesse ventilateur:"
-	#define MSG_FLOW " Flux:"
-	#define MSG_CONTROL " Controle \003"
-	#define MSG_MIN " \002 Min:"
-	#define MSG_MAX " \002 Max:"
-	#define MSG_FACTOR " \002 Facteur:"
-	#define MSG_AUTOTEMP " Temp. Auto.:"
+	#define MSG_PREHEAT_ABS "Prechauffage ABS"
+	#define MSG_PREHEAT_ABS_SETTINGS "Regl. prechauffe ABS"
+	#define MSG_COOLDOWN "Refroidir"
+	#define MSG_SWITCH_PS_ON "Allumer alim."
+	#define MSG_SWITCH_PS_OFF "Eteindre alim."
+	#define MSG_EXTRUDE "Extrusion"
+	#define MSG_RETRACT "Retraction"
+	#define MSG_PREHEAT_PLA "Prechauffage PLA"
+	#define MSG_PREHEAT_ABS "Prechauffage ABS"
+	#define MSG_MOVE_AXIS "Deplacer un axe"
+	#define MSG_SPEED " Vitesse"
+	#define MSG_NOZZLE "Buse"
+	#define MSG_NOZZLE1 "Buse2"
+	#define MSG_NOZZLE2 "Buse3"
+	#define MSG_BED "Plateau"
+	#define MSG_FAN_SPEED "Vitesse ventilateur"
+	#define MSG_FLOW "Flux"
+	#define MSG_CONTROL "Controler"
+	#define MSG_MIN " \002 Min"
+	#define MSG_MAX " \002 Max"
+	#define MSG_FACTOR " \002 Facteur"
+	#define MSG_AUTOTEMP "Temp. Auto."
 	#define MSG_ON "Marche "
 	#define MSG_OFF "Arret"
-	#define MSG_PID_P " PID-P: "
-	#define MSG_PID_I " PID-I: "
-	#define MSG_PID_D " PID-D: "
-	#define MSG_PID_C " PID-C: "
-	#define MSG_ACC " Acc:"
+	#define MSG_PID_P "PID-P"
+	#define MSG_PID_I "PID-I"
+	#define MSG_PID_D "PID-D"
+	#define MSG_PID_C "PID-C"
+	#define MSG_ACC "Accel"
 	#define MSG_VXY_JERK "Vxy-jerk"
 	#define MSG_VZ_JERK "Vz-jerk"
 	#define MSG_VE_JERK "Ve-jerk"
-	#define MSG_VMAX " Vmax "
-	#define MSG_X "x:"
-	#define MSG_Y "y:"
-	#define MSG_Z "z:"
-	#define MSG_E "e:"
-	#define MSG_VMIN " Vmin:"
-	#define MSG_VTRAV_MIN " Vdepl min:"
-	#define MSG_AMAX " Amax "
-	#define MSG_A_RETRACT " A-retract:"
-	#define MSG_XSTEPS " Xpas/mm:"
-	#define MSG_YSTEPS " Ypas/mm:"
-	#define MSG_ZSTEPS " Zpas/mm:"
-	#define MSG_ESTEPS " Epas/mm:"
-	#define MSG_MAIN_WIDE " Principal \003"
-	#define MSG_RECTRACT "Rectracter"
+	#define MSG_VMAX "Vmax"
+	#define MSG_X "x"
+	#define MSG_Y "y"
+	#define MSG_Z "z"
+	#define MSG_E "e"
+	#define MSG_VMIN "Vmin"
+	#define MSG_VTRAV_MIN "Vdepl min"
+	#define MSG_AMAX "Amax "
+	#define MSG_A_RETRACT "A-retract"
+	#define MSG_XSTEPS "Xpas/mm"
+	#define MSG_YSTEPS "Ypas/mm"
+	#define MSG_ZSTEPS "Zpas/mm"
+	#define MSG_ESTEPS "Epas/mm"
 	#define MSG_TEMPERATURE "Temperature"
 	#define MSG_MOTION "Mouvement"
-	#define MSG_CONTRAST "LCD contrast"
-	#define MSG_STORE_EPROM " Sauvegarder memoire"
-	#define MSG_LOAD_EPROM " Lire memoire"
-	#define MSG_RESTORE_FAILSAFE " Restaurer memoire"
-	#define MSG_REFRESH "\004Actualiser"
-	#define MSG_WATCH " Surveiller \003"
-	#define MSG_PREPARE " Preparer \x7E"
-	#define MSG_PREPARE_ALT " Prepare \003"
-	#define MSG_CONTROL_ARROW " Controle \x7E"
-	#define MSG_RETRACT_ARROW " Retracter \x7E"
-	#define MSG_TUNE " Regler \x7E"
-	#define MSG_PAUSE_PRINT " Pause impression \x7E"
-	#define MSG_RESUME_PRINT " Reprendre impression \x7E"
-	#define MSG_STOP_PRINT " Arreter impression \x7E"
-	#define MSG_CARD_MENU " Menu carte \x7E"
-	#define MSG_NO_CARD " Pas de carte"
+	#define MSG_CONTRAST "Contraste LCD"
+	#define MSG_STORE_EPROM "Sauver config"
+	#define MSG_LOAD_EPROM "Lire config"
+	#define MSG_RESTORE_FAILSAFE "Restaurer defauts"
+	#define MSG_REFRESH "Actualiser"
+	#define MSG_WATCH "Surveiller"
+	#define MSG_PREPARE "Preparer"
+	#define MSG_TUNE "Regler"
+	#define MSG_PAUSE_PRINT "Interrompre impr."
+	#define MSG_RESUME_PRINT "Reprendre impr."
+	#define MSG_STOP_PRINT "Arreter impr."
+	#define MSG_CARD_MENU "Impr. depuis SD"
+	#define MSG_NO_CARD "Pas de carte"
 	#define MSG_DWELL "Repos..."
 	#define MSG_USERWAIT "Attente de l'utilisateur..."
 	#define MSG_RESUMING "Reprise de l'impression"
 	#define MSG_NO_MOVE "Aucun mouvement."
 	#define MSG_PART_RELEASE "Relache partielle"
-	#define MSG_KILLED "TUE."
+	#define MSG_KILLED "MORT."
 	#define MSG_STOPPED "STOPPE."
 	#define MSG_STEPPER_RELEASED "RELACHE."
-	#define MSG_CONTROL_RETRACT " Retractation mm:"
-	#define MSG_CONTROL_RETRACTF " Retractation F:"
-	#define MSG_CONTROL_RETRACT_ZLIFT " Hop mm:"
-	#define MSG_CONTROL_RETRACT_RECOVER " UnRet +mm:"
-	#define MSG_CONTROL_RETRACT_RECOVERF " UnRet F:"
-	#define MSG_AUTORETRACT " Retract. Auto.:"
-	#define MSG_FILAMENTCHANGE "Change filament"
+	#define MSG_CONTROL_RETRACT "Retraction mm"
+	#define MSG_CONTROL_RETRACTF "Retraction F"
+	#define MSG_CONTROL_RETRACT_ZLIFT "Hop mm"
+	#define MSG_CONTROL_RETRACT_RECOVER "UnRet +mm"
+	#define MSG_CONTROL_RETRACT_RECOVERF "UnRet F"
+	#define MSG_AUTORETRACT "Retract. Auto."
+	#define MSG_FILAMENTCHANGE "Changer filament"
 	#define MSG_INIT_SDCARD "Init. la carte SD"	
 	#define MSG_CNG_SDCARD "Changer de carte SD"
 
diff --git a/Marlin/pins.h b/Marlin/pins.h
index 6023580..4e53d07 100644
--- a/Marlin/pins.h
+++ b/Marlin/pins.h
@@ -485,6 +485,14 @@
         #define BTN_ENC 35
 
         #define SDCARDDETECT 49
+      #elif defined(LCD_I2C_PANELOLU2)
+        #define BTN_EN1 47  //reverse if the encoder turns the wrong way.
+        #define BTN_EN2 43
+        #define BTN_ENC 32
+        #define SDSS 53
+        #define SDCARDDETECT -1
+        #define KILL_PIN 41
+        #define FAN_PIN 45
       #else
         //arduino pin which triggers an piezzo beeper
         #define BEEPER 33  // Beeper on AUX-4
diff --git a/Marlin/ultralcd.cpp b/Marlin/ultralcd.cpp
index f2c4057..bb98421 100644
--- a/Marlin/ultralcd.cpp
+++ b/Marlin/ultralcd.cpp
@@ -375,7 +375,12 @@ static void lcd_move_x()
         if (max_software_endstops && current_position[X_AXIS] > X_MAX_POS)
             current_position[X_AXIS] = X_MAX_POS;
         encoderPosition = 0;
+        #ifdef DELTA
+        calculate_delta(current_position);
+        plan_buffer_line(delta[X_AXIS], delta[Y_AXIS], delta[Z_AXIS], current_position[E_AXIS], 600, active_extruder);
+        #else
         plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], 600, active_extruder);
+        #endif
         lcdDrawUpdate = 1;
     }
     if (lcdDrawUpdate)
@@ -399,7 +404,12 @@ static void lcd_move_y()
         if (max_software_endstops && current_position[Y_AXIS] > Y_MAX_POS)
             current_position[Y_AXIS] = Y_MAX_POS;
         encoderPosition = 0;
+        #ifdef DELTA
+        calculate_delta(current_position);
+        plan_buffer_line(delta[X_AXIS], delta[Y_AXIS], delta[Z_AXIS], current_position[E_AXIS], 600, active_extruder);
+        #else
         plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], 600, active_extruder);
+        #endif
         lcdDrawUpdate = 1;
     }
     if (lcdDrawUpdate)
@@ -423,7 +433,12 @@ static void lcd_move_z()
         if (max_software_endstops && current_position[Z_AXIS] > Z_MAX_POS)
             current_position[Z_AXIS] = Z_MAX_POS;
         encoderPosition = 0;
+        #ifdef DELTA
+        calculate_delta(current_position);
+        plan_buffer_line(delta[X_AXIS], delta[Y_AXIS], delta[Z_AXIS], current_position[E_AXIS], homing_feedrate[Z_AXIS]/60, active_extruder);
+        #else
         plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], homing_feedrate[Z_AXIS]/60, active_extruder);
+        #endif
         lcdDrawUpdate = 1;
     }
     if (lcdDrawUpdate)
@@ -443,7 +458,12 @@ static void lcd_move_e()
     {
         current_position[E_AXIS] += float((int)encoderPosition) * move_menu_scale;
         encoderPosition = 0;
+        #ifdef DELTA
+        calculate_delta(current_position);
+        plan_buffer_line(delta[X_AXIS], delta[Y_AXIS], delta[Z_AXIS], current_position[E_AXIS], 20, active_extruder);
+        #else
         plan_buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], 20, active_extruder);
+        #endif
         lcdDrawUpdate = 1;
     }
     if (lcdDrawUpdate)

