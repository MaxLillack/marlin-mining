commit c55b7d07507d9ae54719e4a70f40aca8e47d684d (from 42eebcd5185742818ad516d24d473790c87cccba)
Merge: 42eebcd 4f2ff46
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 25 15:58:42 2016 -0700

    Merge pull request #4405 from thinkyhead/rc_theres_always_something
    
    Move HAS_DIGIPOTSS to Conditionals.h

diff --git a/Marlin/Conditionals.h b/Marlin/Conditionals.h
index 3a9ace9..9ab609a 100644
--- a/Marlin/Conditionals.h
+++ b/Marlin/Conditionals.h
@@ -746,6 +746,7 @@
   #define HAS_E2_STEP (PIN_EXISTS(E2_STEP))
   #define HAS_E3_STEP (PIN_EXISTS(E3_STEP))
   #define HAS_E4_STEP (PIN_EXISTS(E4_STEP))
+  #define HAS_DIGIPOTSS (PIN_EXISTS(DIGIPOTSS))
 
   #define HAS_MOTOR_CURRENT_PWM (PIN_EXISTS(MOTOR_CURRENT_PWM_XY) || PIN_EXISTS(MOTOR_CURRENT_PWM_Z) || PIN_EXISTS(MOTOR_CURRENT_PWM_E))
 
diff --git a/Marlin/pins.h b/Marlin/pins.h
index cc18289..141c835 100644
--- a/Marlin/pins.h
+++ b/Marlin/pins.h
@@ -432,6 +432,4 @@
     X_MS1_PIN, X_MS2_PIN, Y_MS1_PIN, Y_MS2_PIN, Z_MS1_PIN, Z_MS2_PIN \
   }
 
-#define HAS_DIGIPOTSS (PIN_EXISTS(DIGIPOTSS))
-
 #endif //__PINS_H

commit c55b7d07507d9ae54719e4a70f40aca8e47d684d (from 4f2ff46ab91974b564dd74d7315bae6c75fa9d67)
Merge: 42eebcd 4f2ff46
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Mon Jul 25 15:58:42 2016 -0700

    Merge pull request #4405 from thinkyhead/rc_theres_always_something
    
    Move HAS_DIGIPOTSS to Conditionals.h

diff --git a/Marlin/Conditionals.h b/Marlin/Conditionals.h
index 76c1fe3..9ab609a 100644
--- a/Marlin/Conditionals.h
+++ b/Marlin/Conditionals.h
@@ -118,7 +118,11 @@
     #define REPRAP_DISCOUNT_SMART_CONTROLLER
   #endif
 
-  #if ENABLED(ULTIMAKERCONTROLLER) || ENABLED(REPRAP_DISCOUNT_SMART_CONTROLLER) || ENABLED(G3D_PANEL) || ENABLED(RIGIDBOT_PANEL) || ENABLED(REPRAPWORLD_KEYPAD)
+  #if ENABLED(ULTIMAKERCONTROLLER)              \
+   || ENABLED(REPRAP_DISCOUNT_SMART_CONTROLLER) \
+   || ENABLED(G3D_PANEL)                        \
+   || ENABLED(RIGIDBOT_PANEL)                   \
+   || ENABLED(REPRAPWORLD_KEYPAD)
     #define ULTIPANEL
     #define NEWPANEL
   #endif
@@ -130,6 +134,13 @@
     #define NEWPANEL
   #endif
 
+  #if ENABLED(REPRAPWORLD_GRAPHICAL_LCD)
+    #define DOGLCD
+    #define U8GLIB_ST7920
+    #define ULTIPANEL
+    #define NEWPANEL
+  #endif
+
   /**
    * I2C PANELS
    */
diff --git a/Marlin/Configuration.h b/Marlin/Configuration.h
index f810fcd..1ab5edd 100644
--- a/Marlin/Configuration.h
+++ b/Marlin/Configuration.h
@@ -1119,6 +1119,12 @@
 //#define MAKRPANEL
 
 //
+// ReprapWorld Graphical LCD
+// https://reprapworld.com/?products_details&products_id/1218
+//
+//#define REPRAPWORLD_GRAPHICAL_LCD
+
+//
 // Activate one of these if you have a Panucatt Devices
 // Viki 2.0 or mini Viki with Graphic LCD
 // http://panucatt.com
diff --git a/Marlin/Configuration_adv.h b/Marlin/Configuration_adv.h
index c8d6577..fde6524 100644
--- a/Marlin/Configuration_adv.h
+++ b/Marlin/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/Cartesio/Configuration_adv.h b/Marlin/example_configurations/Cartesio/Configuration_adv.h
index 86a1479..4229d54 100644
--- a/Marlin/example_configurations/Cartesio/Configuration_adv.h
+++ b/Marlin/example_configurations/Cartesio/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/Felix/Configuration_adv.h b/Marlin/example_configurations/Felix/Configuration_adv.h
index d4eed80..bc9b589 100644
--- a/Marlin/example_configurations/Felix/Configuration_adv.h
+++ b/Marlin/example_configurations/Felix/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/Hephestos/Configuration_adv.h b/Marlin/example_configurations/Hephestos/Configuration_adv.h
index 6dc51d6..bd6f99e 100644
--- a/Marlin/example_configurations/Hephestos/Configuration_adv.h
+++ b/Marlin/example_configurations/Hephestos/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/Hephestos_2/Configuration_adv.h b/Marlin/example_configurations/Hephestos_2/Configuration_adv.h
index 501541b..6d017cd 100644
--- a/Marlin/example_configurations/Hephestos_2/Configuration_adv.h
+++ b/Marlin/example_configurations/Hephestos_2/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/K8200/Configuration_adv.h b/Marlin/example_configurations/K8200/Configuration_adv.h
index a822c9b..45c8cfb 100644
--- a/Marlin/example_configurations/K8200/Configuration_adv.h
+++ b/Marlin/example_configurations/K8200/Configuration_adv.h
@@ -565,10 +565,13 @@ const unsigned int dropsegments = 2; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/K8400/Configuration_adv.h b/Marlin/example_configurations/K8400/Configuration_adv.h
index 8b0fd6d..4cb3565 100644
--- a/Marlin/example_configurations/K8400/Configuration_adv.h
+++ b/Marlin/example_configurations/K8400/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 26
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/RigidBot/Configuration_adv.h b/Marlin/example_configurations/RigidBot/Configuration_adv.h
index c2fcf92..686a9d5 100644
--- a/Marlin/example_configurations/RigidBot/Configuration_adv.h
+++ b/Marlin/example_configurations/RigidBot/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 8
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/SCARA/Configuration_adv.h b/Marlin/example_configurations/SCARA/Configuration_adv.h
index 42045d7..e6f63af 100644
--- a/Marlin/example_configurations/SCARA/Configuration_adv.h
+++ b/Marlin/example_configurations/SCARA/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/TAZ4/Configuration_adv.h b/Marlin/example_configurations/TAZ4/Configuration_adv.h
index 9a7dcf6..93c0418 100644
--- a/Marlin/example_configurations/TAZ4/Configuration_adv.h
+++ b/Marlin/example_configurations/TAZ4/Configuration_adv.h
@@ -567,10 +567,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/WITBOX/Configuration_adv.h b/Marlin/example_configurations/WITBOX/Configuration_adv.h
index 6dc51d6..bd6f99e 100644
--- a/Marlin/example_configurations/WITBOX/Configuration_adv.h
+++ b/Marlin/example_configurations/WITBOX/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h b/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h
index 9dc856b..91b4ac3 100644
--- a/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/biv2.5/Configuration_adv.h
@@ -561,10 +561,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/delta/generic/Configuration_adv.h b/Marlin/example_configurations/delta/generic/Configuration_adv.h
index 66877a6..5995579 100644
--- a/Marlin/example_configurations/delta/generic/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/generic/Configuration_adv.h
@@ -561,10 +561,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h b/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h
index 24cf11f..a297459 100644
--- a/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/kossel_mini/Configuration_adv.h
@@ -560,10 +560,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/delta/kossel_pro/Configuration_adv.h b/Marlin/example_configurations/delta/kossel_pro/Configuration_adv.h
index 6ee22d8..534779c 100644
--- a/Marlin/example_configurations/delta/kossel_pro/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/kossel_pro/Configuration_adv.h
@@ -565,10 +565,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/delta/kossel_xl/Configuration_adv.h b/Marlin/example_configurations/delta/kossel_xl/Configuration_adv.h
index bd55770..38a0542 100644
--- a/Marlin/example_configurations/delta/kossel_xl/Configuration_adv.h
+++ b/Marlin/example_configurations/delta/kossel_xl/Configuration_adv.h
@@ -561,10 +561,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/makibox/Configuration_adv.h b/Marlin/example_configurations/makibox/Configuration_adv.h
index 9413d9b..0c5b2da 100644
--- a/Marlin/example_configurations/makibox/Configuration_adv.h
+++ b/Marlin/example_configurations/makibox/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h b/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h
index 752c24f..28269ec 100644
--- a/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h
+++ b/Marlin/example_configurations/tvrrug/Round2/Configuration_adv.h
@@ -559,10 +559,13 @@ const unsigned int dropsegments = 5; //everything with less than this number of
 #define MAX_CMD_SIZE 96
 #define BUFSIZE 4
 
-// Set Transfer-Buffer-Size by uncommenting the next define. Default size is 32byte.
-// :[0,2,4,8,16,32,64,128,256]. To save 386byte of PROGMEM and (3 + TX_BUFFER_SIZE) bytes of RAM set TX_BUFFER_SIZE to 0
-// To buffer a simple "ok" you need 4 byte, for ADVANCED_OK/M105 you need 32 and for debug-echo: 128 byte to get the optimal speed.
-// Any other output does not need to be that speedy.
+// Transfer Buffer Size
+// To save 386 bytes of PROGMEM (and TX_BUFFER_SIZE+3 bytes of RAM) set to 0.
+// To buffer a simple "ok" you need 4 bytes.
+// For ADVANCED_OK (M105) you need 32 bytes.
+// For debug-echo: 128 bytes for the optimal speed.
+// Other output doesn't need to be that speedy.
+// :[0,2,4,8,16,32,64,128,256]
 #define TX_BUFFER_SIZE 0
 
 // Enable an emergency-command parser to intercept certain commands as they
diff --git a/Marlin/pins_MEGATRONICS_3.h b/Marlin/pins_MEGATRONICS_3.h
index 47ec176..9359978 100644
--- a/Marlin/pins_MEGATRONICS_3.h
+++ b/Marlin/pins_MEGATRONICS_3.h
@@ -106,24 +106,38 @@
 
 #define BEEPER_PIN 61
 
-#define LCD_PINS_RS 32
-#define LCD_PINS_ENABLE 31
-#define LCD_PINS_D4 14
-#define LCD_PINS_D5 30
-#define LCD_PINS_D6 39
-#define LCD_PINS_D7 15
-
-#define SHIFT_CLK 43
-#define SHIFT_LD 35
-#define SHIFT_OUT 34
-#define SHIFT_EN 44
+#if ENABLED(DOGLCD)
+
+  #if ENABLED(U8GLIB_ST7920)
+    #define LCD_PINS_RS     56 //CS chip select /SS chip slave select
+    #define LCD_PINS_ENABLE 51 //SID (MOSI)
+    #define LCD_PINS_D4     52 //SCK (CLK) clock
+    #define SD_DETECT_PIN 35
+  #endif
+
+#else
+
+  #define LCD_PINS_RS 32
+  #define LCD_PINS_ENABLE 31
+  #define LCD_PINS_D4 14
+  #define LCD_PINS_D5 30
+  #define LCD_PINS_D6 39
+  #define LCD_PINS_D7 15
+  
+  #define SHIFT_CLK 43
+  #define SHIFT_LD 35
+  #define SHIFT_OUT 34
+  #define SHIFT_EN 44
+
+  #define SD_DETECT_PIN 56 // Megatronics v3.1 only
+
+#endif
 
 // Buttons are directly attached using keypad
 #define BTN_EN1 44
 #define BTN_EN2 45
-#define BTN_ENC 33 // the click
+#define BTN_ENC 33
 
 #define BLEN_C 2
 #define BLEN_B 1
 #define BLEN_A 0
-
diff --git a/Marlin/pins_MINITRONICS.h b/Marlin/pins_MINITRONICS.h
index 0c80ced..db68c97 100644
--- a/Marlin/pins_MINITRONICS.h
+++ b/Marlin/pins_MINITRONICS.h
@@ -76,19 +76,38 @@
 
 #define BEEPER_PIN -1
 
-#define LCD_PINS_RS -1
-#define LCD_PINS_ENABLE -1
-#define LCD_PINS_D4 -1
-#define LCD_PINS_D5 -1
-#define LCD_PINS_D6 -1
-#define LCD_PINS_D7 -1
-
-// Buttons are directly attached using keypad
-#define BTN_EN1 -1
-#define BTN_EN2 -1
-#define BTN_ENC -1 // the click
-
-#define BLEN_C 2
-#define BLEN_B 1
-#define BLEN_A 0
+#if ENABLED(DOGLCD)
 
+  #if ENABLED(U8GLIB_ST7920)
+    #define LCD_PINS_RS     15 //CS chip select /SS chip slave select
+    #define LCD_PINS_ENABLE 11 //SID (MOSI)
+    #define LCD_PINS_D4     10 //SCK (CLK) clock     
+
+    #define BTN_EN1 18
+    #define BTN_EN2 17
+    #define BTN_ENC 25
+
+    #define SD_DETECT_PIN 30
+  #endif
+
+#else
+
+  #define LCD_PINS_RS -1
+  #define LCD_PINS_ENABLE -1
+  #define LCD_PINS_D4 -1
+  #define LCD_PINS_D5 -1
+  #define LCD_PINS_D6 -1
+  #define LCD_PINS_D7 -1
+
+  // Buttons are directly attached using keypad
+  #define BTN_EN1 -1
+  #define BTN_EN2 -1
+  #define BTN_ENC -1
+
+  #define BLEN_C 2
+  #define BLEN_B 1
+  #define BLEN_A 0
+
+  #define SD_DETECT_PIN -1  // Minitronics doesn't use this
+
+#endif
diff --git a/Marlin/pins_RAMPS_14.h b/Marlin/pins_RAMPS_14.h
index c51a8d0..ef96f59 100644
--- a/Marlin/pins_RAMPS_14.h
+++ b/Marlin/pins_RAMPS_14.h
@@ -141,7 +141,11 @@
 
 #if ENABLED(ULTRA_LCD)
 
-  #if ENABLED(NEWPANEL) && ENABLED(PANEL_ONE)
+  #if ENABLED(REPRAPWORLD_GRAPHICAL_LCD)
+    #define LCD_PINS_RS     49 //CS chip select /SS chip slave select
+    #define LCD_PINS_ENABLE 51 //SID (MOSI)
+    #define LCD_PINS_D4     52 //SCK (CLK) clock
+  #elif ENABLED(NEWPANEL) && ENABLED(PANEL_ONE)
     #define LCD_PINS_RS 40
     #define LCD_PINS_ENABLE 42
     #define LCD_PINS_D4 65
@@ -182,6 +186,11 @@
         #define LCD_PIN_BL 39
       #endif
 
+    #elif ENABLED(REPRAPWORLD_GRAPHICAL_LCD)
+      #define BTN_EN1 64
+      #define BTN_EN2 59
+      #define BTN_ENC 63
+      #define SD_DETECT_PIN 42
     #elif ENABLED(LCD_I2C_PANELOLU2)
       #define BTN_EN1 47  // reverse if the encoder turns the wrong way.
       #define BTN_EN2 43
diff --git a/Marlin/stepper_indirection.cpp b/Marlin/stepper_indirection.cpp
index 0ede056..d7d627a 100644
--- a/Marlin/stepper_indirection.cpp
+++ b/Marlin/stepper_indirection.cpp
@@ -42,6 +42,7 @@
 */
 
 #include "stepper_indirection.h"
+
 #include "Configuration.h"
 
 #if ENABLED(HAVE_TMCDRIVER)
diff --git a/Marlin/stepper_indirection.h b/Marlin/stepper_indirection.h
index 4052e39..6326663 100644
--- a/Marlin/stepper_indirection.h
+++ b/Marlin/stepper_indirection.h
@@ -44,144 +44,311 @@
 #ifndef STEPPER_INDIRECTION_H
 #define STEPPER_INDIRECTION_H
 
-#include "macros.h"
+#include "Configuration.h"
 
-// X motor
+// TMC26X drivers have STEP/DIR on normal pins, but ENABLE via SPI
+#if ENABLED(HAVE_TMCDRIVER)
+  #include <SPI.h>
+  #include <TMC26XStepper.h>
+  void tmc_init();
+#endif
+
+// L6470 has STEP on normal pins, but DIR/ENABLE via SPI
+#if ENABLED(HAVE_L6470DRIVER)
+  #include <SPI.h>
+  #include <L6470.h>
+  void L6470_init();
+#endif
+
+// X Stepper
+#if ENABLED(HAVE_L6470DRIVER) && ENABLED(X_IS_L6470)
+  extern L6470 stepperX;
+  #define X_ENABLE_INIT NOOP
+  #define X_ENABLE_WRITE(STATE) do{if(STATE) stepperX.Step_Clock(stepperX.getStatus() & STATUS_HIZ); else stepperX.softFree();}while(0)
+  #define X_ENABLE_READ (stepperX.getStatus() & STATUS_HIZ)
+  #define X_DIR_INIT NOOP
+  #define X_DIR_WRITE(STATE) stepperX.Step_Clock(STATE)
+  #define X_DIR_READ (stepperX.getStatus() & STATUS_DIR)
+#else
+  #if ENABLED(HAVE_TMCDRIVER) && ENABLED(X_IS_TMC)
+    extern TMC26XStepper stepperX;
+    #define X_ENABLE_INIT NOOP
+    #define X_ENABLE_WRITE(STATE) stepperX.setEnabled(STATE)
+    #define X_ENABLE_READ stepperX.isEnabled()
+  #else
+    #define X_ENABLE_INIT SET_OUTPUT(X_ENABLE_PIN)
+    #define X_ENABLE_WRITE(STATE) WRITE(X_ENABLE_PIN,STATE)
+    #define X_ENABLE_READ READ(X_ENABLE_PIN)
+  #endif
+  #define X_DIR_INIT SET_OUTPUT(X_DIR_PIN)
+  #define X_DIR_WRITE(STATE) WRITE(X_DIR_PIN,STATE)
+  #define X_DIR_READ READ(X_DIR_PIN)
+#endif
 #define X_STEP_INIT SET_OUTPUT(X_STEP_PIN)
 #define X_STEP_WRITE(STATE) WRITE(X_STEP_PIN,STATE)
 #define X_STEP_READ READ(X_STEP_PIN)
 
-#define X_DIR_INIT SET_OUTPUT(X_DIR_PIN)
-#define X_DIR_WRITE(STATE) WRITE(X_DIR_PIN,STATE)
-#define X_DIR_READ READ(X_DIR_PIN)
+// Y Stepper
+#if ENABLED(HAVE_L6470DRIVER) && ENABLED(Y_IS_L6470)
+  extern L6470 stepperY;
+  #define Y_ENABLE_INIT NOOP
+  #define Y_ENABLE_WRITE(STATE) do{if(STATE) stepperY.Step_Clock(stepperY.getStatus() & STATUS_HIZ); else stepperY.softFree();}while(0)
+  #define Y_ENABLE_READ (stepperY.getStatus() & STATUS_HIZ)
+  #define Y_DIR_INIT NOOP
+  #define Y_DIR_WRITE(STATE) stepperY.Step_Clock(STATE)
+  #define Y_DIR_READ (stepperY.getStatus() & STATUS_DIR)
+#else
+  #if ENABLED(HAVE_TMCDRIVER) && ENABLED(Y_IS_TMC)
+    extern TMC26XStepper stepperY;
+    #define Y_ENABLE_INIT NOOP
+    #define Y_ENABLE_WRITE(STATE) stepperY.setEnabled(STATE)
+    #define Y_ENABLE_READ stepperY.isEnabled()
+  #else
+    #define Y_ENABLE_INIT SET_OUTPUT(Y_ENABLE_PIN)
+    #define Y_ENABLE_WRITE(STATE) WRITE(Y_ENABLE_PIN,STATE)
+    #define Y_ENABLE_READ READ(Y_ENABLE_PIN)
+  #endif
+  #define Y_DIR_INIT SET_OUTPUT(Y_DIR_PIN)
+  #define Y_DIR_WRITE(STATE) WRITE(Y_DIR_PIN,STATE)
+  #define Y_DIR_READ READ(Y_DIR_PIN)
+#endif
+#define Y_STEP_INIT SET_OUTPUT(Y_STEP_PIN)
+#define Y_STEP_WRITE(STATE) WRITE(Y_STEP_PIN,STATE)
+#define Y_STEP_READ READ(Y_STEP_PIN)
 
-#define X_ENABLE_INIT SET_OUTPUT(X_ENABLE_PIN)
-#define X_ENABLE_WRITE(STATE) WRITE(X_ENABLE_PIN,STATE)
-#define X_ENABLE_READ READ(X_ENABLE_PIN)
+// Z Stepper
+#if ENABLED(HAVE_L6470DRIVER) && ENABLED(Z_IS_L6470)
+  extern L6470 stepperZ;
+  #define Z_ENABLE_INIT NOOP
+  #define Z_ENABLE_WRITE(STATE) do{if(STATE) stepperZ.Step_Clock(stepperZ.getStatus() & STATUS_HIZ); else stepperZ.softFree();}while(0)
+  #define Z_ENABLE_READ (stepperZ.getStatus() & STATUS_HIZ)
+  #define Z_DIR_INIT NOOP
+  #define Z_DIR_WRITE(STATE) stepperZ.Step_Clock(STATE)
+  #define Z_DIR_READ (stepperZ.getStatus() & STATUS_DIR)
+#else
+  #if ENABLED(HAVE_TMCDRIVER) && ENABLED(Z_IS_TMC)
+    extern TMC26XStepper stepperZ;
+    #define Z_ENABLE_INIT NOOP
+    #define Z_ENABLE_WRITE(STATE) stepperZ.setEnabled(STATE)
+    #define Z_ENABLE_READ stepperZ.isEnabled()
+  #else
+    #define Z_ENABLE_INIT SET_OUTPUT(Z_ENABLE_PIN)
+    #define Z_ENABLE_WRITE(STATE) WRITE(Z_ENABLE_PIN,STATE)
+    #define Z_ENABLE_READ READ(Z_ENABLE_PIN)
+  #endif
+  #define Z_DIR_INIT SET_OUTPUT(Z_DIR_PIN)
+  #define Z_DIR_WRITE(STATE) WRITE(Z_DIR_PIN,STATE)
+  #define Z_DIR_READ READ(Z_DIR_PIN)
+#endif
+#define Z_STEP_INIT SET_OUTPUT(Z_STEP_PIN)
+#define Z_STEP_WRITE(STATE) WRITE(Z_STEP_PIN,STATE)
+#define Z_STEP_READ READ(Z_STEP_PIN)
 
-// X2 motor
+// X2 Stepper
 #if HAS_X2_ENABLE
+  #if ENABLED(HAVE_L6470DRIVER) && ENABLED(X2_IS_L6470)
+    extern L6470 stepperX2;
+    #define X2_ENABLE_INIT NOOP
+    #define X2_ENABLE_WRITE(STATE) do{if(STATE) stepperX2.Step_Clock(stepperX2.getStatus() & STATUS_HIZ); else stepperX2.softFree();}while(0)
+    #define X2_ENABLE_READ (stepperX2.getStatus() & STATUS_HIZ)
+    #define X2_DIR_INIT NOOP
+    #define X2_DIR_WRITE(STATE) stepperX2.Step_Clock(STATE)
+    #define X2_DIR_READ (stepperX2.getStatus() & STATUS_DIR)
+  #else
+    #if ENABLED(HAVE_TMCDRIVER) && ENABLED(X2_IS_TMC)
+      extern TMC26XStepper stepperX2;
+      #define X2_ENABLE_INIT NOOP
+      #define X2_ENABLE_WRITE(STATE) stepperX2.setEnabled(STATE)
+      #define X2_ENABLE_READ stepperX2.isEnabled()
+    #else
+      #define X2_ENABLE_INIT SET_OUTPUT(X2_ENABLE_PIN)
+      #define X2_ENABLE_WRITE(STATE) WRITE(X2_ENABLE_PIN,STATE)
+      #define X2_ENABLE_READ READ(X2_ENABLE_PIN)
+    #endif
+    #define X2_DIR_INIT SET_OUTPUT(X2_DIR_PIN)
+    #define X2_DIR_WRITE(STATE) WRITE(X2_DIR_PIN,STATE)
+    #define X2_DIR_READ READ(X2_DIR_PIN)
+  #endif
   #define X2_STEP_INIT SET_OUTPUT(X2_STEP_PIN)
   #define X2_STEP_WRITE(STATE) WRITE(X2_STEP_PIN,STATE)
   #define X2_STEP_READ READ(X2_STEP_PIN)
-
-  #define X2_DIR_INIT SET_OUTPUT(X2_DIR_PIN)
-  #define X2_DIR_WRITE(STATE) WRITE(X2_DIR_PIN,STATE)
-  #define X2_DIR_READ READ(X_DIR_PIN)
-
-  #define X2_ENABLE_INIT SET_OUTPUT(X2_ENABLE_PIN)
-  #define X2_ENABLE_WRITE(STATE) WRITE(X2_ENABLE_PIN,STATE)
-  #define X2_ENABLE_READ READ(X_ENABLE_PIN)
 #endif
 
-// Y motor
-#define Y_STEP_INIT SET_OUTPUT(Y_STEP_PIN)
-#define Y_STEP_WRITE(STATE) WRITE(Y_STEP_PIN,STATE)
-#define Y_STEP_READ READ(Y_STEP_PIN)
-
-#define Y_DIR_INIT SET_OUTPUT(Y_DIR_PIN)
-#define Y_DIR_WRITE(STATE) WRITE(Y_DIR_PIN,STATE)
-#define Y_DIR_READ READ(Y_DIR_PIN)
-
-#define Y_ENABLE_INIT SET_OUTPUT(Y_ENABLE_PIN)
-#define Y_ENABLE_WRITE(STATE) WRITE(Y_ENABLE_PIN,STATE)
-#define Y_ENABLE_READ READ(Y_ENABLE_PIN)
-
-// Y2 motor
+// Y2 Stepper
 #if HAS_Y2_ENABLE
+  #if ENABLED(HAVE_L6470DRIVER) && ENABLED(Y2_IS_L6470)
+    extern L6470 stepperY2;
+    #define Y2_ENABLE_INIT NOOP
+    #define Y2_ENABLE_WRITE(STATE) do{if(STATE) stepperY2.Step_Clock(stepperY2.getStatus() & STATUS_HIZ); else stepperY2.softFree();}while(0)
+    #define Y2_ENABLE_READ (stepperY2.getStatus() & STATUS_HIZ)
+    #define Y2_DIR_INIT NOOP
+    #define Y2_DIR_WRITE(STATE) stepperY2.Step_Clock(STATE)
+    #define Y2_DIR_READ (stepperY2.getStatus() & STATUS_DIR)
+  #else
+    #if ENABLED(HAVE_TMCDRIVER) && ENABLED(Y2_IS_TMC)
+      extern TMC26XStepper stepperY2;
+      #define Y2_ENABLE_INIT NOOP
+      #define Y2_ENABLE_WRITE(STATE) stepperY2.setEnabled(STATE)
+      #define Y2_ENABLE_READ stepperY2.isEnabled()
+    #else
+      #define Y2_ENABLE_INIT SET_OUTPUT(Y2_ENABLE_PIN)
+      #define Y2_ENABLE_WRITE(STATE) WRITE(Y2_ENABLE_PIN,STATE)
+      #define Y2_ENABLE_READ READ(Y2_ENABLE_PIN)
+    #endif
+    #define Y2_DIR_INIT SET_OUTPUT(Y2_DIR_PIN)
+    #define Y2_DIR_WRITE(STATE) WRITE(Y2_DIR_PIN,STATE)
+    #define Y2_DIR_READ READ(Y2_DIR_PIN)
+  #endif
   #define Y2_STEP_INIT SET_OUTPUT(Y2_STEP_PIN)
   #define Y2_STEP_WRITE(STATE) WRITE(Y2_STEP_PIN,STATE)
   #define Y2_STEP_READ READ(Y2_STEP_PIN)
+#endif
 
-  #define Y2_DIR_INIT SET_OUTPUT(Y2_DIR_PIN)
-  #define Y2_DIR_WRITE(STATE) WRITE(Y2_DIR_PIN,STATE)
-  #define Y2_DIR_READ READ(Y2_DIR_PIN)
-
-  #define Y2_ENABLE_INIT SET_OUTPUT(Y2_ENABLE_PIN)
-  #define Y2_ENABLE_WRITE(STATE) WRITE(Y2_ENABLE_PIN,STATE)
-  #define Y2_ENABLE_READ READ(Y2_ENABLE_PIN)
-#endif // Y_DUAL_STEPPER_DRIVERS
-
-// Z motor
-#define Z_STEP_INIT SET_OUTPUT(Z_STEP_PIN)
-#define Z_STEP_WRITE(STATE) WRITE(Z_STEP_PIN,STATE)
-#define Z_STEP_READ READ(Z_STEP_PIN)
-
-#define Z_DIR_INIT SET_OUTPUT(Z_DIR_PIN)
-#define Z_DIR_WRITE(STATE) WRITE(Z_DIR_PIN,STATE)
-#define Z_DIR_READ READ(Z_DIR_PIN)
-
-#define Z_ENABLE_INIT SET_OUTPUT(Z_ENABLE_PIN)
-#define Z_ENABLE_WRITE(STATE) WRITE(Z_ENABLE_PIN,STATE)
-#define Z_ENABLE_READ READ(Z_ENABLE_PIN)
-
-// Z2 motor
+// Z2 Stepper
 #if HAS_Z2_ENABLE
+  #if ENABLED(HAVE_L6470DRIVER) && ENABLED(Z2_IS_L6470)
+    extern L6470 stepperZ2;
+    #define Z2_ENABLE_INIT NOOP
+    #define Z2_ENABLE_WRITE(STATE) do{if(STATE) stepperZ2.Step_Clock(stepperZ2.getStatus() & STATUS_HIZ); else stepperZ2.softFree();}while(0)
+    #define Z2_ENABLE_READ (stepperZ2.getStatus() & STATUS_HIZ)
+    #define Z2_DIR_INIT NOOP
+    #define Z2_DIR_WRITE(STATE) stepperZ2.Step_Clock(STATE)
+    #define Z2_DIR_READ (stepperZ2.getStatus() & STATUS_DIR)
+  #else
+    #if ENABLED(HAVE_TMCDRIVER) && ENABLED(Z2_IS_TMC)
+      extern TMC26XStepper stepperZ2;
+      #define Z2_ENABLE_INIT NOOP
+      #define Z2_ENABLE_WRITE(STATE) stepperZ2.setEnabled(STATE)
+      #define Z2_ENABLE_READ stepperZ2.isEnabled()
+    #else
+      #define Z2_ENABLE_INIT SET_OUTPUT(Z2_ENABLE_PIN)
+      #define Z2_ENABLE_WRITE(STATE) WRITE(Z2_ENABLE_PIN,STATE)
+      #define Z2_ENABLE_READ READ(Z2_ENABLE_PIN)
+    #endif
+    #define Z2_DIR_INIT SET_OUTPUT(Z2_DIR_PIN)
+    #define Z2_DIR_WRITE(STATE) WRITE(Z2_DIR_PIN,STATE)
+    #define Z2_DIR_READ READ(Z2_DIR_PIN)
+  #endif
   #define Z2_STEP_INIT SET_OUTPUT(Z2_STEP_PIN)
   #define Z2_STEP_WRITE(STATE) WRITE(Z2_STEP_PIN,STATE)
   #define Z2_STEP_READ READ(Z2_STEP_PIN)
+#endif
 
-  #define Z2_DIR_INIT SET_OUTPUT(Z2_DIR_PIN)
-  #define Z2_DIR_WRITE(STATE) WRITE(Z2_DIR_PIN,STATE)
-  #define Z2_DIR_READ READ(Z2_DIR_PIN)
-
-  #define Z2_ENABLE_INIT SET_OUTPUT(Z2_ENABLE_PIN)
-  #define Z2_ENABLE_WRITE(STATE) WRITE(Z2_ENABLE_PIN,STATE)
-  #define Z2_ENABLE_READ READ(Z2_ENABLE_PIN)
-#endif // Z_DUAL_STEPPER_DRIVERS
-
-// E0 motor
+// E0 Stepper
+#if ENABLED(HAVE_L6470DRIVER) && ENABLED(E0_IS_L6470)
+  extern L6470 stepperE0;
+  #define E0_ENABLE_INIT NOOP
+  #define E0_ENABLE_WRITE(STATE) do{if(STATE) stepperE0.Step_Clock(stepperE0.getStatus() & STATUS_HIZ); else stepperE0.softFree();}while(0)
+  #define E0_ENABLE_READ (stepperE0.getStatus() & STATUS_HIZ)
+  #define E0_DIR_INIT NOOP
+  #define E0_DIR_WRITE(STATE) stepperE0.Step_Clock(STATE)
+  #define E0_DIR_READ (stepperE0.getStatus() & STATUS_DIR)
+#else
+  #if ENABLED(HAVE_TMCDRIVER) && ENABLED(E0_IS_TMC)
+    extern TMC26XStepper stepperE0;
+    #define E0_ENABLE_INIT NOOP
+    #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
+    #define E0_ENABLE_READ stepperE0.isEnabled()
+  #else
+    #define E0_ENABLE_INIT SET_OUTPUT(E0_ENABLE_PIN)
+    #define E0_ENABLE_WRITE(STATE) WRITE(E0_ENABLE_PIN,STATE)
+    #define E0_ENABLE_READ READ(E0_ENABLE_PIN)
+  #endif
+  #define E0_DIR_INIT SET_OUTPUT(E0_DIR_PIN)
+  #define E0_DIR_WRITE(STATE) WRITE(E0_DIR_PIN,STATE)
+  #define E0_DIR_READ READ(E0_DIR_PIN)
+#endif
 #define E0_STEP_INIT SET_OUTPUT(E0_STEP_PIN)
 #define E0_STEP_WRITE(STATE) WRITE(E0_STEP_PIN,STATE)
 #define E0_STEP_READ READ(E0_STEP_PIN)
 
-#define E0_DIR_INIT SET_OUTPUT(E0_DIR_PIN)
-#define E0_DIR_WRITE(STATE) WRITE(E0_DIR_PIN,STATE)
-#define E0_DIR_READ READ(E0_DIR_PIN)
-
-#define E0_ENABLE_INIT SET_OUTPUT(E0_ENABLE_PIN)
-#define E0_ENABLE_WRITE(STATE) WRITE(E0_ENABLE_PIN,STATE)
-#define E0_ENABLE_READ READ(E0_ENABLE_PIN)
-
-// E1 motor
+// E1 Stepper
+#if ENABLED(HAVE_L6470DRIVER) && ENABLED(E1_IS_L6470)
+  extern L6470 stepperE1;
+  #define E1_ENABLE_INIT NOOP
+  #define E1_ENABLE_WRITE(STATE) do{if(STATE) stepperE1.Step_Clock(stepperE1.getStatus() & STATUS_HIZ); else stepperE1.softFree();}while(0)
+  #define E1_ENABLE_READ (stepperE1.getStatus() & STATUS_HIZ)
+  #define E1_DIR_INIT NOOP
+  #define E1_DIR_WRITE(STATE) stepperE1.Step_Clock(STATE)
+  #define E1_DIR_READ (stepperE1.getStatus() & STATUS_DIR)
+#else
+  #if ENABLED(HAVE_TMCDRIVER) && ENABLED(E1_IS_TMC)
+    extern TMC26XStepper stepperE1;
+    #define E1_ENABLE_INIT NOOP
+    #define E1_ENABLE_WRITE(STATE) stepperE1.setEnabled(STATE)
+    #define E1_ENABLE_READ stepperE1.isEnabled()
+  #else
+    #define E1_ENABLE_INIT SET_OUTPUT(E1_ENABLE_PIN)
+    #define E1_ENABLE_WRITE(STATE) WRITE(E1_ENABLE_PIN,STATE)
+    #define E1_ENABLE_READ READ(E1_ENABLE_PIN)
+  #endif
+  #define E1_DIR_INIT SET_OUTPUT(E1_DIR_PIN)
+  #define E1_DIR_WRITE(STATE) WRITE(E1_DIR_PIN,STATE)
+  #define E1_DIR_READ READ(E1_DIR_PIN)
+#endif
 #define E1_STEP_INIT SET_OUTPUT(E1_STEP_PIN)
 #define E1_STEP_WRITE(STATE) WRITE(E1_STEP_PIN,STATE)
 #define E1_STEP_READ READ(E1_STEP_PIN)
 
-#define E1_DIR_INIT SET_OUTPUT(E1_DIR_PIN)
-#define E1_DIR_WRITE(STATE) WRITE(E1_DIR_PIN,STATE)
-#define E1_DIR_READ READ(E1_DIR_PIN)
-
-#define E1_ENABLE_INIT SET_OUTPUT(E1_ENABLE_PIN)
-#define E1_ENABLE_WRITE(STATE) WRITE(E1_ENABLE_PIN,STATE)
-#define E1_ENABLE_READ READ(E1_ENABLE_PIN)
-
-// E2 motor
+// E2 Stepper
+#if ENABLED(HAVE_L6470DRIVER) && ENABLED(E2_IS_L6470)
+  extern L6470 stepperE2;
+  #define E2_ENABLE_INIT NOOP
+  #define E2_ENABLE_WRITE(STATE) do{if(STATE) stepperE2.Step_Clock(stepperE2.getStatus() & STATUS_HIZ); else stepperE2.softFree();}while(0)
+  #define E2_ENABLE_READ (stepperE2.getStatus() & STATUS_HIZ)
+  #define E2_DIR_INIT NOOP
+  #define E2_DIR_WRITE(STATE) stepperE2.Step_Clock(STATE)
+  #define E2_DIR_READ (stepperE2.getStatus() & STATUS_DIR)
+#else
+  #if ENABLED(HAVE_TMCDRIVER) && ENABLED(E2_IS_TMC)
+    extern TMC26XStepper stepperE2;
+    #define E2_ENABLE_INIT NOOP
+    #define E2_ENABLE_WRITE(STATE) stepperE2.setEnabled(STATE)
+    #define E2_ENABLE_READ stepperE2.isEnabled()
+  #else
+    #define E2_ENABLE_INIT SET_OUTPUT(E2_ENABLE_PIN)
+    #define E2_ENABLE_WRITE(STATE) WRITE(E2_ENABLE_PIN,STATE)
+    #define E2_ENABLE_READ READ(E2_ENABLE_PIN)
+  #endif
+  #define E2_DIR_INIT SET_OUTPUT(E2_DIR_PIN)
+  #define E2_DIR_WRITE(STATE) WRITE(E2_DIR_PIN,STATE)
+  #define E2_DIR_READ READ(E2_DIR_PIN)
+#endif
 #define E2_STEP_INIT SET_OUTPUT(E2_STEP_PIN)
 #define E2_STEP_WRITE(STATE) WRITE(E2_STEP_PIN,STATE)
 #define E2_STEP_READ READ(E2_STEP_PIN)
 
-#define E2_DIR_INIT SET_OUTPUT(E2_DIR_PIN)
-#define E2_DIR_WRITE(STATE) WRITE(E2_DIR_PIN,STATE)
-#define E2_DIR_READ READ(E2_DIR_PIN)
-
-#define E2_ENABLE_INIT SET_OUTPUT(E2_ENABLE_PIN)
-#define E2_ENABLE_WRITE(STATE) WRITE(E2_ENABLE_PIN,STATE)
-#define E2_ENABLE_READ READ(E2_ENABLE_PIN)
-
-// E3 motor
+// E3 Stepper
+#if ENABLED(HAVE_L6470DRIVER) && ENABLED(E3_IS_L6470)
+  extern L6470 stepperE3;
+  #define E3_ENABLE_INIT NOOP
+  #define E3_ENABLE_WRITE(STATE) do{if(STATE) stepperE3.Step_Clock(stepperE3.getStatus() & STATUS_HIZ); else stepperE3.softFree();}while(0)
+  #define E3_ENABLE_READ (stepperE3.getStatus() & STATUS_HIZ)
+  #define E3_DIR_INIT NOOP
+  #define E3_DIR_WRITE(STATE) stepperE3.Step_Clock(STATE)
+  #define E3_DIR_READ (stepperE3.getStatus() & STATUS_DIR)
+#else
+  #if ENABLED(HAVE_TMCDRIVER) && ENABLED(E3_IS_TMC)
+    extern TMC26XStepper stepperE3;
+    #define E3_ENABLE_INIT NOOP
+    #define E3_ENABLE_WRITE(STATE) stepperE3.setEnabled(STATE)
+    #define E3_ENABLE_READ stepperE3.isEnabled()
+  #else
+    #define E3_ENABLE_INIT SET_OUTPUT(E3_ENABLE_PIN)
+    #define E3_ENABLE_WRITE(STATE) WRITE(E3_ENABLE_PIN,STATE)
+    #define E3_ENABLE_READ READ(E3_ENABLE_PIN)
+  #endif
+  #define E3_DIR_INIT SET_OUTPUT(E3_DIR_PIN)
+  #define E3_DIR_WRITE(STATE) WRITE(E3_DIR_PIN,STATE)
+  #define E3_DIR_READ READ(E3_DIR_PIN)
+#endif
 #define E3_STEP_INIT SET_OUTPUT(E3_STEP_PIN)
 #define E3_STEP_WRITE(STATE) WRITE(E3_STEP_PIN,STATE)
 #define E3_STEP_READ READ(E3_STEP_PIN)
 
-#define E3_DIR_INIT SET_OUTPUT(E3_DIR_PIN)
-#define E3_DIR_WRITE(STATE) WRITE(E3_DIR_PIN,STATE)
-#define E3_DIR_READ READ(E3_DIR_PIN)
-
-#define E3_ENABLE_INIT SET_OUTPUT(E3_ENABLE_PIN)
-#define E3_ENABLE_WRITE(STATE) WRITE(E3_ENABLE_PIN,STATE)
-#define E3_ENABLE_READ READ(E3_ENABLE_PIN)
-
+/**
+ * Extruder indirection for the single E axis
+ */
 #if ENABLED(SWITCHING_EXTRUDER)
   #define E_STEP_WRITE(v) E0_STEP_WRITE(v)
   #define NORM_E_DIR() E0_DIR_WRITE(current_block->active_extruder ?  INVERT_E0_DIR : !INVERT_E0_DIR)
@@ -225,341 +392,4 @@
   #define REV_E_DIR() E0_DIR_WRITE(INVERT_E0_DIR)
 #endif
 
-//////////////////////////////////
-// Pin redefines for TMC drivers.
-// TMC26X drivers have step and dir on normal pins, but everything else via SPI
-//////////////////////////////////
-#if ENABLED(HAVE_TMCDRIVER)
-  #include <SPI.h>
-  #include <TMC26XStepper.h>
-
-  void tmc_init();
-  #if ENABLED(X_IS_TMC)
-    extern TMC26XStepper stepperX;
-    #undef X_ENABLE_INIT
-    #define X_ENABLE_INIT ((void)0)
-
-    #undef X_ENABLE_WRITE
-    #define X_ENABLE_WRITE(STATE) stepperX.setEnabled(STATE)
-
-    #undef X_ENABLE_READ
-    #define X_ENABLE_READ stepperX.isEnabled()
-
-  #endif
-  #if ENABLED(X2_IS_TMC)
-    extern TMC26XStepper stepperX2;
-    #undef X2_ENABLE_INIT
-    #define X2_ENABLE_INIT ((void)0)
-
-    #undef X2_ENABLE_WRITE
-    #define X2_ENABLE_WRITE(STATE) stepperX2.setEnabled(STATE)
-
-    #undef X2_ENABLE_READ
-    #define X2_ENABLE_READ stepperX2.isEnabled()
-  #endif
-  #if ENABLED(Y_IS_TMC)
-    extern TMC26XStepper stepperY;
-    #undef Y_ENABLE_INIT
-    #define Y_ENABLE_INIT ((void)0)
-
-    #undef Y_ENABLE_WRITE
-    #define Y_ENABLE_WRITE(STATE) stepperY.setEnabled(STATE)
-
-    #undef Y_ENABLE_READ
-    #define Y_ENABLE_READ stepperY.isEnabled()
-  #endif
-  #if ENABLED(Y2_IS_TMC)
-    extern TMC26XStepper stepperY2;
-    #undef Y2_ENABLE_INIT
-    #define Y2_ENABLE_INIT ((void)0)
-
-    #undef Y2_ENABLE_WRITE
-    #define Y2_ENABLE_WRITE(STATE) stepperY2.setEnabled(STATE)
-
-    #undef Y2_ENABLE_READ
-    #define Y2_ENABLE_READ stepperY2.isEnabled()
-  #endif
-  #if ENABLED(Z_IS_TMC)
-    extern TMC26XStepper stepperZ;
-    #undef Z_ENABLE_INIT
-    #define Z_ENABLE_INIT ((void)0)
-
-    #undef Z_ENABLE_WRITE
-    #define Z_ENABLE_WRITE(STATE) stepperZ.setEnabled(STATE)
-
-    #undef Z_ENABLE_READ
-    #define Z_ENABLE_READ stepperZ.isEnabled()
-  #endif
-  #if ENABLED(Z2_IS_TMC)
-    extern TMC26XStepper stepperZ2;
-    #undef Z2_ENABLE_INIT
-    #define Z2_ENABLE_INIT ((void)0)
-
-    #undef Z2_ENABLE_WRITE
-    #define Z2_ENABLE_WRITE(STATE) stepperZ2.setEnabled(STATE)
-
-    #undef Z2_ENABLE_READ
-    #define Z2_ENABLE_READ stepperZ2.isEnabled()
-  #endif
-  #if ENABLED(E0_IS_TMC)
-    extern TMC26XStepper stepperE0;
-    #undef E0_ENABLE_INIT
-    #define E0_ENABLE_INIT ((void)0)
-
-    #undef E0_ENABLE_WRITE
-    #define E0_ENABLE_WRITE(STATE) stepperE0.setEnabled(STATE)
-
-    #undef E0_ENABLE_READ
-    #define E0_ENABLE_READ stepperE0.isEnabled()
-  #endif
-  #if ENABLED(E1_IS_TMC)
-    extern TMC26XStepper stepperE1;
-    #undef E1_ENABLE_INIT
-    #define E1_ENABLE_INIT ((void)0)
-
-    #undef E1_ENABLE_WRITE
-    #define E1_ENABLE_WRITE(STATE) stepperE1.setEnabled(STATE)
-
-    #undef E1_ENABLE_READ
-    #define E1_ENABLE_READ stepperE1.isEnabled()
-  #endif
-  #if ENABLED(E2_IS_TMC)
-    extern TMC26XStepper stepperE2;
-    #undef E2_ENABLE_INIT
-    #define E2_ENABLE_INIT ((void)0)
-
-    #undef E2_ENABLE_WRITE
-    #define E2_ENABLE_WRITE(STATE) stepperE2.setEnabled(STATE)
-
-    #undef E2_ENABLE_READ
-    #define E2_ENABLE_READ stepperE2.isEnabled()
-  #endif
-  #if ENABLED(E3_IS_TMC)
-    extern TMC26XStepper stepperE3;
-    #undef E3_ENABLE_INIT
-    #define E3_ENABLE_INIT ((void)0)
-
-    #undef E3_ENABLE_WRITE
-    #define E3_ENABLE_WRITE(STATE) stepperE3.setEnabled(STATE)
-
-    #undef E3_ENABLE_READ
-    #define E3_ENABLE_READ stepperE3.isEnabled()
-  #endif
-
-#endif  // HAVE_TMCDRIVER
-
-//////////////////////////////////
-// Pin redefines for L6470 drivers.
-// L640 drivers have step on normal pins, but dir and everything else via SPI
-//////////////////////////////////
-#if ENABLED(HAVE_L6470DRIVER)
-
-  #include <SPI.h>
-  #include <L6470.h>
-
-  void L6470_init();
-  #if ENABLED(X_IS_L6470)
-    extern L6470 stepperX;
-    #undef X_ENABLE_INIT
-    #define X_ENABLE_INIT ((void)0)
-
-    #undef X_ENABLE_WRITE
-    #define X_ENABLE_WRITE(STATE) {if(STATE) stepperX.Step_Clock(stepperX.getStatus() & STATUS_HIZ); else stepperX.softFree();}
-
-    #undef X_ENABLE_READ
-    #define X_ENABLE_READ (stepperX.getStatus() & STATUS_HIZ)
-
-    #undef X_DIR_INIT
-    #define X_DIR_INIT ((void)0)
-
-    #undef X_DIR_WRITE
-    #define X_DIR_WRITE(STATE) stepperX.Step_Clock(STATE)
-
-    #undef X_DIR_READ
-    #define X_DIR_READ (stepperX.getStatus() & STATUS_DIR)
-
-  #endif
-  #if ENABLED(X2_IS_L6470)
-    extern L6470 stepperX2;
-    #undef X2_ENABLE_INIT
-    #define X2_ENABLE_INIT ((void)0)
-
-    #undef X2_ENABLE_WRITE
-    #define X2_ENABLE_WRITE(STATE) (if(STATE) stepperX2.Step_Clock(stepperX2.getStatus() & STATUS_HIZ); else stepperX2.softFree();)
-
-    #undef X2_ENABLE_READ
-    #define X2_ENABLE_READ (stepperX2.getStatus() & STATUS_HIZ)
-
-    #undef X2_DIR_INIT
-    #define X2_DIR_INIT ((void)0)
-
-    #undef X2_DIR_WRITE
-    #define X2_DIR_WRITE(STATE) stepperX2.Step_Clock(STATE)
-
-    #undef X2_DIR_READ
-    #define X2_DIR_READ (stepperX2.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(Y_IS_L6470)
-    extern L6470 stepperY;
-    #undef Y_ENABLE_INIT
-    #define Y_ENABLE_INIT ((void)0)
-
-    #undef Y_ENABLE_WRITE
-    #define Y_ENABLE_WRITE(STATE) (if(STATE) stepperY.Step_Clock(stepperY.getStatus() & STATUS_HIZ); else stepperY.softFree();)
-
-    #undef Y_ENABLE_READ
-    #define Y_ENABLE_READ (stepperY.getStatus() & STATUS_HIZ)
-
-    #undef Y_DIR_INIT
-    #define Y_DIR_INIT ((void)0)
-
-    #undef Y_DIR_WRITE
-    #define Y_DIR_WRITE(STATE) stepperY.Step_Clock(STATE)
-
-    #undef Y_DIR_READ
-    #define Y_DIR_READ (stepperY.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(Y2_IS_L6470)
-    extern L6470 stepperY2;
-    #undef Y2_ENABLE_INIT
-    #define Y2_ENABLE_INIT ((void)0)
-
-    #undef Y2_ENABLE_WRITE
-    #define Y2_ENABLE_WRITE(STATE) (if(STATE) stepperY2.Step_Clock(stepperY2.getStatus() & STATUS_HIZ); else stepperY2.softFree();)
-
-    #undef Y2_ENABLE_READ
-    #define Y2_ENABLE_READ (stepperY2.getStatus() & STATUS_HIZ)
-
-    #undef Y2_DIR_INIT
-    #define Y2_DIR_INIT ((void)0)
-
-    #undef Y2_DIR_WRITE
-    #define Y2_DIR_WRITE(STATE) stepperY2.Step_Clock(STATE)
-
-    #undef Y2_DIR_READ
-    #define Y2_DIR_READ (stepperY2.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(Z_IS_L6470)
-    extern L6470 stepperZ;
-    #undef Z_ENABLE_INIT
-    #define Z_ENABLE_INIT ((void)0)
-
-    #undef Z_ENABLE_WRITE
-    #define Z_ENABLE_WRITE(STATE) (if(STATE) stepperZ.Step_Clock(stepperZ.getStatus() & STATUS_HIZ); else stepperZ.softFree();)
-
-    #undef Z_ENABLE_READ
-    #define Z_ENABLE_READ (stepperZ.getStatus() & STATUS_HIZ)
-
-    #undef Z_DIR_INIT
-    #define Z_DIR_INIT ((void)0)
-
-    #undef Z_DIR_WRITE
-    #define Z_DIR_WRITE(STATE) stepperZ.Step_Clock(STATE)
-
-    #undef Y_DIR_READ
-    #define Y_DIR_READ (stepperZ.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(Z2_IS_L6470)
-    extern L6470 stepperZ2;
-    #undef Z2_ENABLE_INIT
-    #define Z2_ENABLE_INIT ((void)0)
-
-    #undef Z2_ENABLE_WRITE
-    #define Z2_ENABLE_WRITE(STATE) (if(STATE) stepperZ2.Step_Clock(stepperZ2.getStatus() & STATUS_HIZ); else stepperZ2.softFree();)
-
-    #undef Z2_ENABLE_READ
-    #define Z2_ENABLE_READ (stepperZ2.getStatus() & STATUS_HIZ)
-
-    #undef Z2_DIR_INIT
-    #define Z2_DIR_INIT ((void)0)
-
-    #undef Z2_DIR_WRITE
-    #define Z2_DIR_WRITE(STATE) stepperZ2.Step_Clock(STATE)
-
-    #undef Y2_DIR_READ
-    #define Y2_DIR_READ (stepperZ2.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(E0_IS_L6470)
-    extern L6470 stepperE0;
-    #undef E0_ENABLE_INIT
-    #define E0_ENABLE_INIT ((void)0)
-
-    #undef E0_ENABLE_WRITE
-    #define E0_ENABLE_WRITE(STATE) (if(STATE) stepperE0.Step_Clock(stepperE0.getStatus() & STATUS_HIZ); else stepperE0.softFree();)
-
-    #undef E0_ENABLE_READ
-    #define E0_ENABLE_READ (stepperE0.getStatus() & STATUS_HIZ)
-
-    #undef E0_DIR_INIT
-    #define E0_DIR_INIT ((void)0)
-
-    #undef E0_DIR_WRITE
-    #define E0_DIR_WRITE(STATE) stepperE0.Step_Clock(STATE)
-
-    #undef E0_DIR_READ
-    #define E0_DIR_READ (stepperE0.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(E1_IS_L6470)
-    extern L6470 stepperE1;
-    #undef E1_ENABLE_INIT
-    #define E1_ENABLE_INIT ((void)0)
-
-    #undef E1_ENABLE_WRITE
-    #define E1_ENABLE_WRITE(STATE) (if(STATE) stepperE1.Step_Clock(stepperE1.getStatus() & STATUS_HIZ); else stepperE1.softFree();)
-
-    #undef E1_ENABLE_READ
-    #define E1_ENABLE_READ (stepperE1.getStatus() & STATUS_HIZ)
-
-    #undef E1_DIR_INIT
-    #define E1_DIR_INIT ((void)0)
-
-    #undef E1_DIR_WRITE
-    #define E1_DIR_WRITE(STATE) stepperE1.Step_Clock(STATE)
-
-    #undef E1_DIR_READ
-    #define E1_DIR_READ (stepperE1.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(E2_IS_L6470)
-    extern L6470 stepperE2;
-    #undef E2_ENABLE_INIT
-    #define E2_ENABLE_INIT ((void)0)
-
-    #undef E2_ENABLE_WRITE
-    #define E2_ENABLE_WRITE(STATE) (if(STATE) stepperE2.Step_Clock(stepperE2.getStatus() & STATUS_HIZ); else stepperE2.softFree();)
-
-    #undef E2_ENABLE_READ
-    #define E2_ENABLE_READ (stepperE2.getStatus() & STATUS_HIZ)
-
-    #undef E2_DIR_INIT
-    #define E2_DIR_INIT ((void)0)
-
-    #undef E2_DIR_WRITE
-    #define E2_DIR_WRITE(STATE) stepperE2.Step_Clock(STATE)
-
-    #undef E2_DIR_READ
-    #define E2_DIR_READ (stepperE2.getStatus() & STATUS_DIR)
-  #endif
-  #if ENABLED(E3_IS_L6470)
-    extern L6470 stepperE3;
-    #undef E3_ENABLE_INIT
-    #define E3_ENABLE_INIT ((void)0)
-
-    #undef E3_ENABLE_WRITE
-    #define E3_ENABLE_WRITE(STATE) (if(STATE) stepperE3.Step_Clock(stepperE3.getStatus() & STATUS_HIZ); else stepperE3.softFree();)
-
-    #undef E3_ENABLE_READ
-    #define E3_ENABLE_READ (stepperE3.getStatus() & STATUS_HIZ)
-
-    #undef E3_DIR_INIT
-    #define E3_DIR_INIT ((void)0)
-
-    #undef E3_DIR_WRITE
-    #define E3_DIR_WRITE(STATE) stepperE3.Step_Clock(STATE)
-
-    #undef E3_DIR_READ
-    #define E3_DIR_READ (stepperE3.getStatus() & STATUS_DIR)
-  #endif
-
-#endif  //HAVE_L6470DRIVER
-
 #endif // STEPPER_INDIRECTION_H
diff --git a/Marlin/ultralcd_impl_DOGM.h b/Marlin/ultralcd_impl_DOGM.h
index f53f926..218f321 100644
--- a/Marlin/ultralcd_impl_DOGM.h
+++ b/Marlin/ultralcd_impl_DOGM.h
@@ -141,7 +141,9 @@
 #define START_COL              0
 
 // LCD selection
-#if ENABLED(U8GLIB_ST7920)
+#if ENABLED(REPRAPWORLD_GRAPHICAL_LCD)
+  U8GLIB_ST7920_128X64_4X u8g(LCD_PINS_RS);
+#elif ENABLED(U8GLIB_ST7920)
   //U8GLIB_ST7920_128X64_RRD u8g(0,0,0);
   U8GLIB_ST7920_128X64_RRD u8g(0);
 #elif defined(CARTESIO_UI)

