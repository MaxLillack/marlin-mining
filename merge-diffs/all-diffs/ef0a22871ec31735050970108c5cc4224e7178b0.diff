commit ef0a22871ec31735050970108c5cc4224e7178b0 (from 9eba58a031ceab2df468a1aec8971d1919d2be74)
Merge: 9eba58a f4d6379
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jul 19 13:40:52 2016 -0700

    Merge pull request #4350 from jbrazio/followup-a875861
    
    Adds utility.h

diff --git a/Marlin/Marlin.h b/Marlin/Marlin.h
index c2c277a..3b4cf83 100644
--- a/Marlin/Marlin.h
+++ b/Marlin/Marlin.h
@@ -39,11 +39,12 @@
 #include <avr/eeprom.h>
 #include <avr/interrupt.h>
 
-
 #include "fastio.h"
 #include "Configuration.h"
 #include "pins.h"
 
+#include "utility.h"
+
 #ifndef SANITYCHECK_H
   #error "Your Configuration.h and Configuration_adv.h files are outdated!"
 #endif
@@ -403,6 +404,4 @@ void calculate_volumetric_multipliers();
   #endif
 #endif
 
-void safe_delay(uint16_t del);
-
 #endif //MARLIN_H
diff --git a/Marlin/utility.h b/Marlin/utility.h
new file mode 100644
index 0000000..8bb3a9b
--- /dev/null
+++ b/Marlin/utility.h
@@ -0,0 +1,23 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+void safe_delay(uint16_t ms);

commit ef0a22871ec31735050970108c5cc4224e7178b0 (from f4d63796b283fb893de9e36591192a45b9c20cfe)
Merge: 9eba58a f4d6379
Author: Scott Lahteine <thinkyhead@users.noreply.github.com>
Date:   Tue Jul 19 13:40:52 2016 -0700

    Merge pull request #4350 from jbrazio/followup-a875861
    
    Adds utility.h

diff --git a/Marlin/Marlin.h b/Marlin/Marlin.h
index 25995c9..3b4cf83 100644
--- a/Marlin/Marlin.h
+++ b/Marlin/Marlin.h
@@ -51,6 +51,8 @@
 
 #include "Arduino.h"
 
+#include "enum.h"
+
 typedef unsigned long millis_t;
 
 #ifdef USBCON
@@ -231,20 +233,8 @@ void manage_inactivity(bool ignore_stepper_queue = false);
  * The axis order in all axis related arrays is X, Y, Z, E
  */
 #define NUM_AXIS 4
-
-/**
- * Axis indices as enumerated constants
- *
- * A_AXIS and B_AXIS are used by COREXY printers
- * X_HEAD and Y_HEAD is used for systems that don't have a 1:1 relationship between X_AXIS and X Head movement, like CoreXY bots.
- */
-enum AxisEnum {NO_AXIS = -1, X_AXIS = 0, A_AXIS = 0, Y_AXIS = 1, B_AXIS = 1, Z_AXIS = 2, C_AXIS = 2, E_AXIS = 3, X_HEAD = 4, Y_HEAD = 5, Z_HEAD = 5};
-
 #define _AXIS(AXIS) AXIS ##_AXIS
 
-typedef enum { LINEARUNIT_MM = 0, LINEARUNIT_INCH = 1 } LinearUnit;
-typedef enum { TEMPUNIT_C = 0, TEMPUNIT_K = 1, TEMPUNIT_F = 2 } TempUnit;
-
 void enable_all_steppers();
 void disable_all_steppers();
 
@@ -260,18 +250,6 @@ void quickstop_stepper();
   void handle_filament_runout();
 #endif
 
-/**
- * Debug flags - not yet widely applied
- */
-enum DebugFlags {
-  DEBUG_NONE          = 0,
-  DEBUG_ECHO          = _BV(0), ///< Echo commands in order as they are processed
-  DEBUG_INFO          = _BV(1), ///< Print messages for code that has debug output
-  DEBUG_ERRORS        = _BV(2), ///< Not implemented
-  DEBUG_DRYRUN        = _BV(3), ///< Ignore temperature setting and E movement commands
-  DEBUG_COMMUNICATION = _BV(4), ///< Not implemented
-  DEBUG_LEVELING      = _BV(5)  ///< Print detailed output for homing and leveling
-};
 extern uint8_t marlin_debug_flags;
 #define DEBUGGING(F) (marlin_debug_flags & (DEBUG_## F))
 
@@ -381,11 +359,6 @@ float code_value_temp_diff();
 #endif
 
 #if ENABLED(FILAMENT_CHANGE_FEATURE)
-  enum FilamentChangeMenuResponse {
-    FILAMENT_CHANGE_RESPONSE_WAIT_FOR,
-    FILAMENT_CHANGE_RESPONSE_EXTRUDE_MORE,
-    FILAMENT_CHANGE_RESPONSE_RESUME_PRINT
-  };
   extern FilamentChangeMenuResponse filament_change_menu_response;
 #endif
 
diff --git a/Marlin/MarlinSerial.cpp b/Marlin/MarlinSerial.cpp
index d0921f4..d2f5623 100644
--- a/Marlin/MarlinSerial.cpp
+++ b/Marlin/MarlinSerial.cpp
@@ -455,21 +455,6 @@ MarlinSerial customizedSerial;
 
   FORCE_INLINE void emergency_parser(unsigned char c) {
 
-    enum e_parser_state {
-      state_RESET,
-      state_N,
-      state_M,
-      state_M1,
-      state_M10,
-      state_M108,
-      state_M11,
-      state_M112,
-      state_M4,
-      state_M41,
-      state_M410,
-      state_IGNORE // to '\n'
-    };
-
     static e_parser_state state = state_RESET;
 
     switch (state) {
diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index a4fbec0..3e4694a 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -535,17 +535,6 @@ static bool send_ok[BUFSIZE];
 #endif
 
 #if ENABLED(HOST_KEEPALIVE_FEATURE)
-
-  // States for managing Marlin and host communication
-  // Marlin sends messages if blocked or busy
-  enum MarlinBusyState {
-    NOT_BUSY,           // Not in a handler
-    IN_HANDLER,         // Processing a GCode
-    IN_PROCESS,         // Known to be blocking command input (as in G29)
-    PAUSED_FOR_USER,    // Blocking pending any input
-    PAUSED_FOR_INPUT    // Blocking pending text input (concept)
-  };
-
   static MarlinBusyState busy_state = NOT_BUSY;
   static millis_t next_busy_signal_ms = 0;
   uint8_t host_keepalive_interval = DEFAULT_KEEPALIVE_INTERVAL;
@@ -1613,9 +1602,20 @@ inline float set_homing_bump_feedrate(AxisEnum axis) {
 inline void line_to_current_position() {
   planner.buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], MMM_TO_MMS(feedrate_mm_m), active_extruder);
 }
+
 inline void line_to_z(float zPosition) {
   planner.buffer_line(current_position[X_AXIS], current_position[Y_AXIS], zPosition, current_position[E_AXIS], MMM_TO_MMS(feedrate_mm_m), active_extruder);
 }
+
+inline void line_to_axis_pos(AxisEnum axis, float where, float fr_mm_m = 0.0) {
+  float old_feedrate_mm_m = feedrate_mm_m;
+  current_position[axis] = where;
+  feedrate_mm_m = (fr_mm_m != 0.0) ? fr_mm_m : homing_feedrate_mm_m[axis];
+  planner.buffer_line(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], current_position[E_AXIS], MMM_TO_MMS(feedrate_mm_m), active_extruder);
+  stepper.synchronize(); // The lost one
+  feedrate_mm_m = old_feedrate_mm_m;
+}
+
 //
 // line_to_destination
 // Move the planner, not necessarily synced with current_position
@@ -1708,11 +1708,6 @@ static void do_blocking_move_to(float x, float y, float z, float fr_mm_m = 0.0)
   feedrate_mm_m = old_feedrate_mm_m;
 }
 
-inline void do_blocking_move_to_axis_pos(AxisEnum axis, float where, float fr_mm_m = 0.0) {
-  current_position[axis] = where;
-  do_blocking_move_to(current_position[X_AXIS], current_position[Y_AXIS], current_position[Z_AXIS], fr_mm_m);
-}
-
 inline void do_blocking_move_to_x(float x, float fr_mm_m = 0.0) {
   do_blocking_move_to(x, current_position[Y_AXIS], current_position[Z_AXIS], fr_mm_m);
 }
@@ -2425,19 +2420,17 @@ static void homeaxis(AxisEnum axis) {
   #endif
 
   // Move towards the endstop until an endstop is triggered
-  do_blocking_move_to_axis_pos(axis, 1.5 * max_length(axis) * axis_home_dir, homing_feedrate_mm_m[axis]);
+  line_to_axis_pos(axis, 1.5 * max_length(axis) * axis_home_dir);
 
   // Set the axis position as setup for the move
   current_position[axis] = 0;
   sync_plan_position();
 
   // Move away from the endstop by the axis HOME_BUMP_MM
-  do_blocking_move_to_axis_pos(axis, -home_bump_mm(axis) * axis_home_dir, homing_feedrate_mm_m[axis]);
-
-  // Slow down the feedrate for the next move
+  line_to_axis_pos(axis, -home_bump_mm(axis) * axis_home_dir);
 
   // Move slowly towards the endstop until triggered
-  do_blocking_move_to_axis_pos(axis, 2 * home_bump_mm(axis) * axis_home_dir, set_homing_bump_feedrate(axis));
+  line_to_axis_pos(axis, 2 * home_bump_mm(axis) * axis_home_dir, set_homing_bump_feedrate(axis));
 
   #if ENABLED(DEBUG_LEVELING_FEATURE)
     if (DEBUGGING(LEVELING)) DEBUG_POS("> TRIGGER ENDSTOP", current_position);
@@ -2458,7 +2451,7 @@ static void homeaxis(AxisEnum axis) {
       sync_plan_position();
 
       // Move to the adjusted endstop height
-      do_blocking_move_to_z(adj, homing_feedrate_mm_m[axis]);
+      line_to_axis_pos(axis, adj);
 
       if (lockZ1) stepper.set_z_lock(false); else stepper.set_z2_lock(false);
       stepper.set_homing_flag(false);
@@ -2475,7 +2468,7 @@ static void homeaxis(AxisEnum axis) {
           DEBUG_POS("", current_position);
         }
       #endif
-      do_blocking_move_to_axis_pos(axis, endstop_adj[axis], set_homing_bump_feedrate(axis));
+      line_to_axis_pos(axis, endstop_adj[axis]);
     }
   #endif
 
@@ -2825,10 +2818,28 @@ inline void gcode_G4() {
   }
 #endif
 
+#if ENABLED(NOZZLE_PARK_FEATURE)
+  #include "nozzle.h"
+
+  /**
+   * G27: Park the nozzle
+   */
+  inline void gcode_G27() {
+    // Don't allow nozzle parking without homing first
+    if (axis_unhomed_error(true, true, true)) { return; }
+    uint8_t const z_action = code_seen('P') ? code_value_ushort() : 0;
+    Nozzle::park(z_action);
+  }
+#endif // NOZZLE_PARK_FEATURE
+
 #if ENABLED(QUICK_HOME)
 
   static void quick_home_xy() {
 
+    // Pretend the current position is 0,0
+    current_position[X_AXIS] = current_position[Y_AXIS] = 0.0;
+    sync_plan_position();
+
     #if ENABLED(DUAL_X_CARRIAGE)
       int x_axis_home_dir = x_home_dir(active_extruder);
       extruder_duplication_enabled = false;
@@ -2839,30 +2850,16 @@ inline void gcode_G4() {
     float mlx = max_length(X_AXIS),
           mly = max_length(Y_AXIS),
           mlratio = mlx > mly ? mly / mlx : mlx / mly,
-          fr_mm_m = min(homing_feedrate_mm_m[X_AXIS], homing_feedrate_mm_m[Y_AXIS]) * sqrt(sq(mlratio) + 1);
+          fr_mm_m = min(homing_feedrate_mm_m[X_AXIS], homing_feedrate_mm_m[Y_AXIS]) * sqrt(sq(mlratio) + 1.0);
 
     do_blocking_move_to_xy(1.5 * mlx * x_axis_home_dir, 1.5 * mly * home_dir(Y_AXIS), fr_mm_m);
     endstops.hit_on_purpose(); // clear endstop hit flags
-    current_position[X_AXIS] = current_position[Y_AXIS] = 0;
+    current_position[X_AXIS] = current_position[Y_AXIS] = 0.0;
 
   }
 
 #endif // QUICK_HOME
 
-#if ENABLED(NOZZLE_PARK_FEATURE)
-  #include "nozzle.h"
-
-  /**
-   * G27: Park the nozzle
-   */
-  inline void gcode_G27() {
-    // Don't allow nozzle parking without homing first
-    if (axis_unhomed_error(true, true, true)) { return; }
-    uint8_t const z_action = code_seen('P') ? code_value_ushort() : 0;
-    Nozzle::park(z_action);
-  }
-#endif // NOZZLE_PARK_FEATURE
-
 /**
  * G28: Home all axes according to settings
  *
@@ -2931,20 +2928,19 @@ inline void gcode_G28() {
      */
 
     // Pretend the current position is 0,0,0
-    for (int i = X_AXIS; i <= Z_AXIS; i++) current_position[i] = 0;
+    // This is like quick_home_xy() but for 3 towers.
+    current_position[X_AXIS] = current_position[Y_AXIS] = current_position[Z_AXIS] = 0.0;
     sync_plan_position();
 
     // Move all carriages up together until the first endstop is hit.
-    for (int i = X_AXIS; i <= Z_AXIS; i++) destination[i] = 3 * (Z_MAX_LENGTH);
+    current_position[X_AXIS] = current_position[Y_AXIS] = current_position[Z_AXIS] = 3.0 * (Z_MAX_LENGTH);
     feedrate_mm_m = 1.732 * homing_feedrate_mm_m[X_AXIS];
-    line_to_destination();
+    line_to_current_position();
     stepper.synchronize();
     endstops.hit_on_purpose(); // clear endstop hit flags
+    current_position[X_AXIS] = current_position[Y_AXIS] = current_position[Z_AXIS] = 0.0;
 
-    // Destination reached
-    for (int i = X_AXIS; i <= Z_AXIS; i++) current_position[i] = destination[i];
-
-    // take care of back off and rehome now we are all at the top
+    // take care of back off and rehome. Now one carriage is at the top.
     HOMEAXIS(X);
     HOMEAXIS(Y);
     HOMEAXIS(Z);
@@ -3213,9 +3209,6 @@ inline void gcode_G28() {
 #endif
 
 #if ENABLED(MESH_BED_LEVELING)
-
-  enum MeshLevelingState { MeshReport, MeshStart, MeshNext, MeshSet, MeshSetZOffset, MeshReset };
-
   inline void _mbl_goto_xy(float x, float y) {
     float old_feedrate_mm_m = feedrate_mm_m;
     feedrate_mm_m = homing_feedrate_mm_m[X_AXIS];
@@ -5325,7 +5318,7 @@ inline void gcode_M200() {
     if (volumetric_enabled) {
       filament_size[target_extruder] = code_value_linear_units();
       // make sure all extruders have some sane value for the filament size
-      for (int i = 0; i < COUNT(filament_size); i++)
+      for (uint8_t i = 0; i < COUNT(filament_size); i++)
         if (! filament_size[i]) filament_size[i] = DEFAULT_NOMINAL_FILAMENT_DIA;
     }
   }
@@ -6825,7 +6818,7 @@ inline void gcode_T(uint8_t tmp_extruder) {
             // <0 if the new nozzle is higher, >0 if lower. A bigger raise when lower.
             float z_diff = hotend_offset[Z_AXIS][active_extruder] - hotend_offset[Z_AXIS][tmp_extruder],
                   z_raise = 0.3 + (z_diff > 0.0 ? z_diff : 0.0);
-          
+
             // Always raise by some amount
             planner.buffer_line(
               current_position[X_AXIS],
@@ -6836,10 +6829,10 @@ inline void gcode_T(uint8_t tmp_extruder) {
               active_extruder
             );
             stepper.synchronize();
-          
+
             move_extruder_servo(active_extruder);
             delay(500);
-          
+
             // Move back down, if needed
             if (z_raise != z_diff) {
               planner.buffer_line(
@@ -6853,7 +6846,7 @@ inline void gcode_T(uint8_t tmp_extruder) {
               stepper.synchronize();
             }
           #endif
-          
+
           /**
            * Set current_position to the position of the new nozzle.
            * Offsets are based on linear distance, so we need to get
@@ -6906,7 +6899,7 @@ inline void gcode_T(uint8_t tmp_extruder) {
             current_position[Z_AXIS] += offset_vec.z;
 
           #else // !AUTO_BED_LEVELING_FEATURE
-  
+
             float xydiff[2] = {
               hotend_offset[X_AXIS][tmp_extruder] - hotend_offset[X_AXIS][active_extruder],
               hotend_offset[Y_AXIS][tmp_extruder] - hotend_offset[Y_AXIS][active_extruder]
@@ -6930,7 +6923,7 @@ inline void gcode_T(uint8_t tmp_extruder) {
               }
 
             #endif // MESH_BED_LEVELING
-  
+
           #endif // !AUTO_BED_LEVELING_FEATURE
 
           #if ENABLED(DEBUG_LEVELING_FEATURE)
@@ -6993,7 +6986,7 @@ inline void gcode_T(uint8_t tmp_extruder) {
         SERIAL_ECHOLNPGM("<<< gcode_T");
       }
     #endif
-  
+
     SERIAL_ECHO_START;
     SERIAL_ECHOPGM(MSG_ACTIVE_EXTRUDER);
     SERIAL_PROTOCOLLN((int)active_extruder);
@@ -8695,6 +8688,6 @@ float calculate_volumetric_multiplier(float diameter) {
 }
 
 void calculate_volumetric_multipliers() {
-  for (int i = 0; i < COUNT(filament_size); i++)
+  for (uint8_t i = 0; i < COUNT(filament_size); i++)
     volumetric_multiplier[i] = calculate_volumetric_multiplier(filament_size[i]);
 }
diff --git a/Marlin/cardreader.h b/Marlin/cardreader.h
index 78280fc..31b8238 100644
--- a/Marlin/cardreader.h
+++ b/Marlin/cardreader.h
@@ -28,7 +28,7 @@
 #define MAX_DIR_DEPTH 10          // Maximum folder depth
 
 #include "SdFile.h"
-enum LsAction { LS_SerialPrint, LS_Count, LS_GetFilename };
+#include "enum.h"
 
 class CardReader {
 public:
diff --git a/Marlin/dogm_bitmaps.h b/Marlin/dogm_bitmaps.h
index 6b6541b..e020d24 100644
--- a/Marlin/dogm_bitmaps.h
+++ b/Marlin/dogm_bitmaps.h
@@ -21,8 +21,14 @@
  */
 
 /**
- * BitMap for splashscreen
- * Generated with: http://www.digole.com/tools/PicturetoC_Hex_converter.php
+ * Standard Marlin Bitmap for splashscreen
+ *
+ * You may use one of the following tools to generate the C++ bitmap array from
+ * a black and white image:
+ *
+ *  - http://www.marlinfw.org/tools/u8glib/converter.html
+ *  - http://www.digole.com/tools/PicturetoC_Hex_converter.php
+ *
  * Please note that using the high-res version takes 402Bytes of PROGMEM.
  */
 
diff --git a/Marlin/endstops.h b/Marlin/endstops.h
index e5d541c..22c2468 100644
--- a/Marlin/endstops.h
+++ b/Marlin/endstops.h
@@ -27,7 +27,7 @@
 #ifndef ENDSTOPS_H
 #define ENDSTOPS_H
 
-enum EndstopEnum {X_MIN = 0, Y_MIN = 1, Z_MIN = 2, Z_MIN_PROBE = 3, X_MAX = 4, Y_MAX = 5, Z_MAX = 6, Z2_MIN = 7, Z2_MAX = 8};
+#include "enum.h"
 
 class Endstops {
 
@@ -42,7 +42,7 @@ class Endstops {
       static byte
     #endif
         current_endstop_bits, old_endstop_bits;
-        
+
     Endstops() {};
 
     /**
diff --git a/Marlin/enum.h b/Marlin/enum.h
new file mode 100644
index 0000000..fe369c2
--- /dev/null
+++ b/Marlin/enum.h
@@ -0,0 +1,190 @@
+/**
+ * Marlin 3D Printer Firmware
+ * Copyright (C) 2016 MarlinFirmware [https://github.com/MarlinFirmware/Marlin]
+ *
+ * Based on Sprinter and grbl.
+ * Copyright (C) 2011 Camiel Gubbels / Erik van der Zalm
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#ifndef __ENUM_H__
+#define __ENUM_H__
+
+/**
+ * Axis indices as enumerated constants
+ *
+ * Special axis:
+ *  - A_AXIS and B_AXIS are used by COREXY printers
+ *  - X_HEAD and Y_HEAD is used for systems that don't have a 1:1 relationship
+ *    between X_AXIS and X Head movement, like CoreXY bots
+ */
+enum AxisEnum {
+  NO_AXIS = -1,
+  X_AXIS  = 0,
+  A_AXIS  = 0,
+  Y_AXIS  = 1,
+  B_AXIS  = 1,
+  Z_AXIS  = 2,
+  C_AXIS  = 2,
+  E_AXIS  = 3,
+  X_HEAD  = 4,
+  Y_HEAD  = 5,
+  Z_HEAD  = 5
+};
+
+typedef enum {
+  LINEARUNIT_MM,
+  LINEARUNIT_INCH
+} LinearUnit;
+
+typedef enum {
+  TEMPUNIT_C,
+  TEMPUNIT_K,
+  TEMPUNIT_F
+} TempUnit;
+
+/**
+ * Debug flags
+ * Not yet widely applied
+ */
+enum DebugFlags {
+  DEBUG_NONE          = 0,
+  DEBUG_ECHO          = _BV(0), ///< Echo commands in order as they are processed
+  DEBUG_INFO          = _BV(1), ///< Print messages for code that has debug output
+  DEBUG_ERRORS        = _BV(2), ///< Not implemented
+  DEBUG_DRYRUN        = _BV(3), ///< Ignore temperature setting and E movement commands
+  DEBUG_COMMUNICATION = _BV(4), ///< Not implemented
+  DEBUG_LEVELING      = _BV(5)  ///< Print detailed output for homing and leveling
+};
+
+enum EndstopEnum {
+  X_MIN,
+  Y_MIN,
+  Z_MIN,
+  Z_MIN_PROBE,
+  X_MAX,
+  Y_MAX,
+  Z_MAX,
+  Z2_MIN,
+  Z2_MAX
+};
+
+/**
+ * Temperature
+ * Stages in the ISR loop
+ */
+enum TempState {
+  PrepareTemp_0,
+  MeasureTemp_0,
+  PrepareTemp_BED,
+  MeasureTemp_BED,
+  PrepareTemp_1,
+  MeasureTemp_1,
+  PrepareTemp_2,
+  MeasureTemp_2,
+  PrepareTemp_3,
+  MeasureTemp_3,
+  Prepare_FILWIDTH,
+  Measure_FILWIDTH,
+  StartupDelay // Startup, delay initial temp reading a tiny bit so the hardware can settle
+};
+
+#if ENABLED(EMERGENCY_PARSER)
+  enum e_parser_state {
+    state_RESET,
+    state_N,
+    state_M,
+    state_M1,
+    state_M10,
+    state_M108,
+    state_M11,
+    state_M112,
+    state_M4,
+    state_M41,
+    state_M410,
+    state_IGNORE // to '\n'
+  };
+#endif
+
+#if ENABLED(FILAMENT_CHANGE_FEATURE)
+  enum FilamentChangeMenuResponse {
+    FILAMENT_CHANGE_RESPONSE_WAIT_FOR,
+    FILAMENT_CHANGE_RESPONSE_EXTRUDE_MORE,
+    FILAMENT_CHANGE_RESPONSE_RESUME_PRINT
+  };
+
+  #if ENABLED(ULTIPANEL)
+    enum FilamentChangeMessage {
+      FILAMENT_CHANGE_MESSAGE_INIT,
+      FILAMENT_CHANGE_MESSAGE_UNLOAD,
+      FILAMENT_CHANGE_MESSAGE_INSERT,
+      FILAMENT_CHANGE_MESSAGE_LOAD,
+      FILAMENT_CHANGE_MESSAGE_EXTRUDE,
+      FILAMENT_CHANGE_MESSAGE_OPTION,
+      FILAMENT_CHANGE_MESSAGE_RESUME,
+      FILAMENT_CHANGE_MESSAGE_STATUS
+    };
+  #endif
+#endif
+
+/**
+ * States for managing Marlin and host communication
+ * Marlin sends messages if blocked or busy
+ */
+#if ENABLED(HOST_KEEPALIVE_FEATURE)
+  enum MarlinBusyState {
+    NOT_BUSY,           // Not in a handler
+    IN_HANDLER,         // Processing a GCode
+    IN_PROCESS,         // Known to be blocking command input (as in G29)
+    PAUSED_FOR_USER,    // Blocking pending any input
+    PAUSED_FOR_INPUT    // Blocking pending text input (concept)
+  };
+#endif
+
+#if ENABLED(MESH_BED_LEVELING)
+  enum MeshLevelingState {
+    MeshReport,
+    MeshStart,
+    MeshNext,
+    MeshSet,
+    MeshSetZOffset,
+    MeshReset
+  };
+
+  enum MBLStatus {
+    MBL_STATUS_NONE = 0,
+    MBL_STATUS_HAS_MESH_BIT = 0,
+    MBL_STATUS_ACTIVE_BIT = 1
+  };
+#endif
+
+/**
+ * SD Card
+ */
+enum LsAction { LS_SerialPrint, LS_Count, LS_GetFilename };
+
+/**
+ * Ultra LCD
+ */
+enum LCDViewAction {
+  LCDVIEW_NONE,
+  LCDVIEW_REDRAW_NOW,
+  LCDVIEW_CALL_REDRAW_NEXT,
+  LCDVIEW_CLEAR_CALL_REDRAW,
+  LCDVIEW_CALL_NO_REDRAW
+};
+
+#endif // __ENUM_H__
diff --git a/Marlin/example_configurations/Cartesio/_Bootscreen.h b/Marlin/example_configurations/Cartesio/_Bootscreen.h
index 254fbdf..93de4f1 100644
--- a/Marlin/example_configurations/Cartesio/_Bootscreen.h
+++ b/Marlin/example_configurations/Cartesio/_Bootscreen.h
@@ -19,77 +19,85 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
+
+/**
+ * Custom Bitmap for splashscreen
+ *
+ * You may use one of the following tools to generate the C++ bitmap array from
+ * a black and white image:
+ *
+ *  - http://www.marlinfw.org/tools/u8glib/converter.html
+ *  - http://www.digole.com/tools/PicturetoC_Hex_converter.php
+ */
 #include <avr/pgmspace.h>
 
-#if ENABLED(SHOW_BOOTSCREEN) && ENABLED(SHOW_CUSTOM_BOOTSCREEN)
-  #define CUSTOM_BOOTSCREEN_TIMEOUT   2500
-  #define CUSTOM_BOOTSCREEN_BMPWIDTH  63
-  #define CUSTOM_BOOTSCREEN_BMPHEIGHT 64
+#define CUSTOM_BOOTSCREEN_TIMEOUT   2500
+#define CUSTOM_BOOTSCREEN_BMPWIDTH  63
+#define CUSTOM_BOOTSCREEN_BMPHEIGHT 64
 
-  const unsigned char 81x0i84fkcmoqbu7vte29[512] PROGMEM = {
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00,
-    0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00,
-    0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00,
-    0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
-    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
-    0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
-    0x00, 0x0f, 0x07, 0x87, 0xff, 0xff, 0xe0, 0x00,
-    0x00, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0x00,
-    0x01, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0x80,
-    0x03, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0x80,
-    0x07, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xe1, 0xc0,
-    0x07, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xe0,
-    0x0f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xe0,
-    0x0f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xf0,
-    0x1f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xf0,
-    0x1f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xe1, 0xf0,
-    0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0xf8,
-    0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0xf8,
-    0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0xf8,
-    0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xe1, 0xf8,
-    0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
-    0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
-    0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
-    0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
-    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
-    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
-    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
-    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
-    0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
-    0x7f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xfc,
-    0x7f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xfc,
-    0x7f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xfc,
-    0x3f, 0x0f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
-    0x3f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
-    0x3f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
-    0x3f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
-    0x1f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf0,
-    0x1f, 0x0f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf0,
-    0x1f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xe0,
-    0x0f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xe0,
-    0x0f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xc0,
-    0x07, 0x0f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xc0,
-    0x03, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0x80,
-    0x03, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0x00,
-    0x01, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf0, 0x00,
-    0x00, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf0, 0x00,
-    0x00, 0x0f, 0xff, 0xff, 0xc3, 0xc1, 0xe0, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
-    0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
-    0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
-    0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
-    0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00,
-    0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00,
-    0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-  };
-#endif
+const unsigned char 81x0i84fkcmoqbu7vte29[512] PROGMEM = {
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00,
+  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00,
+  0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00,
+  0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00,
+  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
+  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
+  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x0f, 0x07, 0x87, 0xff, 0xff, 0xe0, 0x00,
+  0x00, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0x00,
+  0x01, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0x80,
+  0x03, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0x80,
+  0x07, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xe1, 0xc0,
+  0x07, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xe0,
+  0x0f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xe0,
+  0x0f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xf0,
+  0x1f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xf0,
+  0x1f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xe1, 0xf0,
+  0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0xf8,
+  0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0xf8,
+  0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xf1, 0xf8,
+  0x3f, 0x1f, 0x8f, 0xc7, 0xff, 0xff, 0xe1, 0xf8,
+  0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
+  0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
+  0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
+  0x7f, 0x1f, 0x8f, 0xc7, 0xc0, 0x00, 0x01, 0xfc,
+  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
+  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
+  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
+  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
+  0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc,
+  0x7f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xfc,
+  0x7f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xfc,
+  0x7f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xfc,
+  0x3f, 0x0f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
+  0x3f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
+  0x3f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
+  0x3f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf8,
+  0x1f, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf0,
+  0x1f, 0x0f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xf0,
+  0x1f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xe0,
+  0x0f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xe0,
+  0x0f, 0x00, 0x00, 0x07, 0xc7, 0xe3, 0xf1, 0xc0,
+  0x07, 0x0f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0xc0,
+  0x03, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0x80,
+  0x03, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf1, 0x00,
+  0x01, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf0, 0x00,
+  0x00, 0x1f, 0xff, 0xff, 0xc7, 0xe3, 0xf0, 0x00,
+  0x00, 0x0f, 0xff, 0xff, 0xc3, 0xc1, 0xe0, 0x00,
+  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00,
+  0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00,
+  0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
+  0x00, 0x01, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
+  0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0x00,
+  0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00,
+  0x00, 0x00, 0x07, 0xff, 0xff, 0x80, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x7f, 0xf8, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+};
diff --git a/Marlin/example_configurations/Hephestos_2/_Bootscreen.h b/Marlin/example_configurations/Hephestos_2/_Bootscreen.h
index 7e7f8f4..9819264 100644
--- a/Marlin/example_configurations/Hephestos_2/_Bootscreen.h
+++ b/Marlin/example_configurations/Hephestos_2/_Bootscreen.h
@@ -19,77 +19,85 @@
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  *
  */
+
+/**
+ * Custom Bitmap for splashscreen
+ *
+ * You may use one of the following tools to generate the C++ bitmap array from
+ * a black and white image:
+ *
+ *  - http://www.marlinfw.org/tools/u8glib/converter.html
+ *  - http://www.digole.com/tools/PicturetoC_Hex_converter.php
+ */
 #include <avr/pgmspace.h>
 
-#if ENABLED(SHOW_BOOTSCREEN) && ENABLED(SHOW_CUSTOM_BOOTSCREEN)
-  #define CUSTOM_BOOTSCREEN_TIMEOUT   2500
-  #define CUSTOM_BOOTSCREEN_BMPWIDTH  62
-  #define CUSTOM_BOOTSCREEN_BMPHEIGHT 64
+#define CUSTOM_BOOTSCREEN_TIMEOUT   2500
+#define CUSTOM_BOOTSCREEN_BMPWIDTH  62
+#define CUSTOM_BOOTSCREEN_BMPHEIGHT 64
 
-  const unsigned char custom_start_bmp[512] PROGMEM = {
-    0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
-    0x00, 0x03, 0xc0, 0x0f, 0xf0, 0x07, 0x80, 0x00,
-    0x00, 0x07, 0xe0, 0x07, 0xe0, 0x0f, 0xc0, 0x00,
-    0x00, 0x0f, 0xf0, 0x03, 0xc0, 0x1f, 0xe0, 0x00,
-    0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
-    0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
-    0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
-    0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
-    0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
-    0x00, 0x0f, 0xf0, 0x00, 0x00, 0x1f, 0xe0, 0x00,
-    0x00, 0x07, 0xe0, 0x00, 0x00, 0x0f, 0xc0, 0x00,
-    0x00, 0x03, 0xc0, 0x00, 0x00, 0x07, 0x80, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
-    0x1e, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
-    0x3f, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
-    0x7f, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
-    0xff, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
-    0xff, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
-    0xff, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
-    0xff, 0xc0, 0x00, 0x00, 0xf7, 0xc0, 0x1f, 0x80,
-    0xff, 0xc0, 0x00, 0x00, 0xff, 0xf0, 0x7f, 0xc0,
-    0x7f, 0x80, 0x00, 0x00, 0xff, 0xf8, 0xff, 0xe0,
-    0x3f, 0x00, 0x00, 0x00, 0xfc, 0xf8, 0xf0, 0xf8,
-    0x1e, 0x00, 0x00, 0x00, 0xf8, 0x7d, 0xe0, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0xf8, 0x79, 0xf0, 0xf8,
-    0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xff, 0xf8,
-    0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x7f, 0xf8,
-    0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x3f, 0xf8,
-    0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x0e, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
-    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
-  };
-#endif
+const unsigned char custom_start_bmp[512] PROGMEM = {
+  0x00, 0x00, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00,
+  0x00, 0x03, 0xc0, 0x0f, 0xf0, 0x07, 0x80, 0x00,
+  0x00, 0x07, 0xe0, 0x07, 0xe0, 0x0f, 0xc0, 0x00,
+  0x00, 0x0f, 0xf0, 0x03, 0xc0, 0x1f, 0xe0, 0x00,
+  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
+  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
+  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
+  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
+  0x00, 0x1f, 0xf8, 0x00, 0x00, 0x3f, 0xf0, 0x00,
+  0x00, 0x0f, 0xf0, 0x00, 0x00, 0x1f, 0xe0, 0x00,
+  0x00, 0x07, 0xe0, 0x00, 0x00, 0x0f, 0xc0, 0x00,
+  0x00, 0x03, 0xc0, 0x00, 0x00, 0x07, 0x80, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfc,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf8,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+  0x1e, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
+  0x3f, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
+  0x7f, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
+  0xff, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
+  0xff, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
+  0xff, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
+  0xff, 0xc0, 0x00, 0x00, 0xf7, 0xc0, 0x1f, 0x80,
+  0xff, 0xc0, 0x00, 0x00, 0xff, 0xf0, 0x7f, 0xc0,
+  0x7f, 0x80, 0x00, 0x00, 0xff, 0xf8, 0xff, 0xe0,
+  0x3f, 0x00, 0x00, 0x00, 0xfc, 0xf8, 0xf0, 0xf8,
+  0x1e, 0x00, 0x00, 0x00, 0xf8, 0x7d, 0xe0, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0xf0, 0x3d, 0xe0, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0xf8, 0x79, 0xf0, 0xf8,
+  0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0xff, 0xf8,
+  0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x7f, 0xf8,
+  0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x3f, 0xf8,
+  0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x0e, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78,
+};
diff --git a/Marlin/mesh_bed_leveling.h b/Marlin/mesh_bed_leveling.h
index 3aa2e4a..eb668e1 100644
--- a/Marlin/mesh_bed_leveling.h
+++ b/Marlin/mesh_bed_leveling.h
@@ -23,9 +23,6 @@
 #include "Marlin.h"
 
 #if ENABLED(MESH_BED_LEVELING)
-
-  enum MBLStatus { MBL_STATUS_NONE = 0, MBL_STATUS_HAS_MESH_BIT = 0, MBL_STATUS_ACTIVE_BIT = 1 };
-
   #define MESH_X_DIST ((MESH_MAX_X - (MESH_MIN_X))/(MESH_NUM_X_POINTS - 1))
   #define MESH_Y_DIST ((MESH_MAX_Y - (MESH_MIN_Y))/(MESH_NUM_Y_POINTS - 1))
 
diff --git a/Marlin/stopwatch.cpp b/Marlin/stopwatch.cpp
index 042dbfc..ef701a1 100644
--- a/Marlin/stopwatch.cpp
+++ b/Marlin/stopwatch.cpp
@@ -33,7 +33,7 @@ bool Stopwatch::stop() {
   #endif
 
   if (this->isRunning() || this->isPaused()) {
-    this->state = STOPWATCH_STOPPED;
+    this->state = STOPPED;
     this->stopTimestamp = millis();
     return true;
   }
@@ -46,7 +46,7 @@ bool Stopwatch::pause() {
   #endif
 
   if (this->isRunning()) {
-    this->state = STOPWATCH_PAUSED;
+    this->state = PAUSED;
     this->stopTimestamp = millis();
     return true;
   }
@@ -62,7 +62,7 @@ bool Stopwatch::start() {
     if (this->isPaused()) this->accumulator = this->duration();
     else this->reset();
 
-    this->state = STOPWATCH_RUNNING;
+    this->state = RUNNING;
     this->startTimestamp = millis();
     return true;
   }
@@ -74,18 +74,18 @@ void Stopwatch::reset() {
     Stopwatch::debug(PSTR("reset"));
   #endif
 
-  this->state = STOPWATCH_STOPPED;
+  this->state = STOPPED;
   this->startTimestamp = 0;
   this->stopTimestamp = 0;
   this->accumulator = 0;
 }
 
 bool Stopwatch::isRunning() {
-  return (this->state == STOPWATCH_RUNNING) ? true : false;
+  return (this->state == RUNNING) ? true : false;
 }
 
 bool Stopwatch::isPaused() {
-  return (this->state == STOPWATCH_PAUSED) ? true : false;
+  return (this->state == PAUSED) ? true : false;
 }
 
 millis_t Stopwatch::duration() {
diff --git a/Marlin/stopwatch.h b/Marlin/stopwatch.h
index 173b5ef..7094828 100644
--- a/Marlin/stopwatch.h
+++ b/Marlin/stopwatch.h
@@ -28,12 +28,6 @@
 // Print debug messages with M111 S2 (Uses 156 bytes of PROGMEM)
 //#define DEBUG_STOPWATCH
 
-enum StopwatchState {
-  STOPWATCH_STOPPED,
-  STOPWATCH_RUNNING,
-  STOPWATCH_PAUSED
-};
-
 /**
  * @brief Stopwatch class
  * @details This class acts as a timer proving stopwatch functionality including
@@ -41,7 +35,13 @@ enum StopwatchState {
  */
 class Stopwatch {
   private:
-    StopwatchState state;
+    enum State {
+      STOPPED,
+      RUNNING,
+      PAUSED
+    };
+
+    Stopwatch::State state;
     millis_t accumulator;
     millis_t startTimestamp;
     millis_t stopTimestamp;
diff --git a/Marlin/temperature.cpp b/Marlin/temperature.cpp
index beb4f63..db28052 100644
--- a/Marlin/temperature.cpp
+++ b/Marlin/temperature.cpp
@@ -1343,25 +1343,6 @@ void Temperature::disable_all_heaters() {
 #endif //HEATER_0_USES_MAX6675
 
 /**
- * Stages in the ISR loop
- */
-enum TempState {
-  PrepareTemp_0,
-  MeasureTemp_0,
-  PrepareTemp_BED,
-  MeasureTemp_BED,
-  PrepareTemp_1,
-  MeasureTemp_1,
-  PrepareTemp_2,
-  MeasureTemp_2,
-  PrepareTemp_3,
-  MeasureTemp_3,
-  Prepare_FILWIDTH,
-  Measure_FILWIDTH,
-  StartupDelay // Startup, delay initial temp reading a tiny bit so the hardware can settle
-};
-
-/**
  * Get raw temperatures
  */
 void Temperature::set_current_temp_raw() {
diff --git a/Marlin/ultralcd.cpp b/Marlin/ultralcd.cpp
index f96d74c..4a4180a 100755
--- a/Marlin/ultralcd.cpp
+++ b/Marlin/ultralcd.cpp
@@ -54,14 +54,6 @@ static void lcd_status_screen();
 
 millis_t next_lcd_update_ms;
 
-enum LCDViewAction {
-  LCDVIEW_NONE,
-  LCDVIEW_REDRAW_NOW,
-  LCDVIEW_CALL_REDRAW_NEXT,
-  LCDVIEW_CLEAR_CALL_REDRAW,
-  LCDVIEW_CALL_NO_REDRAW
-};
-
 uint8_t lcdDrawUpdate = LCDVIEW_CLEAR_CALL_REDRAW; // Set when the LCD needs to draw, decrements after every draw. Set to 2 in LCD routines so the LCD gets at least 1 full redraw (first redraw is partial)
 
 #if ENABLED(ULTIPANEL)
@@ -133,7 +125,7 @@ uint8_t lcdDrawUpdate = LCDVIEW_CLEAR_CALL_REDRAW; // Set when the LCD needs to
     static void lcd_filament_change_load_message();
     static void lcd_filament_change_extrude_message();
     static void lcd_filament_change_resume_message();
-  #endif 
+  #endif
 
   #if HAS_LCD_CONTRAST
     static void lcd_set_contrast();
@@ -301,7 +293,7 @@ uint8_t lcdDrawUpdate = LCDVIEW_CLEAR_CALL_REDRAW; // Set when the LCD needs to
    *             Scroll as-needed to keep the selected line in view.
    *
    * At this point _thisItemNr equals the total number of items.
-   * 
+   *
    */
 
   // Simple-scroll by using encoderLine as encoderTopLine
@@ -2207,7 +2199,7 @@ void kill_screen(const char* lcd_msg) {
       #endif
       END_SCREEN();
     }
-  
+
     void lcd_filament_change_show_message(FilamentChangeMessage message) {
       switch (message) {
         case FILAMENT_CHANGE_MESSAGE_INIT:
@@ -2507,7 +2499,7 @@ int lcd_strlen_P(const char* s) {
   int j = 0;
   while (pgm_read_byte(s)) {
     #ifdef MAPPER_NON
-      j++; 
+      j++;
     #else
       if ((pgm_read_byte(s) & 0xc0) != 0x80) j++;
     #endif
@@ -2741,7 +2733,11 @@ void lcd_update() {
 void set_utf_strlen(char* s, uint8_t n) {
   uint8_t i = 0, j = 0;
   while (s[i] && (j < n)) {
-    if ((s[i] & 0xC0u) != 0x80u) j++;
+    #if ENABLED(MAPPER_NON)
+      j++;
+    #else
+      if ((s[i] & 0xC0u) != 0x80u) j++;
+    #endif
     i++;
   }
   while (j++ < n) s[i++] = ' ';
diff --git a/Marlin/ultralcd.h b/Marlin/ultralcd.h
index 7a00806..ccb6f50 100644
--- a/Marlin/ultralcd.h
+++ b/Marlin/ultralcd.h
@@ -73,16 +73,6 @@
     void lcd_ignore_click(bool b=true);
 
     #if ENABLED(FILAMENT_CHANGE_FEATURE)
-      enum FilamentChangeMessage {
-        FILAMENT_CHANGE_MESSAGE_INIT,
-        FILAMENT_CHANGE_MESSAGE_UNLOAD,
-        FILAMENT_CHANGE_MESSAGE_INSERT,
-        FILAMENT_CHANGE_MESSAGE_LOAD,
-        FILAMENT_CHANGE_MESSAGE_EXTRUDE,
-        FILAMENT_CHANGE_MESSAGE_OPTION,
-        FILAMENT_CHANGE_MESSAGE_RESUME,
-        FILAMENT_CHANGE_MESSAGE_STATUS
-      };
       void lcd_filament_change_show_message(FilamentChangeMessage message);
     #endif // FILAMENT_CHANGE_FEATURE
 

