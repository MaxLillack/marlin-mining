commit c9cf2174dd7af96e15bfa0a82e30f2877fa46acd (from bd2cd4903e5daedcfebc06b90e7c0e2cf05e5eaa)
Merge: bd2cd49 29bb8d7
Author: ErikZalm <erik@vdzalm.eu>
Date:   Tue May 14 14:58:53 2013 -0700

    Merge pull request #474 from xifle/Marlin_v1
    
    Fixed "Cooldown" Selection not reseting bed temp

diff --git a/Marlin/ultralcd.cpp b/Marlin/ultralcd.cpp
index 3f74e27..4d4f1ce 100644
--- a/Marlin/ultralcd.cpp
+++ b/Marlin/ultralcd.cpp
@@ -252,6 +252,7 @@ void lcd_preheat_pla()
     setTargetBed(plaPreheatHPBTemp);
     fanSpeed = plaPreheatFanSpeed;
     lcd_return_to_status();
+	setWatch();	// heater sanity check timer
 }
 
 void lcd_preheat_abs()
@@ -262,6 +263,16 @@ void lcd_preheat_abs()
     setTargetBed(absPreheatHPBTemp);
     fanSpeed = absPreheatFanSpeed;
     lcd_return_to_status();
+	setWatch();	// heater sanity check timer
+}
+
+static void lcd_cooldown()
+{
+	setTargetHotend0(0);
+	setTargetHotend1(0);
+	setTargetHotend2(0);
+	setTargetBed(0);
+	lcd_return_to_status();
 }
 
 static void lcd_tune_menu()
@@ -299,7 +310,7 @@ static void lcd_prepare_menu()
     //MENU_ITEM(gcode, MSG_SET_ORIGIN, PSTR("G92 X0 Y0 Z0"));
     MENU_ITEM(function, MSG_PREHEAT_PLA, lcd_preheat_pla);
     MENU_ITEM(function, MSG_PREHEAT_ABS, lcd_preheat_abs);
-    MENU_ITEM(gcode, MSG_COOLDOWN, PSTR("M104 S0\nM140 S0"));
+    MENU_ITEM(function, MSG_COOLDOWN, lcd_cooldown);
     MENU_ITEM(submenu, MSG_MOVE_AXIS, lcd_move_menu);
     END_MENU();
 }

commit c9cf2174dd7af96e15bfa0a82e30f2877fa46acd (from 29bb8d7d4fec14f7f90181380ae3e92706404d70)
Merge: bd2cd49 29bb8d7
Author: ErikZalm <erik@vdzalm.eu>
Date:   Tue May 14 14:58:53 2013 -0700

    Merge pull request #474 from xifle/Marlin_v1
    
    Fixed "Cooldown" Selection not reseting bed temp

diff --git a/Marlin/Configuration.h b/Marlin/Configuration.h
index 83944ab..3405dfb 100644
--- a/Marlin/Configuration.h
+++ b/Marlin/Configuration.h
@@ -403,6 +403,9 @@ const bool Z_ENDSTOPS_INVERTING = true; // set to true to invert the logic of th
 // SF send wrong arc g-codes when using Arc Point as fillet procedure
 //#define SF_ARC_FIX
 
+// Support for the BariCUDA Paste Extruder.
+//#define BARICUDA
+
 #include "Configuration_adv.h"
 #include "thermistortables.h"
 
diff --git a/Marlin/Marlin.h b/Marlin/Marlin.h
index 25c5aca..551a553 100644
--- a/Marlin/Marlin.h
+++ b/Marlin/Marlin.h
@@ -186,6 +186,10 @@ extern float add_homeing[3];
 extern float min_pos[3];
 extern float max_pos[3];
 extern int fanSpeed;
+#ifdef BARICUDA
+extern int ValvePressure;
+extern int EtoPPressure;
+#endif
 
 #ifdef FWRETRACT
 extern bool autoretract_enabled;
diff --git a/Marlin/Marlin_main.cpp b/Marlin/Marlin_main.cpp
index 9f2ba7b..0a528ea 100644
--- a/Marlin/Marlin_main.cpp
+++ b/Marlin/Marlin_main.cpp
@@ -101,6 +101,10 @@
 // M115	- Capabilities string
 // M117 - display message
 // M119 - Output Endstop status to serial port
+// M126 - Solenoid Air Valve Open (BariCUDA support by jmil)
+// M127 - Solenoid Air Valve Closed (BariCUDA vent to atmospheric pressure by jmil)
+// M128 - EtoP Open (BariCUDA EtoP = electricity to air pressure transducer by jmil)
+// M129 - EtoP Closed (BariCUDA EtoP = electricity to air pressure transducer by jmil)
 // M140 - Set bed target temp
 // M190 - Wait for bed current temp to reach target temp.
 // M200 - Set filament diameter
@@ -168,6 +172,10 @@ float extruder_offset[2][EXTRUDERS] = {
 #endif
 uint8_t active_extruder = 0;
 int fanSpeed=0;
+#ifdef BARICUDA
+int ValvePressure=0;
+int EtoPPressure=0;
+#endif
 
 #ifdef FWRETRACT
   bool autoretract_enabled=true;
@@ -1168,6 +1176,37 @@ void process_commands()
         fanSpeed = 0;
         break;
     #endif //FAN_PIN
+    #ifdef BARICUDA
+	// PWM for HEATER_1_PIN
+      #if HEATER_1_PIN > -1
+        case 126: //M126 valve open
+          if (code_seen('S')){
+             ValvePressure=constrain(code_value(),0,255);
+          }
+          else {
+            ValvePressure=255;			
+          }
+          break;
+        case 127: //M127 valve closed
+          ValvePressure = 0;
+          break;
+      #endif //HEATER_1_PIN
+
+  	// PWM for HEATER_2_PIN
+      #if HEATER_2_PIN > -1
+        case 128: //M128 valve open
+          if (code_seen('S')){
+             EtoPPressure=constrain(code_value(),0,255);
+          }
+          else {
+            EtoPPressure=255;			
+          }
+          break;
+        case 129: //M129 valve closed
+          EtoPPressure = 0;
+          break;
+      #endif //HEATER_2_PIN
+    #endif
 
     #if (PS_ON_PIN > -1)
       case 80: // M80 - ATX Power On
diff --git a/Marlin/pins.h b/Marlin/pins.h
index 952fa7a..a13c522 100644
--- a/Marlin/pins.h
+++ b/Marlin/pins.h
@@ -1474,7 +1474,11 @@
 #define HEATER_1_PIN 7
 #define TEMP_1_PIN 1
 
+#ifdef BARICUDA
+#define HEATER_2_PIN 6
+#else
 #define HEATER_2_PIN -1
+#endif
 #define TEMP_2_PIN -1
 
 #define E0_STEP_PIN         34
diff --git a/Marlin/planner.cpp b/Marlin/planner.cpp
index 854fd19..1a37cec 100644
--- a/Marlin/planner.cpp
+++ b/Marlin/planner.cpp
@@ -439,12 +439,22 @@ void check_axes_activity()
   unsigned char z_active = 0;
   unsigned char e_active = 0;
   unsigned char tail_fan_speed = fanSpeed;
+  #ifdef BARICUDA
+  unsigned char valve_pressure = 0;
+  unsigned char e_to_p_pressure = 0;
+  unsigned char tail_valve_pressure = 0;
+  unsigned char tail_e_to_p_pressure = 0;
+  #endif
   block_t *block;
 
   if(block_buffer_tail != block_buffer_head)
   {
     uint8_t block_index = block_buffer_tail;
     tail_fan_speed = block_buffer[block_index].fan_speed;
+    #ifdef BARICUDA
+    tail_valve_pressure = block_buffer[block_index].valve_pressure;
+    tail_e_to_p_pressure = block_buffer[block_index].e_to_p_pressure;
+    #endif
     while(block_index != block_buffer_head)
     {
       block = &block_buffer[block_index];
@@ -486,6 +496,36 @@ void check_axes_activity()
 #ifdef AUTOTEMP
   getHighESpeed();
 #endif
+
+#ifdef BARICUDA
+  #if HEATER_1_PIN > -1
+    if (ValvePressure != 0){
+      analogWrite(HEATER_1_PIN,ValvePressure); // If buffer is empty use current valve pressure
+    }
+
+    if((ValvePressure == 0) && (valve_pressure ==0)) {
+      analogWrite(HEATER_1_PIN, 0);
+    }
+
+    if (ValvePressure != 0 && tail_valve_pressure !=0) { 
+      analogWrite(HEATER_1_PIN,tail_valve_pressure);
+    }
+  #endif
+
+  #if HEATER_2_PIN > -1
+    if (EtoPPressure != 0){
+      analogWrite(HEATER_2_PIN,EtoPPressure); // If buffer is empty use current EtoP pressure
+    }
+
+    if((EtoPPressure == 0) && (e_to_p_pressure ==0)) {
+      analogWrite(HEATER_2_PIN, 0);
+    }
+
+    if (EtoPPressure != 0 && tail_e_to_p_pressure !=0) { 
+      analogWrite(HEATER_2_PIN,tail_e_to_p_pressure);
+    }
+  #endif
+#endif
 }
 
 
@@ -559,6 +599,10 @@ void plan_buffer_line(const float &x, const float &y, const float &z, const floa
   }
 
   block->fan_speed = fanSpeed;
+  #ifdef BARICUDA
+  block->valve_pressure = ValvePressure;
+  block->e_to_p_pressure = EtoPPressure;
+  #endif
 
   // Compute direction bits for this block 
   block->direction_bits = 0;
diff --git a/Marlin/planner.h b/Marlin/planner.h
index 9a904e5..703646e 100644
--- a/Marlin/planner.h
+++ b/Marlin/planner.h
@@ -60,6 +60,10 @@ typedef struct {
   unsigned long final_rate;                          // The minimal rate at exit
   unsigned long acceleration_st;                     // acceleration steps/sec^2
   unsigned long fan_speed;
+  #ifdef BARICUDA
+  unsigned long valve_pressure;
+  unsigned long e_to_p_pressure;
+  #endif
   volatile char busy;
 } block_t;
 

