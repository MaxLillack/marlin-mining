commit bce67ec2c921a8e9fa92232c46c4d9a9ee40c8cc (from 5cd7a90b32713ea4538737c652aa1d1a93fe9854)
Merge: 5cd7a90 9b1d248
Author: daid <daid303@gmail.com>
Date:   Sun Nov 18 13:43:07 2012 -0800

    Merge pull request #312 from gege2b/Marlin_v1
    
    Added french translation

diff --git a/Marlin/language.h b/Marlin/language.h
index dc51832..4894121 100644
--- a/Marlin/language.h
+++ b/Marlin/language.h
@@ -352,7 +352,162 @@
 
 
 #if LANGUAGE_CHOICE == 3
-    #error "There is no French translation available yet. Can you help? (you need to choose a different language in order to compile Marlin)"
+
+#define WELCOME_MSG MACHINE_NAME " Pret."
+#define MSG_SD_INSERTED "Carte inseree"
+#define MSG_SD_REMOVED "Carte retiree"
+#define MSG_MAIN " Principal \003"
+#define MSG_AUTOSTART " Demarrage auto."
+#define MSG_DISABLE_STEPPERS " Desactiver moteurs"
+#define MSG_AUTO_HOME " Home auto."
+#define MSG_SET_ORIGIN " Regler origine"
+#define MSG_PREHEAT_PLA " Prechauffage PLA"
+#define MSG_PREHEAT_PLA_SETTINGS " Regl. prechauffe PLA"
+#define MSG_PREHEAT_ABS " Prechauffage ABS"
+#define MSG_PREHEAT_ABS_SETTINGS " Regl. prechauffe ABS"
+#define MSG_COOLDOWN " Refroidissement"
+#define MSG_EXTRUDE " Extrusion"
+#define MSG_RETRACT " Retractation"
+#define MSG_PREHEAT_PLA " Prechauffage PLA"
+#define MSG_PREHEAT_ABS " Prechauffage ABS"
+#define MSG_MOVE_AXIS " Deplacer axe \x7E"
+#define MSG_SPEED " Vitesse:"
+#define MSG_NOZZLE " \002Buse:"
+#define MSG_NOZZLE1 " \002Buse2:"
+#define MSG_NOZZLE2 " \002Buse3:"
+#define MSG_BED " \002Lit:"
+#define MSG_FAN_SPEED " Vitesse ventilateur:"
+#define MSG_FLOW " Flux:"
+#define MSG_CONTROL " Controle \003"
+#define MSG_MIN " \002 Min:"
+#define MSG_MAX " \002 Max:"
+#define MSG_FACTOR " \002 Facteur:"
+#define MSG_AUTOTEMP " Temp. Auto.:"
+#define MSG_ON "Marche "
+#define MSG_OFF "Arret"
+#define MSG_PID_P " PID-P: "
+#define MSG_PID_I " PID-I: "
+#define MSG_PID_D " PID-D: "
+#define MSG_PID_C " PID-C: "
+#define MSG_ACC " Acc:"
+#define MSG_VXY_JERK " Vxy-jerk: "
+#define MSG_VMAX " Vmax "
+#define MSG_X "x:"
+#define MSG_Y "y:"
+#define MSG_Z "z:"
+#define MSG_E "e:"
+#define MSG_VMIN " Vmin:"
+#define MSG_VTRAV_MIN " Vdepl min:"
+#define MSG_AMAX " Amax "
+#define MSG_A_RETRACT " A-retract:"
+#define MSG_XSTEPS " Xpas/mm:"
+#define MSG_YSTEPS " Ypas/mm:"
+#define MSG_ZSTEPS " Zpas/mm:"
+#define MSG_ESTEPS " Epas/mm:"
+#define MSG_MAIN_WIDE " Principal \003"
+#define MSG_RECTRACT_WIDE " Rectractater \x7E"
+#define MSG_TEMPERATURE_WIDE " Temperature \x7E"
+#define MSG_TEMPERATURE_RTN " Temperature \003"
+#define MSG_MOTION_WIDE " Mouvement \x7E"
+#define MSG_STORE_EPROM " Sauvegarder memoire"
+#define MSG_LOAD_EPROM " Lire memoire"
+#define MSG_RESTORE_FAILSAFE " Restaurer memoire"
+#define MSG_REFRESH "\004Actualiser"
+#define MSG_WATCH " Surveiller \003"
+#define MSG_PREPARE " Preparer \x7E"
+#define MSG_PREPARE_ALT " Prepare \003"
+#define MSG_CONTROL_ARROW " Controle \x7E"
+#define MSG_RETRACT_ARROW " Retracter \x7E"
+#define MSG_TUNE " Regler \x7E"
+#define MSG_PAUSE_PRINT " Pause impression \x7E"
+#define MSG_RESUME_PRINT " Reprendre impression \x7E"
+#define MSG_STOP_PRINT " Arreter impression \x7E"
+#define MSG_CARD_MENU " Menu carte \x7E"
+#define MSG_NO_CARD " Pas de carte"
+#define MSG_DWELL "Repos..."
+#define MSG_USERWAIT "Attente de l'utilisateur..."
+#define MSG_NO_MOVE "Aucun mouvement."
+#define MSG_PART_RELEASE "Relache partielle"
+#define MSG_KILLED "TUE."
+#define MSG_STOPPED "STOPPE."
+#define MSG_STEPPER_RELEASED "RELACHE."
+#define MSG_CONTROL_RETRACT " Retractation mm:"
+#define MSG_CONTROL_RETRACTF " Retractation F:"
+#define MSG_CONTROL_RETRACT_ZLIFT " Hop mm:"
+#define MSG_CONTROL_RETRACT_RECOVER " UnRet +mm:"
+#define MSG_CONTROL_RETRACT_RECOVERF " UnRet F:"
+#define MSG_AUTORETRACT " Retract. Auto.:"
+        #define MSG_SERIAL_ERROR_MENU_STRUCTURE "Erreur avec MenuStructure."
+
+// Serial Console Messages
+
+#define MSG_Enqueing "Mise en tampon \""
+#define MSG_POWERUP "Allumage"
+#define MSG_EXTERNAL_RESET " RAZ Externe"
+#define MSG_BROWNOUT_RESET " RAZ defaut alim."
+#define MSG_WATCHDOG_RESET " RAZ Watchdog"
+#define MSG_SOFTWARE_RESET " RAZ logicielle"
+#define MSG_MARLIN "Marlin "
+#define MSG_AUTHOR " | Auteur: "
+#define MSG_CONFIGURATION_VER " Derniere MaJ: "
+#define MSG_FREE_MEMORY " Memoire libre: "
+#define MSG_PLANNER_BUFFER_BYTES " PlannerBufferBytes: "
+#define MSG_OK "ok"
+#define MSG_FILE_SAVED "Fichier enregistre."
+#define MSG_ERR_LINE_NO "Le numero de ligne n'est pas la derniere ligne + 1, derniere ligne: "
+#define MSG_ERR_CHECKSUM_MISMATCH "Erreur somme de controle, derniere ligne: "
+#define MSG_ERR_NO_CHECKSUM "Pas de somme de controle avec le numero de ligne, derniere ligne: "
+#define MSG_ERR_NO_LINENUMBER_WITH_CHECKSUM "Pas de numero de ligne avec somme de controle, derniere ligne: "
+#define MSG_FILE_PRINTED "Impression terminee"
+#define MSG_BEGIN_FILE_LIST "Debut de la liste de fichiers"
+#define MSG_END_FILE_LIST "Fin de la liste de fichiers"
+#define MSG_M104_INVALID_EXTRUDER "M104 Extruder invalide"
+#define MSG_M105_INVALID_EXTRUDER "M105 Extruder invalide"
+#define MSG_ERR_NO_THERMISTORS "Pas de thermistor, pas de temperature"
+#define MSG_M109_INVALID_EXTRUDER "M109 Extruder invalide "
+#define MSG_HEATING "En chauffe..."
+#define MSG_HEATING_COMPLETE "Chauffe terminee."
+#define MSG_BED_HEATING "Chauffe du lit."
+#define MSG_BED_DONE "Chauffe du lit terminee."
+#define MSG_M115_REPORT "FIRMWARE_NAME:Marlin V1; Sprinter/grbl mashup for gen6 FIRMWARE_URL:" FIRMWARE_URL " PROTOCOL_VERSION:" PROTOCOL_VERSION " MACHINE_TYPE:" MACHINE_NAME " EXTRUDER_COUNT:" STRINGIFY(EXTRUDERS) "\n"
+#define MSG_COUNT_X " Compteur X: "
+#define MSG_ERR_KILLED "Impression arretee. kill() appelee!"
+#define MSG_ERR_STOPPED "Impression arretee a cause d'erreurs. Corriger les erreurs et utiliser M999 pour la reprendre. (Temperature remise a zero. Reactivez la apres redemarrage)"
+#define MSG_RESEND "Renvoie: "
+#define MSG_UNKNOWN_COMMAND "Commande inconnue: \""
+#define MSG_ACTIVE_EXTRUDER "Extrudeur actif: "
+#define MSG_INVALID_EXTRUDER "Extrudeur invalide"
+#define MSG_X_MIN "x_min: "
+#define MSG_X_MAX "x_max: "
+#define MSG_Y_MIN "y_min: "
+#define MSG_Y_MAX "y_max: "
+#define MSG_Z_MIN "z_min: "
+#define MSG_Z_MAX "z_max: "
+#define MSG_M119_REPORT "Affichage du status des fin de course"
+#define MSG_ENDSTOP_HIT "DECLENCHE"
+#define MSG_ENDSTOP_OPEN "OUVERT"
+
+#define MSG_SD_CANT_OPEN_SUBDIR "Impossible d'ouvrir le sous-repertoire"
+#define MSG_SD_INIT_FAIL "Echec de l'initialisation de la SD"
+#define MSG_SD_VOL_INIT_FAIL "Echec de volume.init"
+#define MSG_SD_OPENROOT_FAIL "Echec openRoot"
+#define MSG_SD_CARD_OK "Carte SD Ok"
+#define MSG_SD_WORKDIR_FAIL "Echec d'ouverture workDir"
+#define MSG_SD_OPEN_FILE_FAIL "Echec d'ouverture, Fichier: "
+#define MSG_SD_FILE_OPENED "Fichier ouvert: "
+#define MSG_SD_SIZE " Taille: "
+#define MSG_SD_FILE_SELECTED "Fichier selectionne"
+#define MSG_SD_WRITE_TO_FILE "Ecriture dans le fichier: "
+#define MSG_SD_PRINTING_BYTE "Octet impression SD "
+#define MSG_SD_NOT_PRINTING "Pas d'impression SD"
+#define MSG_SD_ERR_WRITE_TO_FILE "Erreur d'ecriture dans le fichier"
+#define MSG_SD_CANT_ENTER_SUBDIR "Impossible d'entrer dans le sous-repertoire: "
+
+#define MSG_STEPPER_TO_HIGH "Steprate trop eleve: "
+#define MSG_ENDSTOPS_HIT "Fin de course atteint: "
+#define MSG_ERR_COLD_EXTRUDE_STOP " Extrusion a froid evitee"
+#define MSG_ERR_LONG_EXTRUDE_STOP " Extrusion longue evitee"
+	
 #endif
 
 

commit bce67ec2c921a8e9fa92232c46c4d9a9ee40c8cc (from 9b1d2483a0f43512fa7fffdf45fc9070c732b273)
Merge: 5cd7a90 9b1d248
Author: daid <daid303@gmail.com>
Date:   Sun Nov 18 13:43:07 2012 -0800

    Merge pull request #312 from gege2b/Marlin_v1
    
    Added french translation

diff --git a/Marlin/createTemperatureLookupMarlin.py b/Marlin/createTemperatureLookupMarlin.py
new file mode 100644
index 0000000..e09294e
--- /dev/null
+++ b/Marlin/createTemperatureLookupMarlin.py
@@ -0,0 +1,138 @@
+#!/usr/bin/python
+#
+# Creates a C code lookup table for doing ADC to temperature conversion
+# on a microcontroller
+# based on: http://hydraraptor.blogspot.com/2007/10/measuring-temperature-easy-way.html
+"""Thermistor Value Lookup Table Generator
+
+Generates lookup to temperature values for use in a microcontroller in C format based on: 
+http://hydraraptor.blogspot.com/2007/10/measuring-temperature-easy-way.html
+
+The main use is for Arduino programs that read data from the circuit board described here:
+http://make.rrrf.org/ts-1.0
+
+Usage: python createTemperatureLookup.py [options]
+
+Options:
+  -h, --help        show this help
+  --rp=...          pull-up resistor
+  --t0=ttt:rrr      low temperature temperature:resistance point (around 25C)
+  --t1=ttt:rrr      middle temperature temperature:resistance point (around 150C)
+  --t2=ttt:rrr      high temperature temperature:resistance point (around 250C)
+  --num-temps=...   the number of temperature points to calculate (default: 20)
+"""
+
+from math import *
+import sys
+import getopt
+
+class Thermistor:
+    "Class to do the thermistor maths"
+    def __init__(self, rp, t1, r1, t2, r2, t3, r3):
+        t1 = t1 + 273.15               # low temperature (25C)
+        r1 = r1                        # resistance at low temperature
+        t2 = t2 + 273.15               # middle temperature (150C)
+        r2 = r2                        # resistance at middle temperature
+        t3 = t3 + 273.15               # high temperature (250C)
+        r3 = r3                        # resistance at high temperature
+        self.rp = rp                   # pull-up resistance
+        self.vadc = 5.0                # ADC reference
+        self.vcc = 5.0                 # supply voltage to potential divider
+        a1 = log(r1)
+        a2 = log(r2)
+        a3 = log(r3)
+        z = a1 - a2
+        y = a1 - a3
+        x = 1/t1 - 1/t2
+        w = 1/t1 - 1/t3
+        v = pow(a1,3) - pow(a2,3)
+        u = pow(a1,3) - pow(a3,3)
+        c3 = (x-z*w/y)/(v-z*u/y)
+        c2 = (x-c3*v)/z
+        c1 = 1/t1-c3*pow(a1,3)-c2*a1
+        self.c1 = c1
+        self.c2 = c2
+        self.c3 = c3
+
+    def temp(self,adc):
+        "Convert ADC reading into a temperature in Celcius"
+        v = adc * self.vadc / (1024 * 16)   # convert the 10 bit ADC value to a voltage
+        r = self.rp * v / (self.vcc - v)    # resistance of thermistor
+        lnr = log(r)
+        Tinv = self.c1 + (self.c2*lnr) + (self.c3*pow(lnr,3))
+        return (1/Tinv) - 273.15        # temperature
+
+    def adc(self,temp):
+        "Convert temperature into a ADC reading"
+        y = (self.c1 - (1/(temp+273.15))) / (2*self.c3)
+	x = sqrt(pow(self.c2 / (3*self.c3),3) + pow(y,2))
+        r = exp(pow(x-y,1.0/3) - pow(x+y,1.0/3)) # resistance of thermistor
+        return (r / (self.rp + r)) * (1024*16)
+
+def main(argv):
+
+    rp = 4700;
+    t1 = 25;
+    r1 = 100000;
+    t2 = 150;
+    r2 = 1641.9;
+    t3 = 250;
+    r3 = 226.15;
+    num_temps = int(36);
+    
+    try:
+        opts, args = getopt.getopt(argv, "h", ["help", "rp=", "t1=", "t2=", "t3=", "num-temps="])
+    except getopt.GetoptError:
+        usage()
+        sys.exit(2)
+        
+    for opt, arg in opts:
+        if opt in ("-h", "--help"):
+            usage()
+            sys.exit()
+        elif opt == "--rp":
+            rp = int(arg)
+        elif opt == "--t1":
+            arg =  arg.split(':')
+            t1 = float( arg[0])
+            r1 = float( arg[1])
+        elif opt == "--t2":
+            arg =  arg.split(':')
+            t2 = float( arg[0])
+            r2 = float( arg[1])
+        elif opt == "--t3":
+            arg =  arg.split(':')
+            t3 = float( arg[0])
+            r3 = float( arg[1])
+        elif opt == "--num-temps":
+            num_temps =  int(arg)
+
+    max_adc = (1024 * 16) - 1
+    min_temp = 0
+    max_temp = 350
+    increment = int(max_adc/(num_temps-1));
+            
+    t = Thermistor(rp, t1, r1, t2, r2, t3, r3)
+    tmp = (min_temp - max_temp) / (num_temps-1)
+    print tmp
+    temps = range(max_temp, min_temp + tmp, tmp);
+
+    print "// Thermistor lookup table for Marlin"
+    print "// ./createTemperatureLookup.py --rp=%s --t1=%s:%s --t2=%s:%s --t3=%s:%s --num-temps=%s" % (rp, t1, r1, t2, r2, t3, r3, num_temps)
+    print "#define NUMTEMPS %s" % (len(temps))
+    print "short temptable[NUMTEMPS][2] = {"
+
+    counter = 0
+    for temp in temps:
+        counter = counter +1
+        if counter == len(temps):
+            print "   {%s, %s}" % (int(t.adc(temp)), temp)
+        else:
+            print "   {%s, %s}," % (int(t.adc(temp)), temp)
+    print "};"
+    
+def usage():
+    print __doc__
+
+if __name__ == "__main__":
+    main(sys.argv[1:])

