// EXCERPT FROM MERGE  Marlin/Marlin_main.cpp

<<<<<<< HEAD
    int state = 0;
    if (code_seen('S') || code_seen('s')) {
      state = code_value_long();
      if (state < 0 || state > 3) {
        SERIAL_PROTOCOLPGM("S out of range (0-3).\n");
        return;
      }
    }

    if (state == 0) { // Produce a mesh report
      if (mbl.active) {
        SERIAL_PROTOCOLPGM("Num X,Y: ");
        SERIAL_PROTOCOL(MESH_NUM_X_POINTS);
        SERIAL_PROTOCOLPGM(",");
        SERIAL_PROTOCOL(MESH_NUM_Y_POINTS);
        SERIAL_PROTOCOLPGM("\nZ search height: ");
        SERIAL_PROTOCOL(MESH_HOME_SEARCH_Z);
        SERIAL_PROTOCOLPGM("\nMeasured points:\n");              
        for (int y=0; y<MESH_NUM_Y_POINTS; y++) {
          for (int x=0; x<MESH_NUM_X_POINTS; x++) {
            SERIAL_PROTOCOLPGM("  ");              
            SERIAL_PROTOCOL_F(mbl.z_values[y][x], 5);
=======
    MeshLevelingState state = code_seen('S') || code_seen('s') ? (MeshLevelingState)code_value_short() : MeshReport;
    if (state < 0 || state > 2) {
      SERIAL_PROTOCOLLNPGM("S out of range (0-2).");
      return;
    }

    switch(state) {
      case MeshReport:
        if (mbl.active) {
          SERIAL_PROTOCOLPGM("Num X,Y: ");
          SERIAL_PROTOCOL(MESH_NUM_X_POINTS);
          SERIAL_PROTOCOLCHAR(',');
          SERIAL_PROTOCOL(MESH_NUM_Y_POINTS);
          SERIAL_PROTOCOLPGM("\nZ search height: ");
          SERIAL_PROTOCOL(MESH_HOME_SEARCH_Z);
          SERIAL_PROTOCOLLNPGM("\nMeasured points:");
          for (int y = 0; y < MESH_NUM_Y_POINTS; y++) {
            for (int x = 0; x < MESH_NUM_X_POINTS; x++) {
              SERIAL_PROTOCOLPGM("  ");
              SERIAL_PROTOCOL_F(mbl.z_values[y][x], 5);
            }
            SERIAL_EOL;
>>>>>>> cb02bc6db458bde59ddbf8ef37356a3eb5c0f4a8

