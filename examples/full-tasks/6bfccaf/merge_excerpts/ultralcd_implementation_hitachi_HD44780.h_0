// EXCERPT FROM MERGE  Marlin/ultralcd_implementation_hitachi_HD44780.h

<<<<<<< HEAD
static void lcd_implementation_drawmenu_generic(uint8_t row, const char* pstr, char pre_char, char post_char)
{
    char c;
    //Use all characters in narrow LCDs
  #if LCD_WIDTH < 20
      uint8_t n = LCD_WIDTH - 1 - 1;
    #else
      uint8_t n = LCD_WIDTH - 1 - 2;
  #endif
    lcd.setCursor(0, row);
    lcd.print(pre_char);
    while( ((c = pgm_read_byte(pstr)) != '\0') && (n>0) )
    {
        n -= lcd_print(c);
        pstr++;
    }
    while(n--) {
      lcd.print(' ');
    }
    lcd.print(post_char);
    lcd.print(' ');
}
static void lcd_implementation_drawmenu_setting_edit_generic(uint8_t row, const char* pstr, char pre_char, char* data)
{
    char c;
    //Use all characters in narrow LCDs
  #if LCD_WIDTH < 20
      uint8_t n = LCD_WIDTH - 1 - 1 - lcd_strlen(data);
    #else
      uint8_t n = LCD_WIDTH - 1 - 2 - lcd_strlen(data);
  #endif
    lcd.setCursor(0, row);
    lcd.print(pre_char);
    while( ((c = pgm_read_byte(pstr)) != '\0') && (n>0) ) {
      n -= lcd_print(c);
      pstr++;
    }
    lcd.print(':');
    while(n--)
      lcd.print(' ');
    lcd_print(data);
}
static void lcd_implementation_drawmenu_setting_edit_generic_P(uint8_t row, const char* pstr, char pre_char, const char* data)
{
    char c;
    //Use all characters in narrow LCDs
  #if LCD_WIDTH < 20
      uint8_t n = LCD_WIDTH - 1 - 1 - lcd_strlen_P(data);
    #else
      uint8_t n = LCD_WIDTH - 1 - 2 - lcd_strlen_P(data);
  #endif
    lcd.setCursor(0, row);
    lcd.print(pre_char);
    while( ((c = pgm_read_byte(pstr)) != '\0') && (n>0) ) {
      n -= lcd_print(c);
      pstr++;
    }
    lcd.print(':');
    while(n--)
      lcd.print(' ');
    lcd_printPGM(data);
=======
static void lcd_implementation_drawmenu_generic(bool sel, uint8_t row, const char* pstr, char pre_char, char post_char) {
  char c;
  uint8_t n = LCD_WIDTH - 1 - (LCD_WIDTH < 20 ? 1 : 2);
  lcd.setCursor(0, row);
  lcd.print(sel ? pre_char : ' ');
  while ((c = pgm_read_byte(pstr)) && n > 0) {
    lcd.print(c);
    pstr++;
    if ((pgm_read_byte(pstr) & 0xc0) != 0x80) n--;
  }
  while(n--) lcd.print(' ');
  lcd.print(post_char);
  lcd.print(' ');
}
static void lcd_implementation_drawmenu_setting_edit_generic(bool sel, uint8_t row, const char* pstr, char pre_char, char* data) {
  char c;
  uint8_t n = LCD_WIDTH - 1 - (LCD_WIDTH < 20 ? 1 : 2) - lcd_strlen(data);
  lcd.setCursor(0, row);
  lcd.print(sel ? pre_char : ' ');
  while ((c = pgm_read_byte(pstr)) && n > 0) {
    lcd.print(c);
    pstr++;
    if ((pgm_read_byte(pstr) & 0xc0) != 0x80) n--;
  }
  lcd.print(':');
  while (n--) lcd.print(' ');
  lcd.print(data);
}
static void lcd_implementation_drawmenu_setting_edit_generic_P(bool sel, uint8_t row, const char* pstr, char pre_char, const char* data) {
  char c;
  uint8_t n = LCD_WIDTH - 1 - (LCD_WIDTH < 20 ? 1 : 2) - lcd_strlen_P(data);
  lcd.setCursor(0, row);
  lcd.print(sel ? pre_char : ' ');
  while ((c = pgm_read_byte(pstr)) && n > 0) {
    lcd.print(c);
    pstr++;
    if ((pgm_read_byte(pstr) & 0xc0) != 0x80) n--;
  }
  lcd.print(':');
  while (n--) lcd.print(' ');
  lcd_printPGM(data);
>>>>>>> 0858fba1922be942a85cf28a9d4f6cce21862d55

