// EXCERPT FROM MERGE  Marlin/temperature.h

<<<<<<< HEAD
inline float degHotend0(){  return analog2temp(current_raw[TEMPSENSOR_HOTEND_0]);};
inline float degHotend1(){  return analog2temp(current_raw[TEMPSENSOR_HOTEND_1]);};
inline float degBed() {  return analog2tempBed(current_raw[TEMPSENSOR_BED]);};
inline float degHotend(uint8_t extruder){  
  if(extruder == 0) return analog2temp(current_raw[TEMPSENSOR_HOTEND_0]);
  if(extruder == 1) return analog2temp(current_raw[TEMPSENSOR_HOTEND_1]);
};

inline float degTargetHotend0() {  return analog2temp(target_raw[TEMPSENSOR_HOTEND_0]);};
inline float degTargetHotend1() {  return analog2temp(target_raw[TEMPSENSOR_HOTEND_1]);};
inline float degTargetHotend(uint8_t extruder){  
  if(extruder == 0) return analog2temp(target_raw[TEMPSENSOR_HOTEND_0]);
  if(extruder == 1) return analog2temp(target_raw[TEMPSENSOR_HOTEND_1]);
};

inline float degTargetBed() {   return analog2tempBed(target_raw[TEMPSENSOR_BED]);};
=======
FORCE_INLINE float degHotend0(){  return analog2temp(current_raw[TEMPSENSOR_HOTEND_0]);};
FORCE_INLINE float degHotend1(){  return analog2temp(current_raw[TEMPSENSOR_HOTEND_1]);};
FORCE_INLINE float degBed() {  return analog2tempBed(current_raw[TEMPSENSOR_BED]);};

FORCE_INLINE float degTargetHotend0() {  return analog2temp(target_raw[TEMPSENSOR_HOTEND_0]);};
FORCE_INLINE float degTargetHotend1() {  return analog2temp(target_raw[TEMPSENSOR_HOTEND_1]);};
FORCE_INLINE float degTargetBed() {   return analog2tempBed(target_raw[TEMPSENSOR_BED]);};
>>>>>>> 2d9a7156555e0cdd969b44cc7c4d3c8a18875cfe

